
HW4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d53c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800d6cc  0800d6cc  0000e6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8d0  0800d8d0  0000f090  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8d0  0800d8d0  0000e8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8d8  0800d8d8  0000f090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8d8  0800d8d8  0000e8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8dc  0800d8dc  0000e8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800d8e0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b5c  20000090  0800d970  0000f090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002bec  0800d970  0000fbec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003a0ce  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006861  00000000  00000000  0004918e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003110  00000000  00000000  0004f9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000025ea  00000000  00000000  00052b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000319a9  00000000  00000000  000550ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033ce0  00000000  00000000  00086a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ad8a  00000000  00000000  000ba773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d54fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000dae8  00000000  00000000  001d5540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  001e3028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d6b4 	.word	0x0800d6b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800d6b4 	.word	0x0800d6b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02ld:%02ld:%02ld.%03ld", (long)(ms/(60*60*1000)%24), (long)(ms/(60*1000)%60), (long)((ms/1000)%60), (long)(ms%1000));
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8000570:	b5b0      	push	{r4, r5, r7, lr}
 8000572:	b08c      	sub	sp, #48	@ 0x30
 8000574:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN BlueNRG_MS_Init_PreTreatment */

  /* USER CODE END BlueNRG_MS_Init_PreTreatment */

  /* Initialize the peripherals and the BLE Stack */
  const char *name = "BlueNRG";
 8000576:	4b57      	ldr	r3, [pc, #348]	@ (80006d4 <MX_BlueNRG_MS_Init+0x164>)
 8000578:	61bb      	str	r3, [r7, #24]
  uint8_t  bdaddr_len_out;
  uint8_t  hwVersion;
  uint16_t fwVersion;
  int ret;

  User_Init();
 800057a:	f000 f8c5 	bl	8000708 <User_Init>

  /* Get the User Button initial state */
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 800057e:	2000      	movs	r0, #0
 8000580:	f001 fe42 	bl	8002208 <BSP_PB_GetState>
 8000584:	4603      	mov	r3, r0
 8000586:	b2da      	uxtb	r2, r3
 8000588:	4b53      	ldr	r3, [pc, #332]	@ (80006d8 <MX_BlueNRG_MS_Init+0x168>)
 800058a:	701a      	strb	r2, [r3, #0]

  hci_init(user_notify, NULL);
 800058c:	2100      	movs	r1, #0
 800058e:	4853      	ldr	r0, [pc, #332]	@ (80006dc <MX_BlueNRG_MS_Init+0x16c>)
 8000590:	f008 fec4 	bl	800931c <hci_init>

  /* get the BlueNRG HW and FW versions */
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8000594:	1dba      	adds	r2, r7, #6
 8000596:	f107 0308 	add.w	r3, r7, #8
 800059a:	4611      	mov	r1, r2
 800059c:	4618      	mov	r0, r3
 800059e:	f008 fcf0 	bl	8008f82 <getBlueNRGVersion>
   * Reset BlueNRG again otherwise we won't
   * be able to change its MAC address.
   * aci_hal_write_config_data() must be the first
   * command after reset otherwise it will fail.
   */
  hci_reset();
 80005a2:	f008 fd32 	bl	800900a <hci_reset>
  HAL_Delay(100);
 80005a6:	2064      	movs	r0, #100	@ 0x64
 80005a8:	f003 fa12 	bl	80039d0 <HAL_Delay>

  PRINTF("HWver %d\r\nFWver %d\r\n", hwVersion, fwVersion);
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 80005ac:	7a3b      	ldrb	r3, [r7, #8]
 80005ae:	2b30      	cmp	r3, #48	@ 0x30
 80005b0:	d902      	bls.n	80005b8 <MX_BlueNRG_MS_Init+0x48>
    bnrg_expansion_board = IDB05A1;
 80005b2:	4b4b      	ldr	r3, [pc, #300]	@ (80006e0 <MX_BlueNRG_MS_Init+0x170>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
  }

  ret = aci_hal_read_config_data(CONFIG_DATA_RANDOM_ADDRESS, BDADDR_SIZE, &bdaddr_len_out, bdaddr);
 80005b8:	f107 0209 	add.w	r2, r7, #9
 80005bc:	4b49      	ldr	r3, [pc, #292]	@ (80006e4 <MX_BlueNRG_MS_Init+0x174>)
 80005be:	2106      	movs	r1, #6
 80005c0:	2080      	movs	r0, #128	@ 0x80
 80005c2:	f008 fc58 	bl	8008e76 <aci_hal_read_config_data>
 80005c6:	4603      	mov	r3, r0
 80005c8:	617b      	str	r3, [r7, #20]

  if (ret) {
    PRINTF("Read Static Random address failed.\r\n");
  }

  if ((bdaddr[5] & 0xC0) != 0xC0) {
 80005ca:	4b46      	ldr	r3, [pc, #280]	@ (80006e4 <MX_BlueNRG_MS_Init+0x174>)
 80005cc:	795b      	ldrb	r3, [r3, #5]
 80005ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80005d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80005d4:	d001      	beq.n	80005da <MX_BlueNRG_MS_Init+0x6a>
    PRINTF("Static Random address not well formed.\r\n");
    while(1);
 80005d6:	bf00      	nop
 80005d8:	e7fd      	b.n	80005d6 <MX_BlueNRG_MS_Init+0x66>
  }

  /* GATT Init */
  ret = aci_gatt_init();
 80005da:	f008 fa18 	bl	8008a0e <aci_gatt_init>
 80005de:	4603      	mov	r3, r0
 80005e0:	617b      	str	r3, [r7, #20]
  if(ret){
    PRINTF("GATT_Init failed.\r\n");
  }

  /* GAP Init */
  if (bnrg_expansion_board == IDB05A1) {
 80005e2:	4b3f      	ldr	r3, [pc, #252]	@ (80006e0 <MX_BlueNRG_MS_Init+0x170>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d110      	bne.n	800060c <MX_BlueNRG_MS_Init+0x9c>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80005ea:	f107 020e 	add.w	r2, r7, #14
 80005ee:	f107 030a 	add.w	r3, r7, #10
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	4613      	mov	r3, r2
 80005fc:	2207      	movs	r2, #7
 80005fe:	2100      	movs	r1, #0
 8000600:	2001      	movs	r0, #1
 8000602:	f007 ffd8 	bl	80085b6 <aci_gap_init_IDB05A1>
 8000606:	4603      	mov	r3, r0
 8000608:	617b      	str	r3, [r7, #20]
 800060a:	e00a      	b.n	8000622 <MX_BlueNRG_MS_Init+0xb2>
  }
  else {
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 800060c:	f107 030a 	add.w	r3, r7, #10
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	f107 010e 	add.w	r1, r7, #14
 8000618:	2001      	movs	r0, #1
 800061a:	f008 f81c 	bl	8008656 <aci_gap_init_IDB04A1>
 800061e:	4603      	mov	r3, r0
 8000620:	617b      	str	r3, [r7, #20]
  if (ret != BLE_STATUS_SUCCESS) {
    PRINTF("GAP_Init failed.\r\n");
  }

  /* Update device name */
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8000622:	89fc      	ldrh	r4, [r7, #14]
 8000624:	89bd      	ldrh	r5, [r7, #12]
                                   strlen(name), (uint8_t *)name);
 8000626:	69b8      	ldr	r0, [r7, #24]
 8000628:	f7ff fdd2 	bl	80001d0 <strlen>
 800062c:	4603      	mov	r3, r0
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 800062e:	b2da      	uxtb	r2, r3
 8000630:	69bb      	ldr	r3, [r7, #24]
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	4613      	mov	r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	4629      	mov	r1, r5
 800063a:	4620      	mov	r0, r4
 800063c:	f008 fb5e 	bl	8008cfc <aci_gatt_update_char_value>
 8000640:	4603      	mov	r3, r0
 8000642:	617b      	str	r3, [r7, #20]
  if (ret) {
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_BlueNRG_MS_Init+0xde>
    PRINTF("aci_gatt_update_char_value failed.\r\n");
    while(1);
 800064a:	bf00      	nop
 800064c:	e7fd      	b.n	800064a <MX_BlueNRG_MS_Init+0xda>
  }

  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 800064e:	2301      	movs	r3, #1
 8000650:	9303      	str	r3, [sp, #12]
 8000652:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <MX_BlueNRG_MS_Init+0x178>)
 8000654:	9302      	str	r3, [sp, #8]
 8000656:	2300      	movs	r3, #0
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2310      	movs	r3, #16
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2307      	movs	r3, #7
 8000660:	2200      	movs	r2, #0
 8000662:	2100      	movs	r1, #0
 8000664:	2001      	movs	r0, #1
 8000666:	f008 f92a 	bl	80088be <aci_gap_set_auth_requirement>
 800066a:	4603      	mov	r3, r0
 800066c:	617b      	str	r3, [r7, #20]
                                     7,
                                     16,
                                     USE_FIXED_PIN_FOR_PAIRING,
                                     123456,
                                     BONDING);
  if (ret) {
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_BlueNRG_MS_Init+0x108>
    PRINTF("aci_gap_set_authentication_requirement failed.\r\n");
    while(1);
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <MX_BlueNRG_MS_Init+0x104>
  }

  PRINTF("BLE Stack Initialized\r\n");

  ret = Add_HWServW2ST_Service();
 8000678:	f000 f8aa 	bl	80007d0 <Add_HWServW2ST_Service>
 800067c:	4603      	mov	r3, r0
 800067e:	617b      	str	r3, [r7, #20]
  if(ret == BLE_STATUS_SUCCESS) {
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <MX_BlueNRG_MS_Init+0x11a>
    PRINTF("BlueMS HW service added successfully.\r\n");
  } else {
    PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
    while(1);
 8000686:	bf00      	nop
 8000688:	e7fd      	b.n	8000686 <MX_BlueNRG_MS_Init+0x116>
  }

  /*---initialize global vairables---*/
	const char *source = DEVICE_NAME;
 800068a:	4b18      	ldr	r3, [pc, #96]	@ (80006ec <MX_BlueNRG_MS_Init+0x17c>)
 800068c:	613b      	str	r3, [r7, #16]

	// Use a for loop to copy each character
	for (int i = 0; i < 17; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	e00b      	b.n	80006ac <MX_BlueNRG_MS_Init+0x13c>
		device_name[i] = source[i];
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4413      	add	r3, r2
 800069a:	7819      	ldrb	r1, [r3, #0]
 800069c:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <MX_BlueNRG_MS_Init+0x180>)
 800069e:	69fb      	ldr	r3, [r7, #28]
 80006a0:	4413      	add	r3, r2
 80006a2:	460a      	mov	r2, r1
 80006a4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 17; i++) {
 80006a6:	69fb      	ldr	r3, [r7, #28]
 80006a8:	3301      	adds	r3, #1
 80006aa:	61fb      	str	r3, [r7, #28]
 80006ac:	69fb      	ldr	r3, [r7, #28]
 80006ae:	2b10      	cmp	r3, #16
 80006b0:	ddf0      	ble.n	8000694 <MX_BlueNRG_MS_Init+0x124>
	}
	device_name[17] = '\0'; // Add the null terminator at the end
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <MX_BlueNRG_MS_Init+0x180>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	745a      	strb	r2, [r3, #17]
	acc_sensitivity = SENSITIVITY;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_BlueNRG_MS_Init+0x184>)
 80006ba:	2264      	movs	r2, #100	@ 0x64
 80006bc:	701a      	strb	r2, [r3, #0]
//     PRINTF("Error while adding BlueMS HW service: 0x%02x\r\n", ret);
//     while(1);
//  }

  /* Set output power level */
  ret = aci_hal_set_tx_power_level(1,4);
 80006be:	2104      	movs	r1, #4
 80006c0:	2001      	movs	r0, #1
 80006c2:	f008 fc2d 	bl	8008f20 <aci_hal_set_tx_power_level>
 80006c6:	4603      	mov	r3, r0
 80006c8:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN BlueNRG_MS_Init_PostTreatment */

  /* USER CODE END BlueNRG_MS_Init_PostTreatment */
}
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bdb0      	pop	{r4, r5, r7, pc}
 80006d2:	bf00      	nop
 80006d4:	0800d6cc 	.word	0x0800d6cc
 80006d8:	20000000 	.word	0x20000000
 80006dc:	08000b29 	.word	0x08000b29
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	200000b0 	.word	0x200000b0
 80006e8:	0001e240 	.word	0x0001e240
 80006ec:	0800d6d4 	.word	0x0800d6d4
 80006f0:	200000b8 	.word	0x200000b8
 80006f4:	200000ca 	.word	0x200000ca

080006f8 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BlueNRG_MS_Process_PreTreatment */

  /* USER CODE END BlueNRG_MS_Process_PreTreatment */

  User_Process();
 80006fc:	f000 f812 	bl	8000724 <User_Process>
  hci_user_evt_proc();
 8000700:	f008 ff86 	bl	8009610 <hci_user_evt_proc>

  /* USER CODE BEGIN BlueNRG_MS_Process_PostTreatment */

  /* USER CODE END BlueNRG_MS_Process_PostTreatment */
}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}

08000708 <User_Init>:
 *
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800070c:	2101      	movs	r1, #1
 800070e:	2000      	movs	r0, #0
 8000710:	f001 fd26 	bl	8002160 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8000714:	2000      	movs	r0, #0
 8000716:	f001 fcbb 	bl	8002090 <BSP_LED_Init>

  BSP_COM_Init(COM1);
 800071a:	2000      	movs	r0, #0
 800071c:	f001 fdd2 	bl	80022c4 <BSP_COM_Init>
}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}

08000724 <User_Process>:
 *
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
//  float data_t;
//  float data_p;
//  static uint32_t counter = 0;

  if (set_connectable)
 8000728:	4b1a      	ldr	r3, [pc, #104]	@ (8000794 <User_Process+0x70>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2b00      	cmp	r3, #0
 8000730:	d004      	beq.n	800073c <User_Process+0x18>
  {
    Set_DeviceConnectable();
 8000732:	f000 f987 	bl	8000a44 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8000736:	4b17      	ldr	r3, [pc, #92]	@ (8000794 <User_Process+0x70>)
 8000738:	2200      	movs	r2, #0
 800073a:	701a      	strb	r2, [r3, #0]
    while (BSP_PB_GetState(BUTTON_KEY) == !user_button_init_state);

    /* Debouncing */
    HAL_Delay(50);
#endif
    BSP_LED_Toggle(LED2);
 800073c:	2000      	movs	r0, #0
 800073e:	f001 fcb9 	bl	80020b4 <BSP_LED_Toggle>

    if (connected)
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <User_Process+0x74>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d021      	beq.n	800078e <User_Process+0x6a>
    {
      /* Set a random seed */
      srand(HAL_GetTick());
 800074a:	f003 f935 	bl	80039b8 <HAL_GetTick>
 800074e:	4603      	mov	r3, r0
 8000750:	4618      	mov	r0, r3
 8000752:	f00b ffd1 	bl	800c6f8 <srand>
//    	  PRINTF("I'm happy.\r\n");
//      }

      /* Update emulated Acceleration, Gyroscope and Sensor Fusion data */
//      Set_Random_Motion_Values(counter);
      x_axes.AXIS_X  = acc_axes.x;
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <User_Process+0x78>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a11      	ldr	r2, [pc, #68]	@ (80007a0 <User_Process+0x7c>)
 800075c:	6013      	str	r3, [r2, #0]
      x_axes.AXIS_Y  = acc_axes.y;
 800075e:	4b0f      	ldr	r3, [pc, #60]	@ (800079c <User_Process+0x78>)
 8000760:	685b      	ldr	r3, [r3, #4]
 8000762:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <User_Process+0x7c>)
 8000764:	6053      	str	r3, [r2, #4]
      x_axes.AXIS_Z  = acc_axes.z;
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <User_Process+0x78>)
 8000768:	689b      	ldr	r3, [r3, #8]
 800076a:	4a0d      	ldr	r2, [pc, #52]	@ (80007a0 <User_Process+0x7c>)
 800076c:	6093      	str	r3, [r2, #8]
      if(want_update){
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <User_Process+0x80>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d007      	beq.n	8000788 <User_Process+0x64>
		  Acc_Update(&x_axes, &g_axes, &m_axes);
 8000778:	4a0b      	ldr	r2, [pc, #44]	@ (80007a8 <User_Process+0x84>)
 800077a:	490c      	ldr	r1, [pc, #48]	@ (80007ac <User_Process+0x88>)
 800077c:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <User_Process+0x7c>)
 800077e:	f000 f8ad 	bl	80008dc <Acc_Update>
		  PRINTF("ACC UPDATE SUCCESS!! it's %d, %d, %d\r\n", (int)x_axes.AXIS_X, (int)x_axes.AXIS_Y, (int)x_axes.AXIS_Z);
		  //Quat_Update(&q_axes);
		  want_update = 0;
 8000782:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <User_Process+0x80>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
//      if (counter == 40) {
//        counter = 0;
//        Reset_Motion_Values();
//      }
#if !USE_BUTTON
      HAL_Delay(10); /* wait 1 sec before sending new data */
 8000788:	200a      	movs	r0, #10
 800078a:	f003 f921 	bl	80039d0 <HAL_Delay>
#if USE_BUTTON
    /* Reset the User Button flag */
    user_button_pressed = 0;
  }
#endif
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000001 	.word	0x20000001
 8000798:	200000f4 	.word	0x200000f4
 800079c:	20000d24 	.word	0x20000d24
 80007a0:	200000f8 	.word	0x200000f8
 80007a4:	20000d20 	.word	0x20000d20
 80007a8:	20000110 	.word	0x20000110
 80007ac:	20000104 	.word	0x20000104

080007b0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	71fb      	strb	r3, [r7, #7]
  /* Set the User Button flag */
  user_button_pressed = 1;
 80007ba:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <BSP_PB_Callback+0x1c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	200000b6 	.word	0x200000b6

080007d0 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b08d      	sub	sp, #52	@ 0x34
 80007d4:	af06      	add	r7, sp, #24
  tBleStatus ret;
  uint8_t uuid[16];

  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);
 80007d6:	231b      	movs	r3, #27
 80007d8:	713b      	strb	r3, [r7, #4]
 80007da:	23c5      	movs	r3, #197	@ 0xc5
 80007dc:	717b      	strb	r3, [r7, #5]
 80007de:	23d5      	movs	r3, #213	@ 0xd5
 80007e0:	71bb      	strb	r3, [r7, #6]
 80007e2:	23a5      	movs	r3, #165	@ 0xa5
 80007e4:	71fb      	strb	r3, [r7, #7]
 80007e6:	2302      	movs	r3, #2
 80007e8:	723b      	strb	r3, [r7, #8]
 80007ea:	2300      	movs	r3, #0
 80007ec:	727b      	strb	r3, [r7, #9]
 80007ee:	23b4      	movs	r3, #180	@ 0xb4
 80007f0:	72bb      	strb	r3, [r7, #10]
 80007f2:	239a      	movs	r3, #154	@ 0x9a
 80007f4:	72fb      	strb	r3, [r7, #11]
 80007f6:	23e1      	movs	r3, #225	@ 0xe1
 80007f8:	733b      	strb	r3, [r7, #12]
 80007fa:	2311      	movs	r3, #17
 80007fc:	737b      	strb	r3, [r7, #13]
 80007fe:	2301      	movs	r3, #1
 8000800:	73bb      	strb	r3, [r7, #14]
 8000802:	2300      	movs	r3, #0
 8000804:	73fb      	strb	r3, [r7, #15]
 8000806:	2300      	movs	r3, #0
 8000808:	743b      	strb	r3, [r7, #16]
 800080a:	2300      	movs	r3, #0
 800080c:	747b      	strb	r3, [r7, #17]
 800080e:	2300      	movs	r3, #0
 8000810:	74bb      	strb	r3, [r7, #18]
 8000812:	2300      	movs	r3, #0
 8000814:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8000816:	4b2d      	ldr	r3, [pc, #180]	@ (80008cc <Add_HWServW2ST_Service+0xfc>)
 8000818:	461c      	mov	r4, r3
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE,
 8000822:	4b2b      	ldr	r3, [pc, #172]	@ (80008d0 <Add_HWServW2ST_Service+0x100>)
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	2310      	movs	r3, #16
 8000828:	2201      	movs	r2, #1
 800082a:	4928      	ldr	r1, [pc, #160]	@ (80008cc <Add_HWServW2ST_Service+0xfc>)
 800082c:	2002      	movs	r0, #2
 800082e:	f008 f911 	bl	8008a54 <aci_gatt_add_serv>
 8000832:	4603      	mov	r3, r0
 8000834:	75fb      	strb	r3, [r7, #23]
                          1+3*5, &HWServW2STHandle);
  if (ret != BLE_STATUS_SUCCESS)
 8000836:	7dfb      	ldrb	r3, [r7, #23]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <Add_HWServW2ST_Service+0x70>
    return BLE_STATUS_ERROR;
 800083c:	2347      	movs	r3, #71	@ 0x47
 800083e:	e040      	b.n	80008c2 <Add_HWServW2ST_Service+0xf2>
//                           16, 0, &EnvironmentalCharHandle);
//  if (ret != BLE_STATUS_SUCCESS)
//    return BLE_STATUS_ERROR;

  /* Fill the AccGyroMag BLE Characteristc */
  COPY_ACC_GYRO_MAG_W2ST_CHAR_UUID(uuid);
 8000840:	231b      	movs	r3, #27
 8000842:	713b      	strb	r3, [r7, #4]
 8000844:	23c5      	movs	r3, #197	@ 0xc5
 8000846:	717b      	strb	r3, [r7, #5]
 8000848:	23d5      	movs	r3, #213	@ 0xd5
 800084a:	71bb      	strb	r3, [r7, #6]
 800084c:	23a5      	movs	r3, #165	@ 0xa5
 800084e:	71fb      	strb	r3, [r7, #7]
 8000850:	2302      	movs	r3, #2
 8000852:	723b      	strb	r3, [r7, #8]
 8000854:	2300      	movs	r3, #0
 8000856:	727b      	strb	r3, [r7, #9]
 8000858:	2336      	movs	r3, #54	@ 0x36
 800085a:	72bb      	strb	r3, [r7, #10]
 800085c:	23ac      	movs	r3, #172	@ 0xac
 800085e:	72fb      	strb	r3, [r7, #11]
 8000860:	23e1      	movs	r3, #225	@ 0xe1
 8000862:	733b      	strb	r3, [r7, #12]
 8000864:	2311      	movs	r3, #17
 8000866:	737b      	strb	r3, [r7, #13]
 8000868:	2301      	movs	r3, #1
 800086a:	73bb      	strb	r3, [r7, #14]
 800086c:	2300      	movs	r3, #0
 800086e:	73fb      	strb	r3, [r7, #15]
 8000870:	2300      	movs	r3, #0
 8000872:	743b      	strb	r3, [r7, #16]
 8000874:	2300      	movs	r3, #0
 8000876:	747b      	strb	r3, [r7, #17]
 8000878:	23e0      	movs	r3, #224	@ 0xe0
 800087a:	74bb      	strb	r3, [r7, #18]
 800087c:	2300      	movs	r3, #0
 800087e:	74fb      	strb	r3, [r7, #19]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8000880:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <Add_HWServW2ST_Service+0x104>)
 8000882:	461c      	mov	r4, r3
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128,
 800088c:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <Add_HWServW2ST_Service+0x100>)
 800088e:	8818      	ldrh	r0, [r3, #0]
 8000890:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <Add_HWServW2ST_Service+0x108>)
 8000892:	9305      	str	r3, [sp, #20]
 8000894:	2300      	movs	r3, #0
 8000896:	9304      	str	r3, [sp, #16]
 8000898:	2310      	movs	r3, #16
 800089a:	9303      	str	r3, [sp, #12]
 800089c:	2300      	movs	r3, #0
 800089e:	9302      	str	r3, [sp, #8]
 80008a0:	2300      	movs	r3, #0
 80008a2:	9301      	str	r3, [sp, #4]
 80008a4:	2312      	movs	r3, #18
 80008a6:	9300      	str	r3, [sp, #0]
 80008a8:	2314      	movs	r3, #20
 80008aa:	4a0a      	ldr	r2, [pc, #40]	@ (80008d4 <Add_HWServW2ST_Service+0x104>)
 80008ac:	2102      	movs	r1, #2
 80008ae:	f008 f95a 	bl	8008b66 <aci_gatt_add_char>
 80008b2:	4603      	mov	r3, r0
 80008b4:	75fb      	strb	r3, [r7, #23]
                           2+3*3*2,
						   CHAR_PROP_NOTIFY | CHAR_PROP_READ,
                           ATTR_PERMISSION_NONE,
						   0,
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS)
 80008b6:	7dfb      	ldrb	r3, [r7, #23]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <Add_HWServW2ST_Service+0xf0>
    return BLE_STATUS_ERROR;
 80008bc:	2347      	movs	r3, #71	@ 0x47
 80008be:	e000      	b.n	80008c2 <Add_HWServW2ST_Service+0xf2>

  return BLE_STATUS_SUCCESS;
 80008c0:	2300      	movs	r3, #0
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	371c      	adds	r7, #28
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd90      	pop	{r4, r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000d0 	.word	0x200000d0
 80008d0:	200000cc 	.word	0x200000cc
 80008d4:	200000e0 	.word	0x200000e0
 80008d8:	200000ce 	.word	0x200000ce

080008dc <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
  uint8_t buff[2+2*3*3];
  tBleStatus ret;

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 80008e8:	f003 f866 	bl	80039b8 <HAL_GetTick>
 80008ec:	4603      	mov	r3, r0
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	743b      	strb	r3, [r7, #16]
 80008f4:	f003 f860 	bl	80039b8 <HAL_GetTick>
 80008f8:	4603      	mov	r3, r0
 80008fa:	0adb      	lsrs	r3, r3, #11
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	747b      	strb	r3, [r7, #17]

  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	b2db      	uxtb	r3, r3
 8000906:	425b      	negs	r3, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	74bb      	strb	r3, [r7, #18]
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	425b      	negs	r3, r3
 8000912:	121b      	asrs	r3, r3, #8
 8000914:	b2db      	uxtb	r3, r3
 8000916:	74fb      	strb	r3, [r7, #19]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	753b      	strb	r3, [r7, #20]
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	121b      	asrs	r3, r3, #8
 8000926:	b2db      	uxtb	r3, r3
 8000928:	757b      	strb	r3, [r7, #21]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	425b      	negs	r3, r3
 8000932:	b2db      	uxtb	r3, r3
 8000934:	75bb      	strb	r3, [r7, #22]
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	689b      	ldr	r3, [r3, #8]
 800093a:	425b      	negs	r3, r3
 800093c:	121b      	asrs	r3, r3, #8
 800093e:	b2db      	uxtb	r3, r3
 8000940:	75fb      	strb	r3, [r7, #23]

  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	b2db      	uxtb	r3, r3
 8000948:	763b      	strb	r3, [r7, #24]
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	121b      	asrs	r3, r3, #8
 8000950:	b2db      	uxtb	r3, r3
 8000952:	767b      	strb	r3, [r7, #25]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 8000954:	68bb      	ldr	r3, [r7, #8]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	76bb      	strb	r3, [r7, #26]
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	121b      	asrs	r3, r3, #8
 8000962:	b2db      	uxtb	r3, r3
 8000964:	76fb      	strb	r3, [r7, #27]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 8000966:	68bb      	ldr	r3, [r7, #8]
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	b2db      	uxtb	r3, r3
 800096c:	773b      	strb	r3, [r7, #28]
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	689b      	ldr	r3, [r3, #8]
 8000972:	121b      	asrs	r3, r3, #8
 8000974:	b2db      	uxtb	r3, r3
 8000976:	777b      	strb	r3, [r7, #29]

  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	b2db      	uxtb	r3, r3
 800097e:	77bb      	strb	r3, [r7, #30]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	121b      	asrs	r3, r3, #8
 8000986:	b2db      	uxtb	r3, r3
 8000988:	77fb      	strb	r3, [r7, #31]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	b2db      	uxtb	r3, r3
 8000990:	f887 3020 	strb.w	r3, [r7, #32]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	121b      	asrs	r3, r3, #8
 800099a:	b2db      	uxtb	r3, r3
 800099c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	121b      	asrs	r3, r3, #8
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <Acc_Update+0x10c>)
 80009b8:	8818      	ldrh	r0, [r3, #0]
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <Acc_Update+0x110>)
 80009bc:	8819      	ldrh	r1, [r3, #0]
 80009be:	f107 0310 	add.w	r3, r7, #16
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2314      	movs	r3, #20
 80009c6:	2200      	movs	r2, #0
 80009c8:	f008 f998 	bl	8008cfc <aci_gatt_update_char_value>
 80009cc:	4603      	mov	r3, r0
 80009ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				   0, 2+2*3*3, buff);
  if (ret != BLE_STATUS_SUCCESS){
 80009d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <Acc_Update+0x102>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\r\n",ret) ;
    return BLE_STATUS_ERROR ;
 80009da:	2347      	movs	r3, #71	@ 0x47
 80009dc:	e000      	b.n	80009e0 <Acc_Update+0x104>
  }

  return BLE_STATUS_SUCCESS;
 80009de:	2300      	movs	r3, #0
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3728      	adds	r7, #40	@ 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000cc 	.word	0x200000cc
 80009ec:	200000ce 	.word	0x200000ce

080009f0 <Read_Request_CB>:
* Description    : Update the sensor values.
* Input          : Handle of the characteristic to update.
* Return         : None.
*******************************************************************************/
void Read_Request_CB(uint16_t handle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
  tBleStatus ret;

  if(handle == AccGyroMagCharHandle + 1)
 80009fa:	88fa      	ldrh	r2, [r7, #6]
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <Read_Request_CB+0x40>)
 80009fe:	881b      	ldrh	r3, [r3, #0]
 8000a00:	3301      	adds	r3, #1
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d104      	bne.n	8000a10 <Read_Request_CB+0x20>
  {
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8000a06:	4a0b      	ldr	r2, [pc, #44]	@ (8000a34 <Read_Request_CB+0x44>)
 8000a08:	490b      	ldr	r1, [pc, #44]	@ (8000a38 <Read_Request_CB+0x48>)
 8000a0a:	480c      	ldr	r0, [pc, #48]	@ (8000a3c <Read_Request_CB+0x4c>)
 8000a0c:	f7ff ff66 	bl	80008dc <Acc_Update>
//    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation
//    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation
//    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
//  }

  if(connection_handle !=0)
 8000a10:	4b0b      	ldr	r3, [pc, #44]	@ (8000a40 <Read_Request_CB+0x50>)
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d006      	beq.n	8000a26 <Read_Request_CB+0x36>
  {
    ret = aci_gatt_allow_read(connection_handle);
 8000a18:	4b09      	ldr	r3, [pc, #36]	@ (8000a40 <Read_Request_CB+0x50>)
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 f9fd 	bl	8008e1c <aci_gatt_allow_read>
 8000a22:	4603      	mov	r3, r0
 8000a24:	73fb      	strb	r3, [r7, #15]
    if (ret != BLE_STATUS_SUCCESS)
    {
      PRINTF("aci_gatt_allow_read() failed: 0x%02x\r\n", ret);
    }
  }
}
 8000a26:	bf00      	nop
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200000ce 	.word	0x200000ce
 8000a34:	20000110 	.word	0x20000110
 8000a38:	20000104 	.word	0x20000104
 8000a3c:	200000f8 	.word	0x200000f8
 8000a40:	200000f0 	.word	0x200000f0

08000a44 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b092      	sub	sp, #72	@ 0x48
 8000a48:	af08      	add	r7, sp, #32

  uint8_t ret;

  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME};
 8000a4a:	4a35      	ldr	r2, [pc, #212]	@ (8000b20 <Set_DeviceConnectable+0xdc>)
 8000a4c:	f107 031c 	add.w	r3, r7, #28
 8000a50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a54:	e883 0003 	stmia.w	r3, {r0, r1}

  uint8_t manuf_data[26] = {
 8000a58:	2302      	movs	r3, #2
 8000a5a:	703b      	strb	r3, [r7, #0]
 8000a5c:	230a      	movs	r3, #10
 8000a5e:	707b      	strb	r3, [r7, #1]
 8000a60:	2300      	movs	r3, #0
 8000a62:	70bb      	strb	r3, [r7, #2]
 8000a64:	2308      	movs	r3, #8
 8000a66:	70fb      	strb	r3, [r7, #3]
 8000a68:	2309      	movs	r3, #9
 8000a6a:	713b      	strb	r3, [r7, #4]
 8000a6c:	2342      	movs	r3, #66	@ 0x42
 8000a6e:	717b      	strb	r3, [r7, #5]
 8000a70:	236c      	movs	r3, #108	@ 0x6c
 8000a72:	71bb      	strb	r3, [r7, #6]
 8000a74:	2375      	movs	r3, #117	@ 0x75
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	2365      	movs	r3, #101	@ 0x65
 8000a7a:	723b      	strb	r3, [r7, #8]
 8000a7c:	234e      	movs	r3, #78	@ 0x4e
 8000a7e:	727b      	strb	r3, [r7, #9]
 8000a80:	2352      	movs	r3, #82	@ 0x52
 8000a82:	72bb      	strb	r3, [r7, #10]
 8000a84:	2347      	movs	r3, #71	@ 0x47
 8000a86:	72fb      	strb	r3, [r7, #11]
 8000a88:	230d      	movs	r3, #13
 8000a8a:	733b      	strb	r3, [r7, #12]
 8000a8c:	23ff      	movs	r3, #255	@ 0xff
 8000a8e:	737b      	strb	r3, [r7, #13]
 8000a90:	2301      	movs	r3, #1
 8000a92:	73bb      	strb	r3, [r7, #14]
 8000a94:	2380      	movs	r3, #128	@ 0x80
 8000a96:	73fb      	strb	r3, [r7, #15]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	743b      	strb	r3, [r7, #16]
 8000a9c:	23f4      	movs	r3, #244	@ 0xf4
 8000a9e:	747b      	strb	r3, [r7, #17]
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	74bb      	strb	r3, [r7, #18]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	74fb      	strb	r3, [r7, #19]
    0x80,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[5], /* BLE MAC start -MSB first- */
 8000aa8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b24 <Set_DeviceConnectable+0xe0>)
 8000aaa:	795b      	ldrb	r3, [r3, #5]
  uint8_t manuf_data[26] = {
 8000aac:	753b      	strb	r3, [r7, #20]
    bdaddr[4],
 8000aae:	4b1d      	ldr	r3, [pc, #116]	@ (8000b24 <Set_DeviceConnectable+0xe0>)
 8000ab0:	791b      	ldrb	r3, [r3, #4]
  uint8_t manuf_data[26] = {
 8000ab2:	757b      	strb	r3, [r7, #21]
    bdaddr[3],
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b24 <Set_DeviceConnectable+0xe0>)
 8000ab6:	78db      	ldrb	r3, [r3, #3]
  uint8_t manuf_data[26] = {
 8000ab8:	75bb      	strb	r3, [r7, #22]
    bdaddr[2],
 8000aba:	4b1a      	ldr	r3, [pc, #104]	@ (8000b24 <Set_DeviceConnectable+0xe0>)
 8000abc:	789b      	ldrb	r3, [r3, #2]
  uint8_t manuf_data[26] = {
 8000abe:	75fb      	strb	r3, [r7, #23]
    bdaddr[1],
 8000ac0:	4b18      	ldr	r3, [pc, #96]	@ (8000b24 <Set_DeviceConnectable+0xe0>)
 8000ac2:	785b      	ldrb	r3, [r3, #1]
  uint8_t manuf_data[26] = {
 8000ac4:	763b      	strb	r3, [r7, #24]
    bdaddr[0]  /* BLE MAC stop */
 8000ac6:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <Set_DeviceConnectable+0xe0>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
  uint8_t manuf_data[26] = {
 8000aca:	767b      	strb	r3, [r7, #25]
  };


  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8000acc:	7cbb      	ldrb	r3, [r7, #18]
 8000ace:	f043 0301 	orr.w	r3, r3, #1
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	74bb      	strb	r3, [r7, #18]


  hci_le_set_scan_resp_data(0, NULL);
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f008 fb43 	bl	8009164 <hci_le_set_scan_resp_data>

  PRINTF("Set General Discoverable Mode.\r\n");

  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8000ade:	2300      	movs	r3, #0
 8000ae0:	9306      	str	r3, [sp, #24]
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9305      	str	r3, [sp, #20]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	9304      	str	r3, [sp, #16]
 8000aea:	2300      	movs	r3, #0
 8000aec:	9303      	str	r3, [sp, #12]
 8000aee:	f107 031c 	add.w	r3, r7, #28
 8000af2:	9302      	str	r3, [sp, #8]
 8000af4:	2308      	movs	r3, #8
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	2300      	movs	r3, #0
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2301      	movs	r3, #1
 8000afe:	2201      	movs	r2, #1
 8000b00:	2101      	movs	r1, #1
 8000b02:	2000      	movs	r0, #0
 8000b04:	f007 fdf1 	bl	80086ea <aci_gap_set_discoverable>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), (const char *)local_name, 0, NULL, 0, 0);

  aci_gap_update_adv_data(26, manuf_data);
 8000b0e:	463b      	mov	r3, r7
 8000b10:	4619      	mov	r1, r3
 8000b12:	201a      	movs	r0, #26
 8000b14:	f007 ff2a 	bl	800896c <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	@ 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	0800d6e8 	.word	0x0800d6e8
 8000b24:	200000b0 	.word	0x200000b0

08000b28 <user_notify>:
 *         parsed.
 * @param  void* Pointer to the ACI packet
 * @retval None
 */
void user_notify(void * pData)
{
 8000b28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000b2c:	b091      	sub	sp, #68	@ 0x44
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  hci_uart_pckt *hci_pckt = pData;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	633b      	str	r3, [r7, #48]	@ 0x30
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
 8000b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b38:	3301      	adds	r3, #1
 8000b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if(hci_pckt->type != HCI_EVENT_PKT)
 8000b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b04      	cmp	r3, #4
 8000b42:	f040 80dc 	bne.w	8000cfe <user_notify+0x1d6>
    return;

  switch(event_pckt->evt){
 8000b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2bff      	cmp	r3, #255	@ 0xff
 8000b4c:	d021      	beq.n	8000b92 <user_notify+0x6a>
 8000b4e:	2bff      	cmp	r3, #255	@ 0xff
 8000b50:	f300 80da 	bgt.w	8000d08 <user_notify+0x1e0>
 8000b54:	2b05      	cmp	r3, #5
 8000b56:	d002      	beq.n	8000b5e <user_notify+0x36>
 8000b58:	2b3e      	cmp	r3, #62	@ 0x3e
 8000b5a:	d003      	beq.n	8000b64 <user_notify+0x3c>
 8000b5c:	e0d4      	b.n	8000d08 <user_notify+0x1e0>

  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8000b5e:	f000 f8d9 	bl	8000d14 <GAP_DisconnectionComplete_CB>
    }
    break;
 8000b62:	e0d1      	b.n	8000d08 <user_notify+0x1e0>

  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
 8000b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b66:	3302      	adds	r3, #2
 8000b68:	60fb      	str	r3, [r7, #12]

      switch(evt->subevent){
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	f040 80c7 	bne.w	8000d02 <user_notify+0x1da>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	1d5a      	adds	r2, r3, #5
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	4619      	mov	r1, r3
 8000b88:	4610      	mov	r0, r2
 8000b8a:	f000 f8d9 	bl	8000d40 <GAP_ConnectionComplete_CB>
        }
        break;
 8000b8e:	bf00      	nop
      }
    }
    break;
 8000b90:	e0b7      	b.n	8000d02 <user_notify+0x1da>

  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
 8000b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b94:	3302      	adds	r3, #2
 8000b96:	62bb      	str	r3, [r7, #40]	@ 0x28
      switch(blue_evt->ecode){
 8000b98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	f640 4214 	movw	r2, #3092	@ 0xc14
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	f000 809f 	beq.w	8000ce6 <user_notify+0x1be>
 8000ba8:	f640 4214 	movw	r2, #3092	@ 0xc14
 8000bac:	4293      	cmp	r3, r2
 8000bae:	f300 80aa 	bgt.w	8000d06 <user_notify+0x1de>
 8000bb2:	f640 4201 	movw	r2, #3073	@ 0xc01
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d005      	beq.n	8000bc6 <user_notify+0x9e>
 8000bba:	f640 4207 	movw	r2, #3079	@ 0xc07
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	f000 8089 	beq.w	8000cd6 <user_notify+0x1ae>
        break;

      }

    }
    break;
 8000bc4:	e09f      	b.n	8000d06 <user_notify+0x1de>
		  evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
 8000bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc8:	3302      	adds	r3, #2
 8000bca:	61bb      	str	r3, [r7, #24]
		  for(int i = 0; i < evt->data_length; ++i){
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000bd0:	e002      	b.n	8000bd8 <user_notify+0xb0>
 8000bd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	791b      	ldrb	r3, [r3, #4]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000be0:	4293      	cmp	r3, r2
 8000be2:	dbf6      	blt.n	8000bd2 <user_notify+0xaa>
		  switch(evt->attr_handle) {
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	885b      	ldrh	r3, [r3, #2]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	2b07      	cmp	r3, #7
 8000bec:	f040 8085 	bne.w	8000cfa <user_notify+0x1d2>
			  {
 8000bf0:	466b      	mov	r3, sp
 8000bf2:	461e      	mov	r6, r3
				  char new_device_name[evt->data_length + 1];  // +1 for null terminator
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	791b      	ldrb	r3, [r3, #4]
 8000bf8:	1c59      	adds	r1, r3, #1
 8000bfa:	1e4b      	subs	r3, r1, #1
 8000bfc:	617b      	str	r3, [r7, #20]
 8000bfe:	460a      	mov	r2, r1
 8000c00:	2300      	movs	r3, #0
 8000c02:	4690      	mov	r8, r2
 8000c04:	4699      	mov	r9, r3
 8000c06:	f04f 0200 	mov.w	r2, #0
 8000c0a:	f04f 0300 	mov.w	r3, #0
 8000c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000c1a:	460a      	mov	r2, r1
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	4614      	mov	r4, r2
 8000c20:	461d      	mov	r5, r3
 8000c22:	f04f 0200 	mov.w	r2, #0
 8000c26:	f04f 0300 	mov.w	r3, #0
 8000c2a:	00eb      	lsls	r3, r5, #3
 8000c2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000c30:	00e2      	lsls	r2, r4, #3
 8000c32:	460b      	mov	r3, r1
 8000c34:	3307      	adds	r3, #7
 8000c36:	08db      	lsrs	r3, r3, #3
 8000c38:	00db      	lsls	r3, r3, #3
 8000c3a:	ebad 0d03 	sub.w	sp, sp, r3
 8000c3e:	466b      	mov	r3, sp
 8000c40:	3300      	adds	r3, #0
 8000c42:	613b      	str	r3, [r7, #16]
				  for(int i = 0; i < evt->data_length; ++i) {
 8000c44:	2300      	movs	r3, #0
 8000c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c48:	e00c      	b.n	8000c64 <user_notify+0x13c>
					  new_device_name[i] = evt->att_data[i];  // Convert each byte to ASCII character
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c4e:	4413      	add	r3, r2
 8000c50:	3307      	adds	r3, #7
 8000c52:	7819      	ldrb	r1, [r3, #0]
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c58:	4413      	add	r3, r2
 8000c5a:	460a      	mov	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
				  for(int i = 0; i < evt->data_length; ++i) {
 8000c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c60:	3301      	adds	r3, #1
 8000c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000c64:	69bb      	ldr	r3, [r7, #24]
 8000c66:	791b      	ldrb	r3, [r3, #4]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	dbec      	blt.n	8000c4a <user_notify+0x122>
				  new_device_name[evt->data_length] = '\0';  // Null terminate the string
 8000c70:	69bb      	ldr	r3, [r7, #24]
 8000c72:	791b      	ldrb	r3, [r3, #4]
 8000c74:	461a      	mov	r2, r3
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	2100      	movs	r1, #0
 8000c7a:	5499      	strb	r1, [r3, r2]
				  if (strlen(new_device_name) <= 17) {
 8000c7c:	6938      	ldr	r0, [r7, #16]
 8000c7e:	f7ff faa7 	bl	80001d0 <strlen>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b11      	cmp	r3, #17
 8000c86:	d823      	bhi.n	8000cd0 <user_notify+0x1a8>
					  for (i = 0; i < 17 && new_device_name[i] != '\0'; i++) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c8c:	e00b      	b.n	8000ca6 <user_notify+0x17e>
						  device_name[i] = new_device_name[i];
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c92:	4413      	add	r3, r2
 8000c94:	7819      	ldrb	r1, [r3, #0]
 8000c96:	4a1e      	ldr	r2, [pc, #120]	@ (8000d10 <user_notify+0x1e8>)
 8000c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c9a:	4413      	add	r3, r2
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	701a      	strb	r2, [r3, #0]
					  for (i = 0; i < 17 && new_device_name[i] != '\0'; i++) {
 8000ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ca8:	2b10      	cmp	r3, #16
 8000caa:	dc0e      	bgt.n	8000cca <user_notify+0x1a2>
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cb0:	4413      	add	r3, r2
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d1ea      	bne.n	8000c8e <user_notify+0x166>
					  for (; i < 17; i++) {
 8000cb8:	e007      	b.n	8000cca <user_notify+0x1a2>
						  device_name[i] = ' ';
 8000cba:	4a15      	ldr	r2, [pc, #84]	@ (8000d10 <user_notify+0x1e8>)
 8000cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	701a      	strb	r2, [r3, #0]
					  for (; i < 17; i++) {
 8000cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8000cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ccc:	2b10      	cmp	r3, #16
 8000cce:	ddf4      	ble.n	8000cba <user_notify+0x192>
				  break;
 8000cd0:	bf00      	nop
 8000cd2:	46b5      	mov	sp, r6
		break;
 8000cd4:	e011      	b.n	8000cfa <user_notify+0x1d2>
    	  evt_att_read_resp *pr = (void*)blue_evt->data;
 8000cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cd8:	3302      	adds	r3, #2
 8000cda:	623b      	str	r3, [r7, #32]
		  uint16_t read_value = *(uint16_t*)pr->attribute_value;
 8000cdc:	6a3b      	ldr	r3, [r7, #32]
 8000cde:	3303      	adds	r3, #3
 8000ce0:	881b      	ldrh	r3, [r3, #0]
 8000ce2:	83fb      	strh	r3, [r7, #30]
        break;
 8000ce4:	e00a      	b.n	8000cfc <user_notify+0x1d4>
          evt_gatt_read_permit_req *pr = (void*)blue_evt->data;
 8000ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce8:	3302      	adds	r3, #2
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
          Read_Request_CB(pr->attr_handle);
 8000cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cee:	885b      	ldrh	r3, [r3, #2]
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fe7c 	bl	80009f0 <Read_Request_CB>
        break;
 8000cf8:	e000      	b.n	8000cfc <user_notify+0x1d4>
		break;
 8000cfa:	bf00      	nop
    break;
 8000cfc:	e003      	b.n	8000d06 <user_notify+0x1de>
    return;
 8000cfe:	bf00      	nop
 8000d00:	e002      	b.n	8000d08 <user_notify+0x1e0>
    break;
 8000d02:	bf00      	nop
 8000d04:	e000      	b.n	8000d08 <user_notify+0x1e0>
    break;
 8000d06:	bf00      	nop
  }
}
 8000d08:	3744      	adds	r7, #68	@ 0x44
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d10:	200000b8 	.word	0x200000b8

08000d14 <GAP_DisconnectionComplete_CB>:
 * @brief  This function is called when the peer device gets disconnected.
 * @param  None
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  connected = FALSE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <GAP_DisconnectionComplete_CB+0x20>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
  PRINTF("Disconnected\r\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8000d1e:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <GAP_DisconnectionComplete_CB+0x24>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <GAP_DisconnectionComplete_CB+0x28>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200000f4 	.word	0x200000f4
 8000d38:	20000001 	.word	0x20000001
 8000d3c:	200000f2 	.word	0x200000f2

08000d40 <GAP_ConnectionComplete_CB>:
 * @param  uint8_t Address of peer device
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	807b      	strh	r3, [r7, #2]
  connected = TRUE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d78 <GAP_ConnectionComplete_CB+0x38>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <GAP_ConnectionComplete_CB+0x3c>)
 8000d54:	887b      	ldrh	r3, [r7, #2]
 8000d56:	8013      	strh	r3, [r2, #0]

  PRINTF("Connected to device:");
  for(uint32_t i = 5; i > 0; i--){
 8000d58:	2305      	movs	r3, #5
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e002      	b.n	8000d64 <GAP_ConnectionComplete_CB+0x24>
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d1f9      	bne.n	8000d5e <GAP_ConnectionComplete_CB+0x1e>
    PRINTF("%02X-", addr[i]);
  }
  PRINTF("%02X\r\n", addr[0]);
}
 8000d6a:	bf00      	nop
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	200000f4 	.word	0x200000f4
 8000d7c:	200000f0 	.word	0x200000f0

08000d80 <update_advertising_status>:

void update_advertising_status(char status) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]

    uint8_t manuf_data[26] = {
 8000d8a:	2302      	movs	r3, #2
 8000d8c:	733b      	strb	r3, [r7, #12]
 8000d8e:	230a      	movs	r3, #10
 8000d90:	737b      	strb	r3, [r7, #13]
 8000d92:	2300      	movs	r3, #0
 8000d94:	73bb      	strb	r3, [r7, #14]
 8000d96:	2308      	movs	r3, #8
 8000d98:	73fb      	strb	r3, [r7, #15]
 8000d9a:	2309      	movs	r3, #9
 8000d9c:	743b      	strb	r3, [r7, #16]
 8000d9e:	2342      	movs	r3, #66	@ 0x42
 8000da0:	747b      	strb	r3, [r7, #17]
 8000da2:	236c      	movs	r3, #108	@ 0x6c
 8000da4:	74bb      	strb	r3, [r7, #18]
 8000da6:	2375      	movs	r3, #117	@ 0x75
 8000da8:	74fb      	strb	r3, [r7, #19]
 8000daa:	2365      	movs	r3, #101	@ 0x65
 8000dac:	753b      	strb	r3, [r7, #20]
 8000dae:	234e      	movs	r3, #78	@ 0x4e
 8000db0:	757b      	strb	r3, [r7, #21]
 8000db2:	2352      	movs	r3, #82	@ 0x52
 8000db4:	75bb      	strb	r3, [r7, #22]
 8000db6:	2347      	movs	r3, #71	@ 0x47
 8000db8:	75fb      	strb	r3, [r7, #23]
 8000dba:	230d      	movs	r3, #13
 8000dbc:	763b      	strb	r3, [r7, #24]
 8000dbe:	23ff      	movs	r3, #255	@ 0xff
 8000dc0:	767b      	strb	r3, [r7, #25]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	76bb      	strb	r3, [r7, #26]
 8000dc6:	2380      	movs	r3, #128	@ 0x80
 8000dc8:	76fb      	strb	r3, [r7, #27]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	773b      	strb	r3, [r7, #28]
 8000dce:	23f4      	movs	r3, #244	@ 0xf4
 8000dd0:	777b      	strb	r3, [r7, #29]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	77bb      	strb	r3, [r7, #30]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	77fb      	strb	r3, [r7, #31]
        0x80,
        0x00,
        0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
        0x00, /* Reserved */
        0x00, /* Reserved */
        bdaddr[5], /* BLE MAC start -MSB first- */
 8000dda:	4b32      	ldr	r3, [pc, #200]	@ (8000ea4 <update_advertising_status+0x124>)
 8000ddc:	795b      	ldrb	r3, [r3, #5]
    uint8_t manuf_data[26] = {
 8000dde:	f887 3020 	strb.w	r3, [r7, #32]
        bdaddr[4],
 8000de2:	4b30      	ldr	r3, [pc, #192]	@ (8000ea4 <update_advertising_status+0x124>)
 8000de4:	791b      	ldrb	r3, [r3, #4]
    uint8_t manuf_data[26] = {
 8000de6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        bdaddr[3],
 8000dea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ea4 <update_advertising_status+0x124>)
 8000dec:	78db      	ldrb	r3, [r3, #3]
    uint8_t manuf_data[26] = {
 8000dee:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        bdaddr[2],
 8000df2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <update_advertising_status+0x124>)
 8000df4:	789b      	ldrb	r3, [r3, #2]
    uint8_t manuf_data[26] = {
 8000df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        bdaddr[1],
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <update_advertising_status+0x124>)
 8000dfc:	785b      	ldrb	r3, [r3, #1]
    uint8_t manuf_data[26] = {
 8000dfe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        bdaddr[0] /* BLE MAC stop */
 8000e02:	4b28      	ldr	r3, [pc, #160]	@ (8000ea4 <update_advertising_status+0x124>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
    uint8_t manuf_data[26] = {
 8000e06:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    };
#ifndef ORIGINAL
    manuf_data[5] = device_name[0];
 8000e0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	747b      	strb	r3, [r7, #17]
    manuf_data[6] = device_name[1];
 8000e10:	4b25      	ldr	r3, [pc, #148]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e12:	785b      	ldrb	r3, [r3, #1]
 8000e14:	74bb      	strb	r3, [r7, #18]
    manuf_data[7] = device_name[2];
 8000e16:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e18:	789b      	ldrb	r3, [r3, #2]
 8000e1a:	74fb      	strb	r3, [r7, #19]
    manuf_data[8] = device_name[3];
 8000e1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e1e:	78db      	ldrb	r3, [r3, #3]
 8000e20:	753b      	strb	r3, [r7, #20]
    manuf_data[9] = device_name[4];
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e24:	791b      	ldrb	r3, [r3, #4]
 8000e26:	757b      	strb	r3, [r7, #21]
    manuf_data[10] = device_name[5];
 8000e28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e2a:	795b      	ldrb	r3, [r3, #5]
 8000e2c:	75bb      	strb	r3, [r7, #22]
    manuf_data[11] = device_name[6];
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e30:	799b      	ldrb	r3, [r3, #6]
 8000e32:	75fb      	strb	r3, [r7, #23]
    manuf_data[15] = device_name[7];
 8000e34:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e36:	79db      	ldrb	r3, [r3, #7]
 8000e38:	76fb      	strb	r3, [r7, #27]
    manuf_data[16] = device_name[8];
 8000e3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e3c:	7a1b      	ldrb	r3, [r3, #8]
 8000e3e:	773b      	strb	r3, [r7, #28]
    manuf_data[17] = device_name[9];
 8000e40:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e42:	7a5b      	ldrb	r3, [r3, #9]
 8000e44:	777b      	strb	r3, [r7, #29]
    manuf_data[18] = device_name[10];
 8000e46:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e48:	7a9b      	ldrb	r3, [r3, #10]
 8000e4a:	77bb      	strb	r3, [r7, #30]
    manuf_data[19] = device_name[11];
 8000e4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e4e:	7adb      	ldrb	r3, [r3, #11]
 8000e50:	77fb      	strb	r3, [r7, #31]
    manuf_data[20] = device_name[12];
 8000e52:	4b15      	ldr	r3, [pc, #84]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e54:	7b1b      	ldrb	r3, [r3, #12]
 8000e56:	f887 3020 	strb.w	r3, [r7, #32]
    manuf_data[21] = device_name[13];
 8000e5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e5c:	7b5b      	ldrb	r3, [r3, #13]
 8000e5e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    manuf_data[22] = device_name[14];
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e64:	7b9b      	ldrb	r3, [r3, #14]
 8000e66:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    manuf_data[23] = device_name[15];
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e6c:	7bdb      	ldrb	r3, [r3, #15]
 8000e6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    manuf_data[24] = device_name[16];
 8000e72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ea8 <update_advertising_status+0x128>)
 8000e74:	7c1b      	ldrb	r3, [r3, #16]
 8000e76:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    manuf_data[25] = status;
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
#endif

    hci_le_set_advertising_data(sizeof(manuf_data),  manuf_data);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	201a      	movs	r0, #26
 8000e88:	f008 f92b 	bl	80090e2 <hci_le_set_advertising_data>
	if (status == 'b') osDelay(1000);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	2b62      	cmp	r3, #98	@ 0x62
 8000e90:	d103      	bne.n	8000e9a <update_advertising_status+0x11a>
 8000e92:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e96:	f008 fe7b 	bl	8009b90 <osDelay>
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000b0 	.word	0x200000b0
 8000ea8:	200000b8 	.word	0x200000b8

08000eac <check_and_advertise>:

void check_and_advertise() {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
    // Check if the difference exceeds 10 for any axis
	cur_acc.x = acc_axes.x;
 8000eb0:	4b31      	ldr	r3, [pc, #196]	@ (8000f78 <check_and_advertise+0xcc>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	4b31      	ldr	r3, [pc, #196]	@ (8000f7c <check_and_advertise+0xd0>)
 8000eb8:	801a      	strh	r2, [r3, #0]
	cur_acc.y = acc_axes.y;
 8000eba:	4b2f      	ldr	r3, [pc, #188]	@ (8000f78 <check_and_advertise+0xcc>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	b21a      	sxth	r2, r3
 8000ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f7c <check_and_advertise+0xd0>)
 8000ec2:	805a      	strh	r2, [r3, #2]
	cur_acc.z = acc_axes.z;
 8000ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f78 <check_and_advertise+0xcc>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	b21a      	sxth	r2, r3
 8000eca:	4b2c      	ldr	r3, [pc, #176]	@ (8000f7c <check_and_advertise+0xd0>)
 8000ecc:	809a      	strh	r2, [r3, #4]
	PRINTF("Acceleration change detected:\r\n");
	    PRINTF("Previous acceleration: x = %d, y = %d, z = %d\r\n",
	           (int)prev_acc.x, (int)prev_acc.y, (int)prev_acc.z);
	    PRINTF("Current acceleration: x = %d, y = %d, z = %d\r\n",
	           (int)cur_acc.x, (int)cur_acc.y, (int)cur_acc.z);
	if (update_count > 10) {
 8000ece:	4b2c      	ldr	r3, [pc, #176]	@ (8000f80 <check_and_advertise+0xd4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b0a      	cmp	r3, #10
 8000ed4:	dd34      	ble.n	8000f40 <check_and_advertise+0x94>
		if (abs(cur_acc.x - prev_acc.x) > acc_sensitivity ||
 8000ed6:	4b29      	ldr	r3, [pc, #164]	@ (8000f7c <check_and_advertise+0xd0>)
 8000ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <check_and_advertise+0xd8>)
 8000ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	bfb8      	it	lt
 8000eea:	425b      	neglt	r3, r3
 8000eec:	4a26      	ldr	r2, [pc, #152]	@ (8000f88 <check_and_advertise+0xdc>)
 8000eee:	7812      	ldrb	r2, [r2, #0]
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	dc1d      	bgt.n	8000f30 <check_and_advertise+0x84>
			abs(cur_acc.y - prev_acc.y) > acc_sensitivity ||
 8000ef4:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <check_and_advertise+0xd0>)
 8000ef6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000efa:	461a      	mov	r2, r3
 8000efc:	4b21      	ldr	r3, [pc, #132]	@ (8000f84 <check_and_advertise+0xd8>)
 8000efe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	bfb8      	it	lt
 8000f08:	425b      	neglt	r3, r3
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000f88 <check_and_advertise+0xdc>)
 8000f0c:	7812      	ldrb	r2, [r2, #0]
		if (abs(cur_acc.x - prev_acc.x) > acc_sensitivity ||
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	dc0e      	bgt.n	8000f30 <check_and_advertise+0x84>
			abs(cur_acc.z - prev_acc.z) > acc_sensitivity) {
 8000f12:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <check_and_advertise+0xd0>)
 8000f14:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000f84 <check_and_advertise+0xd8>)
 8000f1c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bfb8      	it	lt
 8000f26:	425b      	neglt	r3, r3
 8000f28:	4a17      	ldr	r2, [pc, #92]	@ (8000f88 <check_and_advertise+0xdc>)
 8000f2a:	7812      	ldrb	r2, [r2, #0]
			abs(cur_acc.y - prev_acc.y) > acc_sensitivity ||
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	dd03      	ble.n	8000f38 <check_and_advertise+0x8c>

			omg_its_rocking = 'b';
 8000f30:	4b16      	ldr	r3, [pc, #88]	@ (8000f8c <check_and_advertise+0xe0>)
 8000f32:	2262      	movs	r2, #98	@ 0x62
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	e008      	b.n	8000f4a <check_and_advertise+0x9e>
			PRINTF("ROCKING DETECTED!!!\r\n");
		} else {
			omg_its_rocking = 'a';
 8000f38:	4b14      	ldr	r3, [pc, #80]	@ (8000f8c <check_and_advertise+0xe0>)
 8000f3a:	2261      	movs	r2, #97	@ 0x61
 8000f3c:	701a      	strb	r2, [r3, #0]
 8000f3e:	e004      	b.n	8000f4a <check_and_advertise+0x9e>
		}
	}
	else {

		update_count++;
 8000f40:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <check_and_advertise+0xd4>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <check_and_advertise+0xd4>)
 8000f48:	6013      	str	r3, [r2, #0]
	}

    // Update previous values
    prev_acc.x = cur_acc.x;
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <check_and_advertise+0xd0>)
 8000f4c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000f50:	4b0c      	ldr	r3, [pc, #48]	@ (8000f84 <check_and_advertise+0xd8>)
 8000f52:	801a      	strh	r2, [r3, #0]
    prev_acc.y = cur_acc.y;
 8000f54:	4b09      	ldr	r3, [pc, #36]	@ (8000f7c <check_and_advertise+0xd0>)
 8000f56:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <check_and_advertise+0xd8>)
 8000f5c:	805a      	strh	r2, [r3, #2]
    prev_acc.z = cur_acc.z;
 8000f5e:	4b07      	ldr	r3, [pc, #28]	@ (8000f7c <check_and_advertise+0xd0>)
 8000f60:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <check_and_advertise+0xd8>)
 8000f66:	809a      	strh	r2, [r3, #4]

    // Update advertising data with the current status
    update_advertising_status(omg_its_rocking);
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <check_and_advertise+0xe0>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff ff07 	bl	8000d80 <update_advertising_status>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000d24 	.word	0x20000d24
 8000f7c:	2000011c 	.word	0x2000011c
 8000f80:	2000012c 	.word	0x2000012c
 8000f84:	20000124 	.word	0x20000124
 8000f88:	200000ca 	.word	0x200000ca
 8000f8c:	2000012a 	.word	0x2000012a

08000f90 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <HCI_TL_SPI_Init+0x88>)
 8000f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <HCI_TL_SPI_Init+0x88>)
 8000f9e:	f043 0301 	orr.w	r3, r3, #1
 8000fa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <HCI_TL_SPI_Init+0x88>)
 8000fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8000fb0:	2340      	movs	r3, #64	@ 0x40
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fb4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4815      	ldr	r0, [pc, #84]	@ (800101c <HCI_TL_SPI_Init+0x8c>)
 8000fc6:	f002 ffa3 	bl	8003f10 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8000fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8000fdc:	f107 030c 	add.w	r3, r7, #12
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe6:	f002 ff93 	bl	8003f10 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000fea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	4619      	mov	r1, r3
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <HCI_TL_SPI_Init+0x90>)
 8001004:	f002 ff84 	bl	8003f10 <HAL_GPIO_Init>

  return BSP_SPI3_Init();
 8001008:	f001 fa48 	bl	800249c <BSP_SPI3_Init>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3720      	adds	r7, #32
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	40021000 	.word	0x40021000
 800101c:	48001000 	.word	0x48001000
 8001020:	48000c00 	.word	0x48000c00

08001024 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8001028:	2140      	movs	r1, #64	@ 0x40
 800102a:	4808      	ldr	r0, [pc, #32]	@ (800104c <HCI_TL_SPI_DeInit+0x28>)
 800102c:	f003 f91a 	bl	8004264 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8001030:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001034:	4806      	ldr	r0, [pc, #24]	@ (8001050 <HCI_TL_SPI_DeInit+0x2c>)
 8001036:	f003 f915 	bl	8004264 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 800103a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800103e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001042:	f003 f90f 	bl	8004264 <HAL_GPIO_DeInit>
  return 0;
 8001046:	2300      	movs	r3, #0
}
 8001048:	4618      	mov	r0, r3
 800104a:	bd80      	pop	{r7, pc}
 800104c:	48001000 	.word	0x48001000
 8001050:	48000c00 	.word	0x48000c00

08001054 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001058:	2201      	movs	r2, #1
 800105a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800105e:	480d      	ldr	r0, [pc, #52]	@ (8001094 <HCI_TL_SPI_Reset+0x40>)
 8001060:	f003 fa0c 	bl	800447c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800106a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106e:	f003 fa05 	bl	800447c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001072:	2005      	movs	r0, #5
 8001074:	f002 fcac 	bl	80039d0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800107e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001082:	f003 f9fb 	bl	800447c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8001086:	2005      	movs	r0, #5
 8001088:	f002 fca2 	bl	80039d0 <HAL_Delay>
  return 0;
 800108c:	2300      	movs	r3, #0
}
 800108e:	4618      	mov	r0, r3
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	48000c00 	.word	0x48000c00

08001098 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	460b      	mov	r3, r1
 80010a2:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	777b      	strb	r3, [r7, #29]
  uint8_t char_ff = 0xff;
 80010a8:	23ff      	movs	r3, #255	@ 0xff
 80010aa:	773b      	strb	r3, [r7, #28]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80010ac:	4a26      	ldr	r2, [pc, #152]	@ (8001148 <HCI_TL_SPI_Receive+0xb0>)
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b6:	6018      	str	r0, [r3, #0]
 80010b8:	3304      	adds	r3, #4
 80010ba:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80010bc:	2200      	movs	r2, #0
 80010be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010c2:	4822      	ldr	r0, [pc, #136]	@ (800114c <HCI_TL_SPI_Receive+0xb4>)
 80010c4:	f003 f9da 	bl	800447c <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80010c8:	f107 010c 	add.w	r1, r7, #12
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	2205      	movs	r2, #5
 80010d2:	4618      	mov	r0, r3
 80010d4:	f001 fa12 	bl	80024fc <BSP_SPI3_SendRecv>

  if(header_slave[0] == 0x02)
 80010d8:	7b3b      	ldrb	r3, [r7, #12]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d129      	bne.n	8001132 <HCI_TL_SPI_Receive+0x9a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80010de:	7c3b      	ldrb	r3, [r7, #16]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21b      	sxth	r3, r3
 80010ec:	83fb      	strh	r3, [r7, #30]

    if(byte_count > 0)
 80010ee:	8bfb      	ldrh	r3, [r7, #30]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01e      	beq.n	8001132 <HCI_TL_SPI_Receive+0x9a>
    {
      /* avoid to read more data than the size of the buffer */
      if (byte_count > size){
 80010f4:	8bfa      	ldrh	r2, [r7, #30]
 80010f6:	887b      	ldrh	r3, [r7, #2]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d901      	bls.n	8001100 <HCI_TL_SPI_Receive+0x68>
        byte_count = size;
 80010fc:	887b      	ldrh	r3, [r7, #2]
 80010fe:	83fb      	strh	r3, [r7, #30]
      }

      for(len = 0; len < byte_count; len++)
 8001100:	2300      	movs	r3, #0
 8001102:	777b      	strb	r3, [r7, #29]
 8001104:	e010      	b.n	8001128 <HCI_TL_SPI_Receive+0x90>
      {
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);
 8001106:	f107 011b 	add.w	r1, r7, #27
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2201      	movs	r2, #1
 8001110:	4618      	mov	r0, r3
 8001112:	f001 f9f3 	bl	80024fc <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8001116:	7f7b      	ldrb	r3, [r7, #29]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	4413      	add	r3, r2
 800111c:	7efa      	ldrb	r2, [r7, #27]
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]
      for(len = 0; len < byte_count; len++)
 8001122:	7f7b      	ldrb	r3, [r7, #29]
 8001124:	3301      	adds	r3, #1
 8001126:	777b      	strb	r3, [r7, #29]
 8001128:	7f7b      	ldrb	r3, [r7, #29]
 800112a:	b29b      	uxth	r3, r3
 800112c:	8bfa      	ldrh	r2, [r7, #30]
 800112e:	429a      	cmp	r2, r3
 8001130:	d8e9      	bhi.n	8001106 <HCI_TL_SPI_Receive+0x6e>
      }
    }
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <HCI_TL_SPI_Receive+0xb4>)
 800113a:	f003 f99f 	bl	800447c <HAL_GPIO_WritePin>
    }
    PRINT_CSV("\n");
  }
#endif

  return len;
 800113e:	7f7b      	ldrb	r3, [r7, #29]
}
 8001140:	4618      	mov	r0, r3
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	0800d6f0 	.word	0x0800d6f0
 800114c:	48000c00 	.word	0x48000c00

08001150 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
  int32_t result;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800115c:	4a24      	ldr	r2, [pc, #144]	@ (80011f0 <HCI_TL_SPI_Send+0xa0>)
 800115e:	f107 0310 	add.w	r3, r7, #16
 8001162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001166:	6018      	str	r0, [r3, #0]
 8001168:	3304      	adds	r3, #4
 800116a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800116c:	f002 fc24 	bl	80039b8 <HAL_GetTick>
 8001170:	61b8      	str	r0, [r7, #24]

  do
  {
    result = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800117c:	481d      	ldr	r0, [pc, #116]	@ (80011f4 <HCI_TL_SPI_Send+0xa4>)
 800117e:	f003 f97d 	bl	800447c <HAL_GPIO_WritePin>

    /* Read header */
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 8001182:	f107 0108 	add.w	r1, r7, #8
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	2205      	movs	r2, #5
 800118c:	4618      	mov	r0, r3
 800118e:	f001 f9b5 	bl	80024fc <BSP_SPI3_SendRecv>

    if(header_slave[0] == 0x02)
 8001192:	7a3b      	ldrb	r3, [r7, #8]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d10f      	bne.n	80011b8 <HCI_TL_SPI_Send+0x68>
    {
      /* SPI is ready */
      if(header_slave[1] >= size)
 8001198:	7a7b      	ldrb	r3, [r7, #9]
 800119a:	461a      	mov	r2, r3
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	4293      	cmp	r3, r2
 80011a0:	d806      	bhi.n	80011b0 <HCI_TL_SPI_Send+0x60>
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 80011a2:	887b      	ldrh	r3, [r7, #2]
 80011a4:	461a      	mov	r2, r3
 80011a6:	4914      	ldr	r1, [pc, #80]	@ (80011f8 <HCI_TL_SPI_Send+0xa8>)
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f001 f9a7 	bl	80024fc <BSP_SPI3_SendRecv>
 80011ae:	e006      	b.n	80011be <HCI_TL_SPI_Send+0x6e>
      }
      else
      {
        /* Buffer is too small */
        result = -2;
 80011b0:	f06f 0301 	mvn.w	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e002      	b.n	80011be <HCI_TL_SPI_Send+0x6e>
      }
    } else {
      /* SPI is not ready */
      result = -1;
 80011b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011bc:	61fb      	str	r3, [r7, #28]
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80011be:	2201      	movs	r2, #1
 80011c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011c4:	480b      	ldr	r0, [pc, #44]	@ (80011f4 <HCI_TL_SPI_Send+0xa4>)
 80011c6:	f003 f959 	bl	800447c <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80011ca:	f002 fbf5 	bl	80039b8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d903      	bls.n	80011e0 <HCI_TL_SPI_Send+0x90>
    {
      result = -3;
 80011d8:	f06f 0302 	mvn.w	r3, #2
 80011dc:	61fb      	str	r3, [r7, #28]
      break;
 80011de:	e002      	b.n	80011e6 <HCI_TL_SPI_Send+0x96>
    }
  } while(result < 0);
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	dbc5      	blt.n	8001172 <HCI_TL_SPI_Send+0x22>

  return result;
 80011e6:	69fb      	ldr	r3, [r7, #28]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	0800d6f8 	.word	0x0800d6f8
 80011f4:	48000c00 	.word	0x48000c00
 80011f8:	20000138 	.word	0x20000138

080011fc <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 8001200:	2140      	movs	r1, #64	@ 0x40
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <IsDataAvailable+0x1c>)
 8001204:	f003 f922 	bl	800444c <HAL_GPIO_ReadPin>
 8001208:	4603      	mov	r3, r0
 800120a:	2b01      	cmp	r3, #1
 800120c:	bf0c      	ite	eq
 800120e:	2301      	moveq	r3, #1
 8001210:	2300      	movne	r3, #0
 8001212:	b2db      	uxtb	r3, r3
}
 8001214:	4618      	mov	r0, r3
 8001216:	bd80      	pop	{r7, pc}
 8001218:	48001000 	.word	0x48001000

0800121c <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <hci_tl_lowlevel_init+0x50>)
 8001224:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8001226:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <hci_tl_lowlevel_init+0x54>)
 8001228:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 800122a:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <hci_tl_lowlevel_init+0x58>)
 800122c:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <hci_tl_lowlevel_init+0x5c>)
 8001230:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <hci_tl_lowlevel_init+0x60>)
 8001234:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <hci_tl_lowlevel_init+0x64>)
 8001238:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	4618      	mov	r0, r3
 800123e:	f008 f8af 	bl	80093a0 <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8001242:	4910      	ldr	r1, [pc, #64]	@ (8001284 <hci_tl_lowlevel_init+0x68>)
 8001244:	4810      	ldr	r0, [pc, #64]	@ (8001288 <hci_tl_lowlevel_init+0x6c>)
 8001246:	f002 fe1f 	bl	8003e88 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 800124a:	4a10      	ldr	r2, [pc, #64]	@ (800128c <hci_tl_lowlevel_init+0x70>)
 800124c:	2100      	movs	r1, #0
 800124e:	480e      	ldr	r0, [pc, #56]	@ (8001288 <hci_tl_lowlevel_init+0x6c>)
 8001250:	f002 fe00 	bl	8003e54 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2017      	movs	r0, #23
 800125a:	f002 fcb8 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800125e:	2017      	movs	r0, #23
 8001260:	f002 fcd1 	bl	8003c06 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8001264:	bf00      	nop
 8001266:	3720      	adds	r7, #32
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08000f91 	.word	0x08000f91
 8001270:	08001025 	.word	0x08001025
 8001274:	08001151 	.word	0x08001151
 8001278:	08001099 	.word	0x08001099
 800127c:	08001055 	.word	0x08001055
 8001280:	080026d1 	.word	0x080026d1
 8001284:	16000006 	.word	0x16000006
 8001288:	20000130 	.word	0x20000130
 800128c:	08001291 	.word	0x08001291

08001290 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8001294:	e005      	b.n	80012a2 <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8001296:	2000      	movs	r0, #0
 8001298:	f008 f9e6 	bl	8009668 <hci_notify_asynch_evt>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d105      	bne.n	80012ae <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 80012a2:	f7ff ffab 	bl	80011fc <IsDataAvailable>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f4      	bne.n	8001296 <hci_tl_lowlevel_isr+0x6>
 80012ac:	e000      	b.n	80012b0 <hci_tl_lowlevel_isr+0x20>
    {
      return;
 80012ae:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b8:	f002 fb16 	bl	80038e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012bc:	f000 f840 	bl	8001340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c0:	f000 f95c 	bl	800157c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80012c4:	f000 f89e 	bl	8001404 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 80012c8:	f000 f8d4 	bl	8001474 <MX_QUADSPI_Init>
  MX_USART3_UART_Init();
 80012cc:	f000 f8f8 	bl	80014c0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80012d0:	f000 f926 	bl	8001520 <MX_USB_OTG_FS_PCD_Init>
  MX_BlueNRG_MS_Init();
 80012d4:	f7ff f94c 	bl	8000570 <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  dataRdyIntReceived = 0;
 80012d8:	4b10      	ldr	r3, [pc, #64]	@ (800131c <main+0x68>)
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 80012de:	f000 faef 	bl	80018c0 <MEMS_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012e2:	f008 fb59 	bl	8009998 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of myMutex01 */
  myMutex01Handle = osMutexNew(&myMutex01_attributes);
 80012e6:	480e      	ldr	r0, [pc, #56]	@ (8001320 <main+0x6c>)
 80012e8:	f008 fc6d 	bl	8009bc6 <osMutexNew>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a0d      	ldr	r2, [pc, #52]	@ (8001324 <main+0x70>)
 80012f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of TASK_BLE */
  TASK_BLEHandle = osThreadNew(StartTASK_BLE, NULL, &TASK_BLE_attributes);
 80012f2:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <main+0x74>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	480d      	ldr	r0, [pc, #52]	@ (800132c <main+0x78>)
 80012f8:	f008 fb98 	bl	8009a2c <osThreadNew>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <main+0x7c>)
 8001300:	6013      	str	r3, [r2, #0]

  /* creation of TASK_ACC */
  TASK_ACCHandle = osThreadNew(StartTASK_ACC, NULL, &TASK_ACC_attributes);
 8001302:	4a0c      	ldr	r2, [pc, #48]	@ (8001334 <main+0x80>)
 8001304:	2100      	movs	r1, #0
 8001306:	480c      	ldr	r0, [pc, #48]	@ (8001338 <main+0x84>)
 8001308:	f008 fb90 	bl	8009a2c <osThreadNew>
 800130c:	4603      	mov	r3, r0
 800130e:	4a0b      	ldr	r2, [pc, #44]	@ (800133c <main+0x88>)
 8001310:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001312:	f008 fb65 	bl	80099e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001316:	bf00      	nop
 8001318:	e7fd      	b.n	8001316 <main+0x62>
 800131a:	bf00      	nop
 800131c:	20000d1c 	.word	0x20000d1c
 8001320:	0800d784 	.word	0x0800d784
 8001324:	20000ce0 	.word	0x20000ce0
 8001328:	0800d73c 	.word	0x0800d73c
 800132c:	08001981 	.word	0x08001981
 8001330:	20000820 	.word	0x20000820
 8001334:	0800d760 	.word	0x0800d760
 8001338:	08001999 	.word	0x08001999
 800133c:	20000a80 	.word	0x20000a80

08001340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b096      	sub	sp, #88	@ 0x58
 8001344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	2244      	movs	r2, #68	@ 0x44
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f00b fac2 	bl	800c8d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
 8001360:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001362:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001366:	f004 f8a3 	bl	80054b0 <HAL_PWREx_ControlVoltageScaling>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001370:	f000 fb5c 	bl	8001a2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001374:	f004 f87e 	bl	8005474 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001378:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <SystemClock_Config+0xc0>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800137e:	4a20      	ldr	r2, [pc, #128]	@ (8001400 <SystemClock_Config+0xc0>)
 8001380:	f023 0318 	bic.w	r3, r3, #24
 8001384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001388:	2314      	movs	r3, #20
 800138a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001390:	2301      	movs	r3, #1
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001398:	2360      	movs	r3, #96	@ 0x60
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139c:	2302      	movs	r3, #2
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013a0:	2301      	movs	r3, #1
 80013a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013a8:	2328      	movs	r3, #40	@ 0x28
 80013aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013ac:	2307      	movs	r3, #7
 80013ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b0:	2302      	movs	r3, #2
 80013b2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b4:	2302      	movs	r3, #2
 80013b6:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 f999 	bl	80056f4 <HAL_RCC_OscConfig>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013c8:	f000 fb30 	bl	8001a2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	230f      	movs	r3, #15
 80013ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d0:	2303      	movs	r3, #3
 80013d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013e0:	463b      	mov	r3, r7
 80013e2:	2104      	movs	r1, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f004 fd61 	bl	8005eac <HAL_RCC_ClockConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013f0:	f000 fb1c 	bl	8001a2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80013f4:	f005 fa68 	bl	80068c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80013f8:	bf00      	nop
 80013fa:	3758      	adds	r7, #88	@ 0x58
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000

08001404 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001408:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_DFSDM1_Init+0x68>)
 800140a:	4a19      	ldr	r2, [pc, #100]	@ (8001470 <MX_DFSDM1_Init+0x6c>)
 800140c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800140e:	4b17      	ldr	r3, [pc, #92]	@ (800146c <MX_DFSDM1_Init+0x68>)
 8001410:	2201      	movs	r2, #1
 8001412:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001414:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_DFSDM1_Init+0x68>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800141a:	4b14      	ldr	r3, [pc, #80]	@ (800146c <MX_DFSDM1_Init+0x68>)
 800141c:	2202      	movs	r2, #2
 800141e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001420:	4b12      	ldr	r3, [pc, #72]	@ (800146c <MX_DFSDM1_Init+0x68>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_DFSDM1_Init+0x68>)
 8001428:	2200      	movs	r2, #0
 800142a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800142c:	4b0f      	ldr	r3, [pc, #60]	@ (800146c <MX_DFSDM1_Init+0x68>)
 800142e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001432:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001434:	4b0d      	ldr	r3, [pc, #52]	@ (800146c <MX_DFSDM1_Init+0x68>)
 8001436:	2200      	movs	r2, #0
 8001438:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800143a:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <MX_DFSDM1_Init+0x68>)
 800143c:	2204      	movs	r2, #4
 800143e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <MX_DFSDM1_Init+0x68>)
 8001442:	2200      	movs	r2, #0
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001446:	4b09      	ldr	r3, [pc, #36]	@ (800146c <MX_DFSDM1_Init+0x68>)
 8001448:	2201      	movs	r2, #1
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <MX_DFSDM1_Init+0x68>)
 800144e:	2200      	movs	r2, #0
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <MX_DFSDM1_Init+0x68>)
 8001454:	2200      	movs	r2, #0
 8001456:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001458:	4804      	ldr	r0, [pc, #16]	@ (800146c <MX_DFSDM1_Init+0x68>)
 800145a:	f002 fbef 	bl	8003c3c <HAL_DFSDM_ChannelInit>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001464:	f000 fae2 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000238 	.word	0x20000238
 8001470:	40016020 	.word	0x40016020

08001474 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001478:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <MX_QUADSPI_Init+0x44>)
 800147a:	4a10      	ldr	r2, [pc, #64]	@ (80014bc <MX_QUADSPI_Init+0x48>)
 800147c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800147e:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <MX_QUADSPI_Init+0x44>)
 8001480:	2202      	movs	r2, #2
 8001482:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001484:	4b0c      	ldr	r3, [pc, #48]	@ (80014b8 <MX_QUADSPI_Init+0x44>)
 8001486:	2204      	movs	r2, #4
 8001488:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	@ (80014b8 <MX_QUADSPI_Init+0x44>)
 800148c:	2210      	movs	r2, #16
 800148e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001490:	4b09      	ldr	r3, [pc, #36]	@ (80014b8 <MX_QUADSPI_Init+0x44>)
 8001492:	2217      	movs	r2, #23
 8001494:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <MX_QUADSPI_Init+0x44>)
 8001498:	2200      	movs	r2, #0
 800149a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800149c:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <MX_QUADSPI_Init+0x44>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	@ (80014b8 <MX_QUADSPI_Init+0x44>)
 80014a4:	f004 f86a 	bl	800557c <HAL_QSPI_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80014ae:	f000 fabd 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000270 	.word	0x20000270
 80014bc:	a0001000 	.word	0xa0001000

080014c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c4:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014c6:	4a15      	ldr	r2, [pc, #84]	@ (800151c <MX_USART3_UART_Init+0x5c>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014e6:	220c      	movs	r2, #12
 80014e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f0:	4b09      	ldr	r3, [pc, #36]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f6:	4b08      	ldr	r3, [pc, #32]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001502:	4805      	ldr	r0, [pc, #20]	@ (8001518 <MX_USART3_UART_Init+0x58>)
 8001504:	f006 f800 	bl	8007508 <HAL_UART_Init>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800150e:	f000 fa8d 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200002b4 	.word	0x200002b4
 800151c:	40004800 	.word	0x40004800

08001520 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001526:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800152a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800152c:	4b12      	ldr	r3, [pc, #72]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800152e:	2206      	movs	r2, #6
 8001530:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001534:	2202      	movs	r2, #2
 8001536:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800153a:	2202      	movs	r2, #2
 800153c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001544:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001550:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800155c:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	739a      	strb	r2, [r3, #14]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001564:	f003 fe53 	bl	800520e <HAL_PCD_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800156e:	f000 fa5d 	bl	8001a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000033c 	.word	0x2000033c

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001592:	4bbd      	ldr	r3, [pc, #756]	@ (8001888 <MX_GPIO_Init+0x30c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001596:	4abc      	ldr	r2, [pc, #752]	@ (8001888 <MX_GPIO_Init+0x30c>)
 8001598:	f043 0310 	orr.w	r3, r3, #16
 800159c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800159e:	4bba      	ldr	r3, [pc, #744]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015a2:	f003 0310 	and.w	r3, r3, #16
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015aa:	4bb7      	ldr	r3, [pc, #732]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ae:	4ab6      	ldr	r2, [pc, #728]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015b0:	f043 0304 	orr.w	r3, r3, #4
 80015b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015b6:	4bb4      	ldr	r3, [pc, #720]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4bb1      	ldr	r3, [pc, #708]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	4ab0      	ldr	r2, [pc, #704]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015ce:	4bae      	ldr	r3, [pc, #696]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4bab      	ldr	r3, [pc, #684]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015de:	4aaa      	ldr	r2, [pc, #680]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e6:	4ba8      	ldr	r3, [pc, #672]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4ba5      	ldr	r3, [pc, #660]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015f6:	4aa4      	ldr	r2, [pc, #656]	@ (8001888 <MX_GPIO_Init+0x30c>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015fe:	4ba2      	ldr	r3, [pc, #648]	@ (8001888 <MX_GPIO_Init+0x30c>)
 8001600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800160a:	2200      	movs	r2, #0
 800160c:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8001610:	489e      	ldr	r0, [pc, #632]	@ (800188c <MX_GPIO_Init+0x310>)
 8001612:	f002 ff33 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f248 1104 	movw	r1, #33028	@ 0x8104
 800161c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001620:	f002 ff2c 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8001624:	2200      	movs	r2, #0
 8001626:	f24b 0114 	movw	r1, #45076	@ 0xb014
 800162a:	4899      	ldr	r0, [pc, #612]	@ (8001890 <MX_GPIO_Init+0x314>)
 800162c:	f002 ff26 	bl	800447c <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001630:	2200      	movs	r2, #0
 8001632:	f241 0181 	movw	r1, #4225	@ 0x1081
 8001636:	4897      	ldr	r0, [pc, #604]	@ (8001894 <MX_GPIO_Init+0x318>)
 8001638:	f002 ff20 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001642:	4894      	ldr	r0, [pc, #592]	@ (8001894 <MX_GPIO_Init+0x318>)
 8001644:	f002 ff1a 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001648:	2200      	movs	r2, #0
 800164a:	f44f 7110 	mov.w	r1, #576	@ 0x240
 800164e:	4892      	ldr	r0, [pc, #584]	@ (8001898 <MX_GPIO_Init+0x31c>)
 8001650:	f002 ff14 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001654:	2201      	movs	r2, #1
 8001656:	2120      	movs	r1, #32
 8001658:	488d      	ldr	r0, [pc, #564]	@ (8001890 <MX_GPIO_Init+0x314>)
 800165a:	f002 ff0f 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800165e:	2201      	movs	r2, #1
 8001660:	2101      	movs	r1, #1
 8001662:	488a      	ldr	r0, [pc, #552]	@ (800188c <MX_GPIO_Init+0x310>)
 8001664:	f002 ff0a 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001668:	f240 1315 	movw	r3, #277	@ 0x115
 800166c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001672:	2300      	movs	r3, #0
 8001674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001676:	2300      	movs	r3, #0
 8001678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	4882      	ldr	r0, [pc, #520]	@ (800188c <MX_GPIO_Init+0x310>)
 8001682:	f002 fc45 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001686:	236a      	movs	r3, #106	@ 0x6a
 8001688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800168a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	487c      	ldr	r0, [pc, #496]	@ (800188c <MX_GPIO_Init+0x310>)
 800169c:	f002 fc38 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80016a0:	233f      	movs	r3, #63	@ 0x3f
 80016a2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016a4:	230b      	movs	r3, #11
 80016a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4879      	ldr	r0, [pc, #484]	@ (8001898 <MX_GPIO_Init+0x31c>)
 80016b4:	f002 fc2c 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80016b8:	2303      	movs	r3, #3
 80016ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80016c8:	2308      	movs	r3, #8
 80016ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d6:	f002 fc1b 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80016da:	f248 1304 	movw	r3, #33028	@ 0x8104
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f6:	f002 fc0b 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80016fa:	2308      	movs	r3, #8
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170a:	2301      	movs	r3, #1
 800170c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 0314 	add.w	r3, r7, #20
 8001712:	4619      	mov	r1, r3
 8001714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001718:	f002 fbfa 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800171c:	2310      	movs	r3, #16
 800171e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001720:	230b      	movs	r3, #11
 8001722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	4619      	mov	r1, r3
 800172e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001732:	f002 fbed 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001736:	23e0      	movs	r3, #224	@ 0xe0
 8001738:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001746:	2305      	movs	r3, #5
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001754:	f002 fbdc 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001758:	2301      	movs	r3, #1
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	4848      	ldr	r0, [pc, #288]	@ (8001890 <MX_GPIO_Init+0x314>)
 800176e:	f002 fbcf 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001772:	2302      	movs	r3, #2
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001776:	230b      	movs	r3, #11
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4619      	mov	r1, r3
 8001784:	4842      	ldr	r0, [pc, #264]	@ (8001890 <MX_GPIO_Init+0x314>)
 8001786:	f002 fbc3 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin SPSGRF_915_SDN_Pin
                           ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 800178a:	f24b 0334 	movw	r3, #45108	@ 0xb034
 800178e:	617b      	str	r3, [r7, #20]
                          |ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001790:	2301      	movs	r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	483b      	ldr	r0, [pc, #236]	@ (8001890 <MX_GPIO_Init+0x314>)
 80017a4:	f002 fbb4 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80017a8:	f64c 4304 	movw	r3, #52228	@ 0xcc04
 80017ac:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4835      	ldr	r0, [pc, #212]	@ (8001894 <MX_GPIO_Init+0x318>)
 80017c0:	f002 fba6 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80017c4:	f243 0381 	movw	r3, #12417	@ 0x3081
 80017c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	2301      	movs	r3, #1
 80017cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d2:	2300      	movs	r3, #0
 80017d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	4619      	mov	r1, r3
 80017dc:	482d      	ldr	r0, [pc, #180]	@ (8001894 <MX_GPIO_Init+0x318>)
 80017de:	f002 fb97 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80017e2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017f4:	f107 0314 	add.w	r3, r7, #20
 80017f8:	4619      	mov	r1, r3
 80017fa:	4827      	ldr	r0, [pc, #156]	@ (8001898 <MX_GPIO_Init+0x31c>)
 80017fc:	f002 fb88 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001800:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001806:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800180a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4820      	ldr	r0, [pc, #128]	@ (8001898 <MX_GPIO_Init+0x31c>)
 8001818:	f002 fb7a 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800181c:	2302      	movs	r3, #2
 800181e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001828:	2303      	movs	r3, #3
 800182a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182c:	2305      	movs	r3, #5
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4619      	mov	r1, r3
 8001836:	4817      	ldr	r0, [pc, #92]	@ (8001894 <MX_GPIO_Init+0x318>)
 8001838:	f002 fb6a 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800183c:	2378      	movs	r3, #120	@ 0x78
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800184c:	2307      	movs	r3, #7
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	480f      	ldr	r0, [pc, #60]	@ (8001894 <MX_GPIO_Init+0x318>)
 8001858:	f002 fb5a 	bl	8003f10 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800185c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001862:	2312      	movs	r3, #18
 8001864:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800186a:	2303      	movs	r3, #3
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800186e:	2304      	movs	r3, #4
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_GPIO_Init+0x314>)
 800187a:	f002 fb49 	bl	8003f10 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800187e:	2200      	movs	r2, #0
 8001880:	2105      	movs	r1, #5
 8001882:	2017      	movs	r0, #23
 8001884:	e00a      	b.n	800189c <MX_GPIO_Init+0x320>
 8001886:	bf00      	nop
 8001888:	40021000 	.word	0x40021000
 800188c:	48001000 	.word	0x48001000
 8001890:	48000400 	.word	0x48000400
 8001894:	48000c00 	.word	0x48000c00
 8001898:	48000800 	.word	0x48000800
 800189c:	f002 f997 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018a0:	2017      	movs	r0, #23
 80018a2:	f002 f9b0 	bl	8003c06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	2105      	movs	r1, #5
 80018aa:	2028      	movs	r0, #40	@ 0x28
 80018ac:	f002 f98f 	bl	8003bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80018b0:	2028      	movs	r0, #40	@ 0x28
 80018b2:	f002 f9a8 	bl	8003c06 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b6:	bf00      	nop
 80018b8:	3728      	adds	r7, #40	@ 0x28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop

080018c0 <MEMS_Init>:

/* USER CODE BEGIN 4 */
static void MEMS_Init(void)

{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0



  /* Link I2C functions to the LSM6DSL driver */

  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]

  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 80018ca:	23d5      	movs	r3, #213	@ 0xd5
 80018cc:	753b      	strb	r3, [r7, #20]

  io_ctx.Init        = BSP_I2C2_Init;
 80018ce:	4b1b      	ldr	r3, [pc, #108]	@ (800193c <MEMS_Init+0x7c>)
 80018d0:	60bb      	str	r3, [r7, #8]

  io_ctx.DeInit      = BSP_I2C2_DeInit;
 80018d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001940 <MEMS_Init+0x80>)
 80018d4:	60fb      	str	r3, [r7, #12]

  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 80018d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001944 <MEMS_Init+0x84>)
 80018d8:	61fb      	str	r3, [r7, #28]

  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 80018da:	4b1b      	ldr	r3, [pc, #108]	@ (8001948 <MEMS_Init+0x88>)
 80018dc:	61bb      	str	r3, [r7, #24]

  io_ctx.GetTick     = BSP_GetTick;
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <MEMS_Init+0x8c>)
 80018e0:	623b      	str	r3, [r7, #32]

  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 80018e2:	f107 0308 	add.w	r3, r7, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4819      	ldr	r0, [pc, #100]	@ (8001950 <MEMS_Init+0x90>)
 80018ea:	f001 f853 	bl	8002994 <LSM6DSL_RegisterBusIO>



  /* Read the LSM6DSL WHO_AM_I register */

  LSM6DSL_ReadID(&MotionSensor, &id);
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	4619      	mov	r1, r3
 80018f2:	4817      	ldr	r0, [pc, #92]	@ (8001950 <MEMS_Init+0x90>)
 80018f4:	f001 f921 	bl	8002b3a <LSM6DSL_ReadID>

  if (id != LSM6DSL_ID) {
 80018f8:	79fb      	ldrb	r3, [r7, #7]
 80018fa:	2b6a      	cmp	r3, #106	@ 0x6a
 80018fc:	d001      	beq.n	8001902 <MEMS_Init+0x42>

    Error_Handler();
 80018fe:	f000 f895 	bl	8001a2c <Error_Handler>



  /* Initialize the LSM6DSL sensor */

  LSM6DSL_Init(&MotionSensor);
 8001902:	4813      	ldr	r0, [pc, #76]	@ (8001950 <MEMS_Init+0x90>)
 8001904:	f001 f8b0 	bl	8002a68 <LSM6DSL_Init>



  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */

  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 8001908:	eeb3 0a0a 	vmov.f32	s0, #58	@ 0x41d00000  26.0
 800190c:	4810      	ldr	r0, [pc, #64]	@ (8001950 <MEMS_Init+0x90>)
 800190e:	f001 f995 	bl	8002c3c <LSM6DSL_ACC_SetOutputDataRate>

  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 8001912:	2104      	movs	r1, #4
 8001914:	480e      	ldr	r0, [pc, #56]	@ (8001950 <MEMS_Init+0x90>)
 8001916:	f001 f9ad 	bl	8002c74 <LSM6DSL_ACC_SetFullScale>

  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 800191a:	2101      	movs	r1, #1
 800191c:	480c      	ldr	r0, [pc, #48]	@ (8001950 <MEMS_Init+0x90>)
 800191e:	f001 fa67 	bl	8002df0 <LSM6DSL_ACC_Set_INT1_DRDY>

  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 8001922:	463b      	mov	r3, r7
 8001924:	4619      	mov	r1, r3
 8001926:	480a      	ldr	r0, [pc, #40]	@ (8001950 <MEMS_Init+0x90>)
 8001928:	f001 f9cc 	bl	8002cc4 <LSM6DSL_ACC_GetAxesRaw>



  /* Start the LSM6DSL accelerometer */

  LSM6DSL_ACC_Enable(&MotionSensor);
 800192c:	4808      	ldr	r0, [pc, #32]	@ (8001950 <MEMS_Init+0x90>)
 800192e:	f001 f91a 	bl	8002b66 <LSM6DSL_ACC_Enable>

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	@ 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	0800253d 	.word	0x0800253d
 8001940:	080025b9 	.word	0x080025b9
 8001944:	0800266d 	.word	0x0800266d
 8001948:	08002609 	.word	0x08002609
 800194c:	080026d1 	.word	0x080026d1
 8001950:	20000ce4 	.word	0x20000ce4

08001954 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	4603      	mov	r3, r0
 800195c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001964:	d104      	bne.n	8001970 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 8001966:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_GPIO_EXTI_Callback+0x28>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3301      	adds	r3, #1
 800196c:	4a03      	ldr	r2, [pc, #12]	@ (800197c <HAL_GPIO_EXTI_Callback+0x28>)
 800196e:	6013      	str	r3, [r2, #0]
  }
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	20000d1c 	.word	0x20000d1c

08001980 <StartTASK_BLE>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTASK_BLE */
void StartTASK_BLE(void *argument)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  {
	  // Acquire the mutex before printing
//	  osMutexAcquire(myMutex01Handle, osWaitForever);

	  // Example BLE-related processing
	  MX_BlueNRG_MS_Process();
 8001988:	f7fe feb6 	bl	80006f8 <MX_BlueNRG_MS_Process>
	  check_and_advertise();
 800198c:	f7ff fa8e 	bl	8000eac <check_and_advertise>

	  // Release the mutex to allow other tasks to print
//	  osMutexRelease(myMutex01Handle);

	  // Yield control to other tasks (short delay)
	  osThreadYield();
 8001990:	f008 f8de 	bl	8009b50 <osThreadYield>
	  MX_BlueNRG_MS_Process();
 8001994:	bf00      	nop
 8001996:	e7f7      	b.n	8001988 <StartTASK_BLE+0x8>

08001998 <StartTASK_ACC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTASK_ACC */
void StartTASK_ACC(void *argument)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  {
	  // Acquire the mutex before accessing shared resources or printing
//	  osMutexAcquire(myMutex01Handle, osWaitForever);
//	  MX_BlueNRG_MS_Process();
	  // Check if data is ready to be processed
	  if (dataRdyIntReceived != 0) {
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <StartTASK_ACC+0x78>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <StartTASK_ACC+0x1e>
		dataRdyIntReceived = 0;
 80019a8:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <StartTASK_ACC+0x78>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

		// Get accelerometer data
		LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 80019ae:	4919      	ldr	r1, [pc, #100]	@ (8001a14 <StartTASK_ACC+0x7c>)
 80019b0:	4819      	ldr	r0, [pc, #100]	@ (8001a18 <StartTASK_ACC+0x80>)
 80019b2:	f001 f9ab 	bl	8002d0c <LSM6DSL_ACC_GetAxes>
//	HOST_TO_LE_16(buff+16,acc_axes.y);
//	HOST_TO_LE_16(buff+18,acc_axes.y);
//	if(connected)
//	    ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle, 0, 2+2*3*3, buff);
//	  UPP();
	  if((remains == 0) || pre_sf != sf)
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <StartTASK_ACC+0x84>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <StartTASK_ACC+0x32>
 80019be:	4b18      	ldr	r3, [pc, #96]	@ (8001a20 <StartTASK_ACC+0x88>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b18      	ldr	r3, [pc, #96]	@ (8001a24 <StartTASK_ACC+0x8c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d004      	beq.n	80019d4 <StartTASK_ACC+0x3c>
		  want_update = sf;
 80019ca:	4b16      	ldr	r3, [pc, #88]	@ (8001a24 <StartTASK_ACC+0x8c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	b2da      	uxtb	r2, r3
 80019d0:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <StartTASK_ACC+0x90>)
 80019d2:	701a      	strb	r2, [r3, #0]
	  if(want_update){
 80019d4:	4b14      	ldr	r3, [pc, #80]	@ (8001a28 <StartTASK_ACC+0x90>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d00b      	beq.n	80019f4 <StartTASK_ACC+0x5c>
		  remains = sf*100+1;
 80019dc:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <StartTASK_ACC+0x8c>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2264      	movs	r2, #100	@ 0x64
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <StartTASK_ACC+0x84>)
 80019ea:	6013      	str	r3, [r2, #0]
		  pre_sf = sf;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <StartTASK_ACC+0x8c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001a20 <StartTASK_ACC+0x88>)
 80019f2:	6013      	str	r3, [r2, #0]
	  }
	  osDelay(1);
 80019f4:	2001      	movs	r0, #1
 80019f6:	f008 f8cb 	bl	8009b90 <osDelay>
	  if(sf != 0)
 80019fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <StartTASK_ACC+0x8c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0ce      	beq.n	80019a0 <StartTASK_ACC+0x8>
		  --remains;
 8001a02:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <StartTASK_ACC+0x84>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	4a04      	ldr	r2, [pc, #16]	@ (8001a1c <StartTASK_ACC+0x84>)
 8001a0a:	6013      	str	r3, [r2, #0]
	  if (dataRdyIntReceived != 0) {
 8001a0c:	e7c8      	b.n	80019a0 <StartTASK_ACC+0x8>
 8001a0e:	bf00      	nop
 8001a10:	20000d1c 	.word	0x20000d1c
 8001a14:	20000d24 	.word	0x20000d24
 8001a18:	20000ce4 	.word	0x20000ce4
 8001a1c:	2000000c 	.word	0x2000000c
 8001a20:	20000008 	.word	0x20000008
 8001a24:	20000004 	.word	0x20000004
 8001a28:	20000d20 	.word	0x20000d20

08001a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8001a34:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a38:	4803      	ldr	r0, [pc, #12]	@ (8001a48 <Error_Handler+0x1c>)
 8001a3a:	f002 fd37 	bl	80044ac <HAL_GPIO_TogglePin>
	  HAL_Delay(50); /* wait 50 ms */
 8001a3e:	2032      	movs	r0, #50	@ 0x32
 8001a40:	f001 ffc6 	bl	80039d0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_PORT, LED2_PIN);
 8001a44:	bf00      	nop
 8001a46:	e7f5      	b.n	8001a34 <Error_Handler+0x8>
 8001a48:	48000400 	.word	0x48000400

08001a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a52:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_MspInit+0x4c>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a56:	4a10      	ldr	r2, [pc, #64]	@ (8001a98 <HAL_MspInit+0x4c>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a5e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a98 <HAL_MspInit+0x4c>)
 8001a60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a98 <HAL_MspInit+0x4c>)
 8001a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a98 <HAL_MspInit+0x4c>)
 8001a70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a76:	4b08      	ldr	r3, [pc, #32]	@ (8001a98 <HAL_MspInit+0x4c>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a7e:	603b      	str	r3, [r7, #0]
 8001a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	210f      	movs	r1, #15
 8001a86:	f06f 0001 	mvn.w	r0, #1
 8001a8a:	f002 f8a0 	bl	8003bce <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000

08001a9c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b0ac      	sub	sp, #176	@ 0xb0
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
 8001ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2288      	movs	r2, #136	@ 0x88
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f00a ff0b 	bl	800c8d8 <memset>
  if(DFSDM1_Init == 0)
 8001ac2:	4b25      	ldr	r3, [pc, #148]	@ (8001b58 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d142      	bne.n	8001b50 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001aca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ace:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	4618      	mov	r0, r3
 8001adc:	f004 fc0a 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001ae6:	f7ff ffa1 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	4a1b      	ldr	r2, [pc, #108]	@ (8001b5c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001af0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001af4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001af6:	4b19      	ldr	r3, [pc, #100]	@ (8001b5c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001af8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001afa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	4a15      	ldr	r2, [pc, #84]	@ (8001b5c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b0e:	4b13      	ldr	r3, [pc, #76]	@ (8001b5c <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b1a:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8001b1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b34:	2306      	movs	r3, #6
 8001b36:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b3a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001b42:	f002 f9e5 	bl	8003f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 8001b46:	4b04      	ldr	r3, [pc, #16]	@ (8001b58 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	4a02      	ldr	r2, [pc, #8]	@ (8001b58 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b4e:	6013      	str	r3, [r2, #0]
  }

}
 8001b50:	bf00      	nop
 8001b52:	37b0      	adds	r7, #176	@ 0xb0
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000d30 	.word	0x20000d30
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	48001000 	.word	0x48001000

08001b64 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a17      	ldr	r2, [pc, #92]	@ (8001be0 <HAL_QSPI_MspInit+0x7c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d128      	bne.n	8001bd8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b86:	4b17      	ldr	r3, [pc, #92]	@ (8001be4 <HAL_QSPI_MspInit+0x80>)
 8001b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8a:	4a16      	ldr	r2, [pc, #88]	@ (8001be4 <HAL_QSPI_MspInit+0x80>)
 8001b8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b90:	6513      	str	r3, [r2, #80]	@ 0x50
 8001b92:	4b14      	ldr	r3, [pc, #80]	@ (8001be4 <HAL_QSPI_MspInit+0x80>)
 8001b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_QSPI_MspInit+0x80>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_QSPI_MspInit+0x80>)
 8001ba4:	f043 0310 	orr.w	r3, r3, #16
 8001ba8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_QSPI_MspInit+0x80>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bae:	f003 0310 	and.w	r3, r3, #16
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001bb6:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 8001bba:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bc8:	230a      	movs	r3, #10
 8001bca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_QSPI_MspInit+0x84>)
 8001bd4:	f002 f99c 	bl	8003f10 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001bd8:	bf00      	nop
 8001bda:	3728      	adds	r7, #40	@ 0x28
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	a0001000 	.word	0xa0001000
 8001be4:	40021000 	.word	0x40021000
 8001be8:	48001000 	.word	0x48001000

08001bec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b0ac      	sub	sp, #176	@ 0xb0
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	2288      	movs	r2, #136	@ 0x88
 8001c0a:	2100      	movs	r1, #0
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f00a fe63 	bl	800c8d8 <memset>
  if(huart->Instance==USART3)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a21      	ldr	r2, [pc, #132]	@ (8001c9c <HAL_UART_MspInit+0xb0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d13b      	bne.n	8001c94 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fb63 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c34:	f7ff fefa 	bl	8001a2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c38:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c3c:	4a18      	ldr	r2, [pc, #96]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c44:	4b16      	ldr	r3, [pc, #88]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5c:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <HAL_UART_MspInit+0xb4>)
 8001c5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001c68:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c82:	2307      	movs	r3, #7
 8001c84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	@ (8001ca4 <HAL_UART_MspInit+0xb8>)
 8001c90:	f002 f93e 	bl	8003f10 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001c94:	bf00      	nop
 8001c96:	37b0      	adds	r7, #176	@ 0xb0
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004800 	.word	0x40004800
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000c00 	.word	0x48000c00

08001ca8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b0ac      	sub	sp, #176	@ 0xb0
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	2288      	movs	r2, #136	@ 0x88
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f00a fe05 	bl	800c8d8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001cd6:	d17c      	bne.n	8001dd2 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001cd8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cdc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001cde:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001ce2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001cea:	2301      	movs	r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001cee:	2318      	movs	r3, #24
 8001cf0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001cf2:	2307      	movs	r3, #7
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001cfe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001d02:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f004 faf3 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001d14:	f7ff fe8a 	bl	8001a2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	4b30      	ldr	r3, [pc, #192]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1c:	4a2f      	ldr	r2, [pc, #188]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d24:	4b2d      	ldr	r3, [pc, #180]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001d30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d34:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d48:	4619      	mov	r1, r3
 8001d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d4e:	f002 f8df 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001d52:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d6c:	230a      	movs	r3, #10
 8001d6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d76:	4619      	mov	r1, r3
 8001d78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d7c:	f002 f8c8 	bl	8003f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001d80:	4b16      	ldr	r3, [pc, #88]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001d82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d84:	4a15      	ldr	r2, [pc, #84]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001d86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d98:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d114      	bne.n	8001dce <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b0d      	ldr	r3, [pc, #52]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001da8:	4a0c      	ldr	r2, [pc, #48]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001dbc:	f003 fbce 	bl	800555c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc0:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	4a05      	ldr	r2, [pc, #20]	@ (8001ddc <HAL_PCD_MspInit+0x134>)
 8001dc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dca:	6593      	str	r3, [r2, #88]	@ 0x58

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8001dcc:	e001      	b.n	8001dd2 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001dce:	f003 fbc5 	bl	800555c <HAL_PWREx_EnableVddUSB>
}
 8001dd2:	bf00      	nop
 8001dd4:	37b0      	adds	r7, #176	@ 0xb0
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40021000 	.word	0x40021000

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001de4:	bf00      	nop
 8001de6:	e7fd      	b.n	8001de4 <NMI_Handler+0x4>

08001de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dec:	bf00      	nop
 8001dee:	e7fd      	b.n	8001dec <HardFault_Handler+0x4>

08001df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df4:	bf00      	nop
 8001df6:	e7fd      	b.n	8001df4 <MemManage_Handler+0x4>

08001df8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfc:	bf00      	nop
 8001dfe:	e7fd      	b.n	8001dfc <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	bf00      	nop
 8001e06:	e7fd      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e1a:	f001 fdb9 	bl	8003990 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001e1e:	f009 fbed 	bl	800b5fc <xTaskGetSchedulerState>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d001      	beq.n	8001e2c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001e28:	f00a f9e6 	bl	800c1f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001e34:	2020      	movs	r0, #32
 8001e36:	f002 fb53 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8001e3a:	4806      	ldr	r0, [pc, #24]	@ (8001e54 <EXTI9_5_IRQHandler+0x24>)
 8001e3c:	f002 f838 	bl	8003eb0 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001e40:	2080      	movs	r0, #128	@ 0x80
 8001e42:	f002 fb4d 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001e46:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001e4a:	f002 fb49 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000130 	.word	0x20000130

08001e58 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001e5c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001e60:	f002 fb3e 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001e64:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8001e68:	f002 fb3a 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8001e6c:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <EXTI15_10_IRQHandler+0x30>)
 8001e6e:	f002 f81f 	bl	8003eb0 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001e72:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e76:	f002 fb33 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001e7a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001e7e:	f002 fb2f 	bl	80044e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000001c 	.word	0x2000001c

08001e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_kill>:

int _kill(int pid, int sig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ea6:	f00a fd1f 	bl	800c8e8 <__errno>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2216      	movs	r2, #22
 8001eae:	601a      	str	r2, [r3, #0]
  return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_exit>:

void _exit (int status)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffe7 	bl	8001e9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ece:	bf00      	nop
 8001ed0:	e7fd      	b.n	8001ece <_exit+0x12>

08001ed2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b086      	sub	sp, #24
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	60f8      	str	r0, [r7, #12]
 8001eda:	60b9      	str	r1, [r7, #8]
 8001edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e00a      	b.n	8001efa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ee4:	f3af 8000 	nop.w
 8001ee8:	4601      	mov	r1, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	1c5a      	adds	r2, r3, #1
 8001eee:	60ba      	str	r2, [r7, #8]
 8001ef0:	b2ca      	uxtb	r2, r1
 8001ef2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	617b      	str	r3, [r7, #20]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	dbf0      	blt.n	8001ee4 <_read+0x12>
  }

  return len;
 8001f02:	687b      	ldr	r3, [r7, #4]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e009      	b.n	8001f32 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	60ba      	str	r2, [r7, #8]
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fa3e 	bl	80023a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	617b      	str	r3, [r7, #20]
 8001f32:	697a      	ldr	r2, [r7, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	dbf1      	blt.n	8001f1e <_write+0x12>
  }
  return len;
 8001f3a:	687b      	ldr	r3, [r7, #4]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <_close>:

int _close(int file)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f6c:	605a      	str	r2, [r3, #4]
  return 0;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <_isatty>:

int _isatty(int file)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f84:	2301      	movs	r3, #1
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	60f8      	str	r0, [r7, #12]
 8001f9a:	60b9      	str	r1, [r7, #8]
 8001f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	@ (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	@ (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	@ (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	@ (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f00a fc84 	bl	800c8e8 <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	@ (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	@ (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20018000 	.word	0x20018000
 800200c:	00000400 	.word	0x00000400
 8002010:	20000d34 	.word	0x20000d34
 8002014:	20002bf0 	.word	0x20002bf0

08002018 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	@ (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800203c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002074 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002040:	f7ff ffea 	bl	8002018 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002044:	480c      	ldr	r0, [pc, #48]	@ (8002078 <LoopForever+0x6>)
  ldr r1, =_edata
 8002046:	490d      	ldr	r1, [pc, #52]	@ (800207c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002048:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <LoopForever+0xe>)
  movs r3, #0
 800204a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800204c:	e002      	b.n	8002054 <LoopCopyDataInit>

0800204e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800204e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002052:	3304      	adds	r3, #4

08002054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002058:	d3f9      	bcc.n	800204e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205a:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800205c:	4c0a      	ldr	r4, [pc, #40]	@ (8002088 <LoopForever+0x16>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002060:	e001      	b.n	8002066 <LoopFillZerobss>

08002062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002064:	3204      	adds	r2, #4

08002066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002068:	d3fb      	bcc.n	8002062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206a:	f00a fc43 	bl	800c8f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800206e:	f7ff f921 	bl	80012b4 <main>

08002072 <LoopForever>:

LoopForever:
    b LoopForever
 8002072:	e7fe      	b.n	8002072 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002074:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800207c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002080:	0800d8e0 	.word	0x0800d8e0
  ldr r2, =_sbss
 8002084:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002088:	20002bec 	.word	0x20002bec

0800208c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800208c:	e7fe      	b.n	800208c <ADC1_2_IRQHandler>
	...

08002090 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800209a:	79fb      	ldrb	r3, [r7, #7]
 800209c:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <BSP_LED_Init+0x20>)
 800209e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a2:	4798      	blx	r3
  return BSP_ERROR_NONE;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	0800d7dc 	.word	0x0800d7dc

080020b4 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	4a06      	ldr	r2, [pc, #24]	@ (80020dc <BSP_LED_Toggle+0x28>)
 80020c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020ca:	4611      	mov	r1, r2
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 f9ed 	bl	80044ac <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000014 	.word	0x20000014

080020e0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002158 <LED_USER_GPIO_Init+0x78>)
 80020e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002158 <LED_USER_GPIO_Init+0x78>)
 80020ec:	f043 0302 	orr.w	r3, r3, #2
 80020f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f2:	4b19      	ldr	r3, [pc, #100]	@ (8002158 <LED_USER_GPIO_Init+0x78>)
 80020f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	60bb      	str	r3, [r7, #8]
 80020fc:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fe:	f107 030c 	add.w	r3, r7, #12
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <LED_USER_GPIO_Init+0x78>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	4a11      	ldr	r2, [pc, #68]	@ (8002158 <LED_USER_GPIO_Init+0x78>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211a:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <LED_USER_GPIO_Init+0x78>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002126:	2200      	movs	r2, #0
 8002128:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800212c:	480b      	ldr	r0, [pc, #44]	@ (800215c <LED_USER_GPIO_Init+0x7c>)
 800212e:	f002 f9a5 	bl	800447c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002132:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002136:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002138:	2301      	movs	r3, #1
 800213a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	4619      	mov	r1, r3
 800214a:	4804      	ldr	r0, [pc, #16]	@ (800215c <LED_USER_GPIO_Init+0x7c>)
 800214c:	f001 fee0 	bl	8003f10 <HAL_GPIO_Init>

}
 8002150:	bf00      	nop
 8002152:	3720      	adds	r7, #32
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	40021000 	.word	0x40021000
 800215c:	48000400 	.word	0x48000400

08002160 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	460a      	mov	r2, r1
 800216a:	71fb      	strb	r3, [r7, #7]
 800216c:	4613      	mov	r3, r2
 800216e:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002170:	2300      	movs	r3, #0
 8002172:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	4a1f      	ldr	r2, [pc, #124]	@ (80021f4 <BSP_PB_Init+0x94>)
 8002178:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217c:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 800217e:	79bb      	ldrb	r3, [r7, #6]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d132      	bne.n	80021ea <BSP_PB_Init+0x8a>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8002184:	79fb      	ldrb	r3, [r7, #7]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4a1b      	ldr	r2, [pc, #108]	@ (80021f8 <BSP_PB_Init+0x98>)
 800218a:	441a      	add	r2, r3
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	491b      	ldr	r1, [pc, #108]	@ (80021fc <BSP_PB_Init+0x9c>)
 8002190:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f001 fe76 	bl	8003e88 <HAL_EXTI_GetHandle>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d003      	beq.n	80021aa <BSP_PB_Init+0x4a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80021a2:	f06f 0303 	mvn.w	r3, #3
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	e01f      	b.n	80021ea <BSP_PB_Init+0x8a>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4a12      	ldr	r2, [pc, #72]	@ (80021f8 <BSP_PB_Init+0x98>)
 80021b0:	1898      	adds	r0, r3, r2
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	4a12      	ldr	r2, [pc, #72]	@ (8002200 <BSP_PB_Init+0xa0>)
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	461a      	mov	r2, r3
 80021bc:	2100      	movs	r1, #0
 80021be:	f001 fe49 	bl	8003e54 <HAL_EXTI_RegisterCallback>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d003      	beq.n	80021d0 <BSP_PB_Init+0x70>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80021c8:	f06f 0303 	mvn.w	r3, #3
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	e00c      	b.n	80021ea <BSP_PB_Init+0x8a>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80021d0:	2028      	movs	r0, #40	@ 0x28
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	4a0b      	ldr	r2, [pc, #44]	@ (8002204 <BSP_PB_Init+0xa4>)
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	2200      	movs	r2, #0
 80021dc:	4619      	mov	r1, r3
 80021de:	f001 fcf6 	bl	8003bce <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80021e2:	2328      	movs	r3, #40	@ 0x28
 80021e4:	4618      	mov	r0, r3
 80021e6:	f001 fd0e 	bl	8003c06 <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 80021ea:	68fb      	ldr	r3, [r7, #12]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	0800d7e0 	.word	0x0800d7e0
 80021f8:	2000001c 	.word	0x2000001c
 80021fc:	0800d7e4 	.word	0x0800d7e4
 8002200:	0800d7e8 	.word	0x0800d7e8
 8002204:	0800d7ec 	.word	0x0800d7ec

08002208 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	4a09      	ldr	r2, [pc, #36]	@ (800223c <BSP_PB_GetState+0x34>)
 8002216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800221a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800221e:	4611      	mov	r1, r2
 8002220:	4618      	mov	r0, r3
 8002222:	f002 f913 	bl	800444c <HAL_GPIO_ReadPin>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20000018 	.word	0x20000018

08002240 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002244:	2000      	movs	r0, #0
 8002246:	f7fe fab3 	bl	80007b0 <BSP_PB_Callback>
}
 800224a:	bf00      	nop
 800224c:	bd80      	pop	{r7, pc}
	...

08002250 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002256:	4b19      	ldr	r3, [pc, #100]	@ (80022bc <BUTTON_USER_GPIO_Init+0x6c>)
 8002258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225a:	4a18      	ldr	r2, [pc, #96]	@ (80022bc <BUTTON_USER_GPIO_Init+0x6c>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002262:	4b16      	ldr	r3, [pc, #88]	@ (80022bc <BUTTON_USER_GPIO_Init+0x6c>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	60bb      	str	r3, [r7, #8]
 800226c:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226e:	f107 030c 	add.w	r3, r7, #12
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800227e:	4b0f      	ldr	r3, [pc, #60]	@ (80022bc <BUTTON_USER_GPIO_Init+0x6c>)
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	4a0e      	ldr	r2, [pc, #56]	@ (80022bc <BUTTON_USER_GPIO_Init+0x6c>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800228a:	4b0c      	ldr	r3, [pc, #48]	@ (80022bc <BUTTON_USER_GPIO_Init+0x6c>)
 800228c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 8002296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800229a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800229c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80022a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	4619      	mov	r1, r3
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <BUTTON_USER_GPIO_Init+0x70>)
 80022ae:	f001 fe2f 	bl	8003f10 <HAL_GPIO_Init>

}
 80022b2:	bf00      	nop
 80022b4:	3720      	adds	r7, #32
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	48000800 	.word	0x48000800

080022c4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d903      	bls.n	80022e0 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80022d8:	f06f 0301 	mvn.w	r3, #1
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	e025      	b.n	800232c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	79fa      	ldrb	r2, [r7, #7]
 80022e4:	4914      	ldr	r1, [pc, #80]	@ (8002338 <BSP_COM_Init+0x74>)
 80022e6:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80022ea:	4814      	ldr	r0, [pc, #80]	@ (800233c <BSP_COM_Init+0x78>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	4413      	add	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4403      	add	r3, r0
 80022f6:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 80022f8:	79fa      	ldrb	r2, [r7, #7]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	4413      	add	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4a0e      	ldr	r2, [pc, #56]	@ (800233c <BSP_COM_Init+0x78>)
 8002304:	4413      	add	r3, r2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f86a 	bl	80023e0 <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	4613      	mov	r3, r2
 8002310:	011b      	lsls	r3, r3, #4
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <BSP_COM_Init+0x78>)
 8002318:	4413      	add	r3, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f810 	bl	8002340 <MX_USART1_UART_Init>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002326:	f06f 0303 	mvn.w	r3, #3
 800232a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800232c:	68fb      	ldr	r3, [r7, #12]
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000024 	.word	0x20000024
 800233c:	20000d38 	.word	0x20000d38

08002340 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a15      	ldr	r2, [pc, #84]	@ (80023a4 <MX_USART1_UART_Init+0x64>)
 8002350:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002358:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	220c      	movs	r2, #12
 8002370:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	61da      	str	r2, [r3, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	621a      	str	r2, [r3, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f005 f8bc 	bl	8007508 <HAL_UART_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MX_USART1_UART_Init+0x5a>
  {
    ret = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40013800 	.word	0x40013800

080023a8 <__io_putchar>:
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
  return ch;
}
#else /* For GCC Toolchains */
int __io_putchar (int ch)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <__io_putchar+0x30>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <__io_putchar+0x34>)
 80023c0:	1898      	adds	r0, r3, r2
 80023c2:	1d39      	adds	r1, r7, #4
 80023c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80023c8:	2201      	movs	r2, #1
 80023ca:	f005 f8eb 	bl	80075a4 <HAL_UART_Transmit>
  return ch;
 80023ce:	687b      	ldr	r3, [r7, #4]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000dc0 	.word	0x20000dc0
 80023dc:	20000d38 	.word	0x20000d38

080023e0 <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b0ac      	sub	sp, #176	@ 0xb0
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	2288      	movs	r2, #136	@ 0x88
 80023ee:	2100      	movs	r1, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	f00a fa71 	bl	800c8d8 <memset>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80023fa:	2300      	movs	r3, #0
 80023fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80023fe:	f107 0314 	add.w	r3, r7, #20
 8002402:	4618      	mov	r0, r3
 8002404:	f003 ff76 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>

    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002408:	4b22      	ldr	r3, [pc, #136]	@ (8002494 <USART1_MspInit+0xb4>)
 800240a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800240c:	4a21      	ldr	r2, [pc, #132]	@ (8002494 <USART1_MspInit+0xb4>)
 800240e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002412:	6613      	str	r3, [r2, #96]	@ 0x60
 8002414:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <USART1_MspInit+0xb4>)
 8002416:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	4b1c      	ldr	r3, [pc, #112]	@ (8002494 <USART1_MspInit+0xb4>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002424:	4a1b      	ldr	r2, [pc, #108]	@ (8002494 <USART1_MspInit+0xb4>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242c:	4b19      	ldr	r3, [pc, #100]	@ (8002494 <USART1_MspInit+0xb4>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 8002438:	2340      	movs	r3, #64	@ 0x40
 800243a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244a:	2303      	movs	r3, #3
 800244c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 8002450:	2307      	movs	r3, #7
 8002452:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8002456:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800245a:	4619      	mov	r1, r3
 800245c:	480e      	ldr	r0, [pc, #56]	@ (8002498 <USART1_MspInit+0xb8>)
 800245e:	f001 fd57 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 8002462:	2380      	movs	r3, #128	@ 0x80
 8002464:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002468:	2302      	movs	r3, #2
 800246a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002474:	2303      	movs	r3, #3
 8002476:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 800247a:	2307      	movs	r3, #7
 800247c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8002480:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002484:	4619      	mov	r1, r3
 8002486:	4804      	ldr	r0, [pc, #16]	@ (8002498 <USART1_MspInit+0xb8>)
 8002488:	f001 fd42 	bl	8003f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 800248c:	bf00      	nop
 800248e:	37b0      	adds	r7, #176	@ 0xb0
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	48000400 	.word	0x48000400

0800249c <BSP_SPI3_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI3_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80024a2:	2300      	movs	r3, #0
 80024a4:	607b      	str	r3, [r7, #4]

  hspi3.Instance  = SPI3;
 80024a6:	4b12      	ldr	r3, [pc, #72]	@ (80024f0 <BSP_SPI3_Init+0x54>)
 80024a8:	4a12      	ldr	r2, [pc, #72]	@ (80024f4 <BSP_SPI3_Init+0x58>)
 80024aa:	601a      	str	r2, [r3, #0]

  if(SPI3InitCounter++ == 0)
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <BSP_SPI3_Init+0x5c>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	1c5a      	adds	r2, r3, #1
 80024b2:	4911      	ldr	r1, [pc, #68]	@ (80024f8 <BSP_SPI3_Init+0x5c>)
 80024b4:	600a      	str	r2, [r1, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d114      	bne.n	80024e4 <BSP_SPI3_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET)
 80024ba:	480d      	ldr	r0, [pc, #52]	@ (80024f0 <BSP_SPI3_Init+0x54>)
 80024bc:	f004 feb2 	bl	8007224 <HAL_SPI_GetState>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10e      	bne.n	80024e4 <BSP_SPI3_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI3_MspInit(&hspi3);
 80024c6:	480a      	ldr	r0, [pc, #40]	@ (80024f0 <BSP_SPI3_Init+0x54>)
 80024c8:	f000 f94c 	bl	8002764 <SPI3_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d108      	bne.n	80024e4 <BSP_SPI3_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI3_Init(&hspi3) != HAL_OK)
 80024d2:	4807      	ldr	r0, [pc, #28]	@ (80024f0 <BSP_SPI3_Init+0x54>)
 80024d4:	f000 f904 	bl	80026e0 <MX_SPI3_Init>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d002      	beq.n	80024e4 <BSP_SPI3_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 80024de:	f06f 0307 	mvn.w	r3, #7
 80024e2:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 80024e4:	687b      	ldr	r3, [r7, #4]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000dc4 	.word	0x20000dc4
 80024f4:	40003c00 	.word	0x40003c00
 80024f8:	20000e7c 	.word	0x20000e7c

080024fc <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b088      	sub	sp, #32
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 800250e:	88fb      	ldrh	r3, [r7, #6]
 8002510:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002514:	9200      	str	r2, [sp, #0]
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	68f9      	ldr	r1, [r7, #12]
 800251a:	4807      	ldr	r0, [pc, #28]	@ (8002538 <BSP_SPI3_SendRecv+0x3c>)
 800251c:	f004 fc63 	bl	8006de6 <HAL_SPI_TransmitReceive>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <BSP_SPI3_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002526:	f06f 0305 	mvn.w	r3, #5
 800252a:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800252c:	697b      	ldr	r3, [r7, #20]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000dc4 	.word	0x20000dc4

0800253c <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8002546:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <BSP_I2C2_Init+0x70>)
 8002548:	4a19      	ldr	r2, [pc, #100]	@ (80025b0 <BSP_I2C2_Init+0x74>)
 800254a:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <BSP_I2C2_Init+0x78>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	1c5a      	adds	r2, r3, #1
 8002552:	4918      	ldr	r1, [pc, #96]	@ (80025b4 <BSP_I2C2_Init+0x78>)
 8002554:	600a      	str	r2, [r1, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d122      	bne.n	80025a0 <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 800255a:	4814      	ldr	r0, [pc, #80]	@ (80025ac <BSP_I2C2_Init+0x70>)
 800255c:	f002 fae4 	bl	8004b28 <HAL_I2C_GetState>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11c      	bne.n	80025a0 <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8002566:	4811      	ldr	r0, [pc, #68]	@ (80025ac <BSP_I2C2_Init+0x70>)
 8002568:	f000 f998 	bl	800289c <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d116      	bne.n	80025a0 <BSP_I2C2_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 8002572:	480e      	ldr	r0, [pc, #56]	@ (80025ac <BSP_I2C2_Init+0x70>)
 8002574:	f000 f94e 	bl	8002814 <MX_I2C2_Init>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d003      	beq.n	8002586 <BSP_I2C2_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800257e:	f06f 0307 	mvn.w	r3, #7
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	e00c      	b.n	80025a0 <BSP_I2C2_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002586:	2100      	movs	r1, #0
 8002588:	4808      	ldr	r0, [pc, #32]	@ (80025ac <BSP_I2C2_Init+0x70>)
 800258a:	f002 fda9 	bl	80050e0 <HAL_I2CEx_ConfigAnalogFilter>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <BSP_I2C2_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8002594:	f06f 0307 	mvn.w	r3, #7
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	e001      	b.n	80025a0 <BSP_I2C2_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800259c:	2300      	movs	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80025a0:	687b      	ldr	r3, [r7, #4]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000e28 	.word	0x20000e28
 80025b0:	40005800 	.word	0x40005800
 80025b4:	20000e80 	.word	0x20000e80

080025b8 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80025be:	2300      	movs	r3, #0
 80025c0:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 80025c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002600 <BSP_I2C2_DeInit+0x48>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d014      	beq.n	80025f4 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <BSP_I2C2_DeInit+0x48>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	4a0b      	ldr	r2, [pc, #44]	@ (8002600 <BSP_I2C2_DeInit+0x48>)
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <BSP_I2C2_DeInit+0x48>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10b      	bne.n	80025f4 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 80025dc:	4809      	ldr	r0, [pc, #36]	@ (8002604 <BSP_I2C2_DeInit+0x4c>)
 80025de:	f000 f9bd 	bl	800295c <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 80025e2:	4808      	ldr	r0, [pc, #32]	@ (8002604 <BSP_I2C2_DeInit+0x4c>)
 80025e4:	f002 f82f 	bl	8004646 <HAL_I2C_DeInit>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80025ee:	f06f 0307 	mvn.w	r3, #7
 80025f2:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80025f4:	687b      	ldr	r3, [r7, #4]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	20000e80 	.word	0x20000e80
 8002604:	20000e28 	.word	0x20000e28

08002608 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	@ 0x28
 800260c:	af04      	add	r7, sp, #16
 800260e:	60ba      	str	r2, [r7, #8]
 8002610:	461a      	mov	r2, r3
 8002612:	4603      	mov	r3, r0
 8002614:	81fb      	strh	r3, [r7, #14]
 8002616:	460b      	mov	r3, r1
 8002618:	81bb      	strh	r3, [r7, #12]
 800261a:	4613      	mov	r3, r2
 800261c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800261e:	2300      	movs	r3, #0
 8002620:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002622:	89ba      	ldrh	r2, [r7, #12]
 8002624:	89f9      	ldrh	r1, [r7, #14]
 8002626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800262a:	9302      	str	r3, [sp, #8]
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2301      	movs	r3, #1
 8002636:	480c      	ldr	r0, [pc, #48]	@ (8002668 <BSP_I2C2_WriteReg+0x60>)
 8002638:	f002 f848 	bl	80046cc <HAL_I2C_Mem_Write>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8002642:	4809      	ldr	r0, [pc, #36]	@ (8002668 <BSP_I2C2_WriteReg+0x60>)
 8002644:	f002 fa7e 	bl	8004b44 <HAL_I2C_GetError>
 8002648:	4603      	mov	r3, r0
 800264a:	2b04      	cmp	r3, #4
 800264c:	d103      	bne.n	8002656 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800264e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	e002      	b.n	800265c <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8002656:	f06f 0303 	mvn.w	r3, #3
 800265a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800265c:	697b      	ldr	r3, [r7, #20]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000e28 	.word	0x20000e28

0800266c <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af04      	add	r7, sp, #16
 8002672:	60ba      	str	r2, [r7, #8]
 8002674:	461a      	mov	r2, r3
 8002676:	4603      	mov	r3, r0
 8002678:	81fb      	strh	r3, [r7, #14]
 800267a:	460b      	mov	r3, r1
 800267c:	81bb      	strh	r3, [r7, #12]
 800267e:	4613      	mov	r3, r2
 8002680:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8002686:	89ba      	ldrh	r2, [r7, #12]
 8002688:	89f9      	ldrh	r1, [r7, #14]
 800268a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800268e:	9302      	str	r3, [sp, #8]
 8002690:	88fb      	ldrh	r3, [r7, #6]
 8002692:	9301      	str	r3, [sp, #4]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	9300      	str	r3, [sp, #0]
 8002698:	2301      	movs	r3, #1
 800269a:	480c      	ldr	r0, [pc, #48]	@ (80026cc <BSP_I2C2_ReadReg+0x60>)
 800269c:	f002 f92a 	bl	80048f4 <HAL_I2C_Mem_Read>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80026a6:	4809      	ldr	r0, [pc, #36]	@ (80026cc <BSP_I2C2_ReadReg+0x60>)
 80026a8:	f002 fa4c 	bl	8004b44 <HAL_I2C_GetError>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d103      	bne.n	80026ba <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80026b2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e002      	b.n	80026c0 <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026ba:	f06f 0303 	mvn.w	r3, #3
 80026be:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80026c0:	697b      	ldr	r3, [r7, #20]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3718      	adds	r7, #24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	20000e28 	.word	0x20000e28

080026d0 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80026d4:	f001 f970 	bl	80039b8 <HAL_GetTick>
 80026d8:	4603      	mov	r3, r0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	bd80      	pop	{r7, pc}
	...

080026e0 <MX_SPI3_Init>:

/* SPI3 init function */

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI3;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002760 <MX_SPI3_Init+0x80>)
 80026f0:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80026f8:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002706:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800271a:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi->Init.CRCPolynomial = 7;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2207      	movs	r2, #7
 8002738:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2208      	movs	r2, #8
 8002744:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f004 faa0 	bl	8006c8c <HAL_SPI_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_SPI3_Init+0x76>
  {
    ret = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40003c00 	.word	0x40003c00

08002764 <SPI3_MspInit>:

static void SPI3_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	@ 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800276c:	4b27      	ldr	r3, [pc, #156]	@ (800280c <SPI3_MspInit+0xa8>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002770:	4a26      	ldr	r2, [pc, #152]	@ (800280c <SPI3_MspInit+0xa8>)
 8002772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002776:	6593      	str	r3, [r2, #88]	@ 0x58
 8002778:	4b24      	ldr	r3, [pc, #144]	@ (800280c <SPI3_MspInit+0xa8>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002784:	4b21      	ldr	r3, [pc, #132]	@ (800280c <SPI3_MspInit+0xa8>)
 8002786:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002788:	4a20      	ldr	r2, [pc, #128]	@ (800280c <SPI3_MspInit+0xa8>)
 800278a:	f043 0304 	orr.w	r3, r3, #4
 800278e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002790:	4b1e      	ldr	r3, [pc, #120]	@ (800280c <SPI3_MspInit+0xa8>)
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = BUS_SPI3_SCK_GPIO_PIN;
 800279c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a2:	2302      	movs	r3, #2
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	2303      	movs	r3, #3
 80027ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_SCK_GPIO_AF;
 80027ae:	2306      	movs	r3, #6
 80027b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_SCK_GPIO_PORT, &GPIO_InitStruct);
 80027b2:	f107 0314 	add.w	r3, r7, #20
 80027b6:	4619      	mov	r1, r3
 80027b8:	4815      	ldr	r0, [pc, #84]	@ (8002810 <SPI3_MspInit+0xac>)
 80027ba:	f001 fba9 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MISO_GPIO_PIN;
 80027be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80027c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c4:	2302      	movs	r3, #2
 80027c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027cc:	2303      	movs	r3, #3
 80027ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MISO_GPIO_AF;
 80027d0:	2306      	movs	r3, #6
 80027d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MISO_GPIO_PORT, &GPIO_InitStruct);
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	4619      	mov	r1, r3
 80027da:	480d      	ldr	r0, [pc, #52]	@ (8002810 <SPI3_MspInit+0xac>)
 80027dc:	f001 fb98 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI3_MOSI_GPIO_PIN;
 80027e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI3_MOSI_GPIO_AF;
 80027f2:	2306      	movs	r3, #6
 80027f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BUS_SPI3_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	4804      	ldr	r0, [pc, #16]	@ (8002810 <SPI3_MspInit+0xac>)
 80027fe:	f001 fb87 	bl	8003f10 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
}
 8002802:	bf00      	nop
 8002804:	3728      	adds	r7, #40	@ 0x28
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000
 8002810:	48000800 	.word	0x48000800

08002814 <MX_I2C2_Init>:
}

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800281c:	2300      	movs	r3, #0
 800281e:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C2;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a1c      	ldr	r2, [pc, #112]	@ (8002894 <MX_I2C2_Init+0x80>)
 8002824:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a1b      	ldr	r2, [pc, #108]	@ (8002898 <MX_I2C2_Init+0x84>)
 800282a:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f001 fe5a 	bl	8004510 <HAL_I2C_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002866:	2100      	movs	r1, #0
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	f002 fc39 	bl	80050e0 <HAL_I2CEx_ConfigAnalogFilter>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8002878:	2100      	movs	r1, #0
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f002 fc7b 	bl	8005176 <HAL_I2CEx_ConfigDigitalFilter>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800288a:	7bfb      	ldrb	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40005800 	.word	0x40005800
 8002898:	00702991 	.word	0x00702991

0800289c <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b0ac      	sub	sp, #176	@ 0xb0
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	2288      	movs	r2, #136	@ 0x88
 80028aa:	2100      	movs	r1, #0
 80028ac:	4618      	mov	r0, r3
 80028ae:	f00a f813 	bl	800c8d8 <memset>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028b2:	2380      	movs	r3, #128	@ 0x80
 80028b4:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80028b6:	2300      	movs	r3, #0
 80028b8:	66bb      	str	r3, [r7, #104]	@ 0x68
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4618      	mov	r0, r3
 80028c0:	f003 fd18 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c4:	4b23      	ldr	r3, [pc, #140]	@ (8002954 <I2C2_MspInit+0xb8>)
 80028c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028c8:	4a22      	ldr	r2, [pc, #136]	@ (8002954 <I2C2_MspInit+0xb8>)
 80028ca:	f043 0302 	orr.w	r3, r3, #2
 80028ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028d0:	4b20      	ldr	r3, [pc, #128]	@ (8002954 <I2C2_MspInit+0xb8>)
 80028d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 80028dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e4:	2312      	movs	r3, #18
 80028e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f0:	2303      	movs	r3, #3
 80028f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 80028f6:	2304      	movs	r3, #4
 80028f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 80028fc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002900:	4619      	mov	r1, r3
 8002902:	4815      	ldr	r0, [pc, #84]	@ (8002958 <I2C2_MspInit+0xbc>)
 8002904:	f001 fb04 	bl	8003f10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8002908:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800290c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002910:	2312      	movs	r3, #18
 8002912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002916:	2301      	movs	r3, #1
 8002918:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8002922:	2304      	movs	r3, #4
 8002924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 8002928:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800292c:	4619      	mov	r1, r3
 800292e:	480a      	ldr	r0, [pc, #40]	@ (8002958 <I2C2_MspInit+0xbc>)
 8002930:	f001 faee 	bl	8003f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002934:	4b07      	ldr	r3, [pc, #28]	@ (8002954 <I2C2_MspInit+0xb8>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	4a06      	ldr	r2, [pc, #24]	@ (8002954 <I2C2_MspInit+0xb8>)
 800293a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800293e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002940:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <I2C2_MspInit+0xb8>)
 8002942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002944:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 800294c:	bf00      	nop
 800294e:	37b0      	adds	r7, #176	@ 0xb0
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000
 8002958:	48000400 	.word	0x48000400

0800295c <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002964:	4b09      	ldr	r3, [pc, #36]	@ (800298c <I2C2_MspDeInit+0x30>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	4a08      	ldr	r2, [pc, #32]	@ (800298c <I2C2_MspDeInit+0x30>)
 800296a:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800296e:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 8002970:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002974:	4806      	ldr	r0, [pc, #24]	@ (8002990 <I2C2_MspDeInit+0x34>)
 8002976:	f001 fc75 	bl	8004264 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 800297a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800297e:	4804      	ldr	r0, [pc, #16]	@ (8002990 <I2C2_MspDeInit+0x34>)
 8002980:	f001 fc70 	bl	8004264 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 8002984:	bf00      	nop
 8002986:	3708      	adds	r7, #8
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40021000 	.word	0x40021000
 8002990:	48000400 	.word	0x48000400

08002994 <LSM6DSL_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80029a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	e051      	b.n	8002a54 <LSM6DSL_RegisterBusIO+0xc0>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	689a      	ldr	r2, [r3, #8]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	7b1a      	ldrb	r2, [r3, #12]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	699a      	ldr	r2, [r3, #24]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002a60 <LSM6DSL_RegisterBusIO+0xcc>)
 80029ec:	625a      	str	r2, [r3, #36]	@ 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002a64 <LSM6DSL_RegisterBusIO+0xd0>)
 80029f2:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	69da      	ldr	r2, [r3, #28]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	@ 0x28
    pObj->Ctx.handle   = pObj;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (pObj->IO.Init == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <LSM6DSL_RegisterBusIO+0x7e>
    {
      ret = LSM6DSL_ERROR;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e020      	b.n	8002a54 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4798      	blx	r3
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <LSM6DSL_RegisterBusIO+0x92>
    {
      ret = LSM6DSL_ERROR;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	e016      	b.n	8002a54 <LSM6DSL_RegisterBusIO+0xc0>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d112      	bne.n	8002a54 <LSM6DSL_RegisterBusIO+0xc0>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10d      	bne.n	8002a54 <LSM6DSL_RegisterBusIO+0xc0>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8002a38:	230c      	movs	r3, #12
 8002a3a:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8002a3c:	7afb      	ldrb	r3, [r7, #11]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	2112      	movs	r1, #18
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9b9 	bl	8002dba <LSM6DSL_Write_Reg>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <LSM6DSL_RegisterBusIO+0xc0>
          {
            ret = LSM6DSL_ERROR;
 8002a4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a52:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8002a54:	68fb      	ldr	r3, [r7, #12]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08003075 	.word	0x08003075
 8002a64:	080030ab 	.word	0x080030ab

08002a68 <LSM6DSL_Init>:
  * @brief  Initialize the LSM6DSL sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3320      	adds	r3, #32
 8002a74:	2101      	movs	r1, #1
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 fcb1 	bl	80033de <lsm6dsl_auto_increment_set>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 8002a82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a86:	e054      	b.n	8002b32 <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	3320      	adds	r3, #32
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f000 fc26 	bl	80032e0 <lsm6dsl_block_data_update_set>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d002      	beq.n	8002aa0 <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 8002a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002a9e:	e048      	b.n	8002b32 <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3320      	adds	r3, #32
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f000 fef8 	bl	800389c <lsm6dsl_fifo_mode_set>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 8002ab2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ab6:	e03c      	b.n	8002b32 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2204      	movs	r2, #4
 8002abc:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3320      	adds	r3, #32
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fb98 	bl	80031fc <lsm6dsl_xl_data_rate_set>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ad6:	e02c      	b.n	8002b32 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3320      	adds	r3, #32
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fb2e 	bl	8003140 <lsm6dsl_xl_full_scale_set>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d002      	beq.n	8002af0 <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8002aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002aee:	e020      	b.n	8002b32 <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2204      	movs	r2, #4
 8002af4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3320      	adds	r3, #32
 8002afc:	2100      	movs	r1, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fbc8 	bl	8003294 <lsm6dsl_gy_data_rate_set>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8002b0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b0e:	e010      	b.n	8002b32 <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3320      	adds	r3, #32
 8002b14:	2106      	movs	r1, #6
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 fb96 	bl	8003248 <lsm6dsl_gy_full_scale_set>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b26:	e004      	b.n	8002b32 <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return LSM6DSL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <LSM6DSL_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
 8002b42:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3320      	adds	r3, #32
 8002b48:	6839      	ldr	r1, [r7, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fc36 	bl	80033bc <lsm6dsl_device_id_get>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 8002b56:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b5a:	e000      	b.n	8002b5e <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <LSM6DSL_ACC_Enable>:
  * @brief  Enable the LSM6DSL accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e014      	b.n	8002ba6 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f103 0220 	add.w	r2, r3, #32
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f000 fb36 	bl	80031fc <lsm6dsl_xl_data_rate_set>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 8002b96:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b9a:	e004      	b.n	8002ba6 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

  return LSM6DSL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <LSM6DSL_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3320      	adds	r3, #32
 8002bc2:	f107 020b 	add.w	r2, r7, #11
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f000 fadf 	bl	800318c <lsm6dsl_xl_full_scale_get>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bd8:	e023      	b.n	8002c22 <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8002bda:	7afb      	ldrb	r3, [r7, #11]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d81b      	bhi.n	8002c18 <LSM6DSL_ACC_GetSensitivity+0x68>
 8002be0:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <LSM6DSL_ACC_GetSensitivity+0x38>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002c11 	.word	0x08002c11
 8002bf0:	08002c01 	.word	0x08002c01
 8002bf4:	08002c09 	.word	0x08002c09
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4a0c      	ldr	r2, [pc, #48]	@ (8002c2c <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8002bfc:	601a      	str	r2, [r3, #0]
      break;
 8002bfe:	e00f      	b.n	8002c20 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4a0b      	ldr	r2, [pc, #44]	@ (8002c30 <LSM6DSL_ACC_GetSensitivity+0x80>)
 8002c04:	601a      	str	r2, [r3, #0]
      break;
 8002c06:	e00b      	b.n	8002c20 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c34 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8002c0c:	601a      	str	r2, [r3, #0]
      break;
 8002c0e:	e007      	b.n	8002c20 <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	4a09      	ldr	r2, [pc, #36]	@ (8002c38 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8002c14:	601a      	str	r2, [r3, #0]
      break;
 8002c16:	e003      	b.n	8002c20 <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8002c18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c1c:	60fb      	str	r3, [r7, #12]
      break;
 8002c1e:	bf00      	nop
  }

  return ret;
 8002c20:	68fb      	ldr	r3, [r7, #12]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	3d79db23 	.word	0x3d79db23
 8002c30:	3df9db23 	.word	0x3df9db23
 8002c34:	3e79db23 	.word	0x3e79db23
 8002c38:	3ef9db23 	.word	0x3ef9db23

08002c3c <LSM6DSL_ACC_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d106      	bne.n	8002c60 <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 8002c52:	ed97 0a00 	vldr	s0, [r7]
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f8fe 	bl	8002e58 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	e005      	b.n	8002c6c <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 8002c60:	ed97 0a00 	vldr	s0, [r7]
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f983 	bl	8002f70 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 8002c6a:	4603      	mov	r3, r0
  }
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <LSM6DSL_ACC_SetFullScale>:
  * @param  pObj the device pObj
  * @param  FullScale the functional full scale to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	dd0b      	ble.n	8002c9c <LSM6DSL_ACC_SetFullScale+0x28>
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	dd06      	ble.n	8002c98 <LSM6DSL_ACC_SetFullScale+0x24>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	dc01      	bgt.n	8002c94 <LSM6DSL_ACC_SetFullScale+0x20>
 8002c90:	2303      	movs	r3, #3
 8002c92:	e004      	b.n	8002c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e002      	b.n	8002c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e000      	b.n	8002c9e <LSM6DSL_ACC_SetFullScale+0x2a>
 8002c9c:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 8002c9e:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3320      	adds	r3, #32
 8002ca4:	7bfa      	ldrb	r2, [r7, #15]
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fa49 	bl	8003140 <lsm6dsl_xl_full_scale_set>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d002      	beq.n	8002cba <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8002cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cb8:	e000      	b.n	8002cbc <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3710      	adds	r7, #16
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <LSM6DSL_ACC_GetAxesRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the raw values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3320      	adds	r3, #32
 8002cd2:	f107 0208 	add.w	r2, r7, #8
 8002cd6:	4611      	mov	r1, r2
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 fb27 	bl	800332c <lsm6dsl_acceleration_raw_get>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8002ce4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ce8:	e00c      	b.n	8002d04 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8002cea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8002cf2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8002cfa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3710      	adds	r7, #16
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <LSM6DSL_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3320      	adds	r3, #32
 8002d20:	f107 0210 	add.w	r2, r7, #16
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fb00 	bl	800332c <lsm6dsl_acceleration_raw_get>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d36:	e03c      	b.n	8002db2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f7ff ff36 	bl	8002bb0 <LSM6DSL_ACC_GetSensitivity>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8002d4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d4e:	e030      	b.n	8002db2 <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8002d50:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d68:	ee17 2a90 	vmov	r2, s15
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8002d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d74:	ee07 3a90 	vmov	s15, r3
 8002d78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d88:	ee17 2a90 	vmov	r2, s15
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8002d90:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d94:	ee07 3a90 	vmov	s15, r3
 8002d98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002da8:	ee17 2a90 	vmov	r2, s15
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <LSM6DSL_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	70fb      	strb	r3, [r7, #3]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f103 0020 	add.w	r0, r3, #32
 8002dd0:	1cba      	adds	r2, r7, #2
 8002dd2:	78f9      	ldrb	r1, [r7, #3]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	f000 f99b 	bl	8003110 <lsm6dsl_write_reg>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d002      	beq.n	8002de6 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8002de0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002de4:	e000      	b.n	8002de8 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <LSM6DSL_ACC_Set_INT1_DRDY>:
  * @param  pObj the device pObj
  * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3320      	adds	r3, #32
 8002e00:	f107 020c 	add.w	r2, r7, #12
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fc72 	bl	80036f0 <lsm6dsl_pin_int1_route_get>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e16:	e01b      	b.n	8002e50 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d811      	bhi.n	8002e42 <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	7b3b      	ldrb	r3, [r7, #12]
 8002e28:	f362 0300 	bfi	r3, r2, #0, #1
 8002e2c:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	3320      	adds	r3, #32
 8002e32:	68f9      	ldr	r1, [r7, #12]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 faf8 	bl	800342a <lsm6dsl_pin_int1_route_set>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8002e40:	e002      	b.n	8002e48 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e46:	e003      	b.n	8002e50 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e4c:	e000      	b.n	8002e50 <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3710      	adds	r7, #16
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
            : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002e64:	edd7 7a00 	vldr	s15, [r7]
 8002e68:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002e6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e74:	d801      	bhi.n	8002e7a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8002e76:	2301      	movs	r3, #1
 8002e78:	e058      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002e7a:	edd7 7a00 	vldr	s15, [r7]
 8002e7e:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002e82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8a:	d801      	bhi.n	8002e90 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e04d      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002e90:	edd7 7a00 	vldr	s15, [r7]
 8002e94:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002f54 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8002e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea0:	d801      	bhi.n	8002ea6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e042      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002ea6:	edd7 7a00 	vldr	s15, [r7]
 8002eaa:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8002f58 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8002eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb6:	d801      	bhi.n	8002ebc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8002eb8:	2304      	movs	r3, #4
 8002eba:	e037      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002ebc:	edd7 7a00 	vldr	s15, [r7]
 8002ec0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002f5c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8002ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	d801      	bhi.n	8002ed2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8002ece:	2305      	movs	r3, #5
 8002ed0:	e02c      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002ed2:	edd7 7a00 	vldr	s15, [r7]
 8002ed6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002f60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8002eda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	d801      	bhi.n	8002ee8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8002ee4:	2306      	movs	r3, #6
 8002ee6:	e021      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002ee8:	edd7 7a00 	vldr	s15, [r7]
 8002eec:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8002f64 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8002ef0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef8:	d801      	bhi.n	8002efe <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8002efa:	2307      	movs	r3, #7
 8002efc:	e016      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002efe:	edd7 7a00 	vldr	s15, [r7]
 8002f02:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002f68 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8002f06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0e:	d801      	bhi.n	8002f14 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8002f10:	2308      	movs	r3, #8
 8002f12:	e00b      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f14:	edd7 7a00 	vldr	s15, [r7]
 8002f18:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002f6c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8002f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f24:	d801      	bhi.n	8002f2a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e000      	b.n	8002f2c <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8002f2a:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8002f2c:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
            : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
            :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3320      	adds	r3, #32
 8002f32:	7bfa      	ldrb	r2, [r7, #15]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 f960 	bl	80031fc <lsm6dsl_xl_data_rate_set>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8002f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f46:	e000      	b.n	8002f4a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	42500000 	.word	0x42500000
 8002f58:	42d00000 	.word	0x42d00000
 8002f5c:	43500000 	.word	0x43500000
 8002f60:	43d00000 	.word	0x43d00000
 8002f64:	44504000 	.word	0x44504000
 8002f68:	44cf8000 	.word	0x44cf8000
 8002f6c:	45502000 	.word	0x45502000

08002f70 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
  * @param  pObj the device pObj
  * @param  Odr the functional output data rate to be set
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                  : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8002f7c:	edd7 7a00 	vldr	s15, [r7]
 8002f80:	eeb2 7a09 	vmov.f32	s14, #41	@ 0x41480000  12.5
 8002f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f8c:	d801      	bhi.n	8002f92 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e058      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002f92:	edd7 7a00 	vldr	s15, [r7]
 8002f96:	eeb3 7a0a 	vmov.f32	s14, #58	@ 0x41d00000  26.0
 8002f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa2:	d801      	bhi.n	8002fa8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e04d      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002fa8:	edd7 7a00 	vldr	s15, [r7]
 8002fac:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8003058 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8002fb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb8:	d801      	bhi.n	8002fbe <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e042      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002fbe:	edd7 7a00 	vldr	s15, [r7]
 8002fc2:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800305c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8002fc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fce:	d801      	bhi.n	8002fd4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	e037      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002fd4:	edd7 7a00 	vldr	s15, [r7]
 8002fd8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003060 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8002fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe4:	d801      	bhi.n	8002fea <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8002fe6:	2305      	movs	r3, #5
 8002fe8:	e02c      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8002fea:	edd7 7a00 	vldr	s15, [r7]
 8002fee:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003064 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8002ff2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffa:	d801      	bhi.n	8003000 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8002ffc:	2306      	movs	r3, #6
 8002ffe:	e021      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003000:	edd7 7a00 	vldr	s15, [r7]
 8003004:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003068 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8003008:	eef4 7ac7 	vcmpe.f32	s15, s14
 800300c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003010:	d801      	bhi.n	8003016 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8003012:	2307      	movs	r3, #7
 8003014:	e016      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003016:	edd7 7a00 	vldr	s15, [r7]
 800301a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800306c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 800301e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	d801      	bhi.n	800302c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8003028:	2308      	movs	r3, #8
 800302a:	e00b      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 800302c:	edd7 7a00 	vldr	s15, [r7]
 8003030:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003070 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8003034:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	d801      	bhi.n	8003042 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800303e:	2309      	movs	r3, #9
 8003040:	e000      	b.n	8003044 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8003042:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	f882 3033 	strb.w	r3, [r2, #51]	@ 0x33
                  : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                  : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                  : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                  :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	42500000 	.word	0x42500000
 800305c:	42d00000 	.word	0x42d00000
 8003060:	43500000 	.word	0x43500000
 8003064:	43d00000 	.word	0x43d00000
 8003068:	44504000 	.word	0x44504000
 800306c:	44cf8000 	.word	0x44cf8000
 8003070:	45502000 	.word	0x45502000

08003074 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8003074:	b590      	push	{r4, r7, lr}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	460b      	mov	r3, r1
 8003082:	72fb      	strb	r3, [r7, #11]
 8003084:	4613      	mov	r3, r2
 8003086:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	695c      	ldr	r4, [r3, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	7b1b      	ldrb	r3, [r3, #12]
 8003094:	4618      	mov	r0, r3
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	b299      	uxth	r1, r3
 800309a:	893b      	ldrh	r3, [r7, #8]
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	47a0      	blx	r4
 80030a0:	4603      	mov	r3, r0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	371c      	adds	r7, #28
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}

080030aa <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 80030aa:	b590      	push	{r4, r7, lr}
 80030ac:	b087      	sub	sp, #28
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	461a      	mov	r2, r3
 80030b6:	460b      	mov	r3, r1
 80030b8:	72fb      	strb	r3, [r7, #11]
 80030ba:	4613      	mov	r3, r2
 80030bc:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	691c      	ldr	r4, [r3, #16]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	7b1b      	ldrb	r3, [r3, #12]
 80030ca:	4618      	mov	r0, r3
 80030cc:	7afb      	ldrb	r3, [r7, #11]
 80030ce:	b299      	uxth	r1, r3
 80030d0:	893b      	ldrh	r3, [r7, #8]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	47a0      	blx	r4
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	371c      	adds	r7, #28
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}

080030e0 <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	461a      	mov	r2, r3
 80030ec:	460b      	mov	r3, r1
 80030ee:	72fb      	strb	r3, [r7, #11]
 80030f0:	4613      	mov	r3, r2
 80030f2:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685c      	ldr	r4, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	68d8      	ldr	r0, [r3, #12]
 80030fc:	893b      	ldrh	r3, [r7, #8]
 80030fe:	7af9      	ldrb	r1, [r7, #11]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	47a0      	blx	r4
 8003104:	6178      	str	r0, [r7, #20]

  return ret;
 8003106:	697b      	ldr	r3, [r7, #20]
}
 8003108:	4618      	mov	r0, r3
 800310a:	371c      	adds	r7, #28
 800310c:	46bd      	mov	sp, r7
 800310e:	bd90      	pop	{r4, r7, pc}

08003110 <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	607a      	str	r2, [r7, #4]
 800311a:	461a      	mov	r2, r3
 800311c:	460b      	mov	r3, r1
 800311e:	72fb      	strb	r3, [r7, #11]
 8003120:	4613      	mov	r3, r2
 8003122:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681c      	ldr	r4, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68d8      	ldr	r0, [r3, #12]
 800312c:	893b      	ldrh	r3, [r7, #8]
 800312e:	7af9      	ldrb	r1, [r7, #11]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	47a0      	blx	r4
 8003134:	6178      	str	r0, [r7, #20]

  return ret;
 8003136:	697b      	ldr	r3, [r7, #20]
}
 8003138:	4618      	mov	r0, r3
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bd90      	pop	{r4, r7, pc}

08003140 <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800314c:	f107 0208 	add.w	r2, r7, #8
 8003150:	2301      	movs	r3, #1
 8003152:	2110      	movs	r1, #16
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff ffc3 	bl	80030e0 <lsm6dsl_read_reg>
 800315a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <lsm6dsl_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t) val;
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 0303 	and.w	r3, r3, #3
 8003168:	b2da      	uxtb	r2, r3
 800316a:	7a3b      	ldrb	r3, [r7, #8]
 800316c:	f362 0383 	bfi	r3, r2, #2, #2
 8003170:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003172:	f107 0208 	add.w	r2, r7, #8
 8003176:	2301      	movs	r3, #1
 8003178:	2110      	movs	r1, #16
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff ffc8 	bl	8003110 <lsm6dsl_write_reg>
 8003180:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003196:	f107 0208 	add.w	r2, r7, #8
 800319a:	2301      	movs	r3, #1
 800319c:	2110      	movs	r1, #16
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff ff9e 	bl	80030e0 <lsm6dsl_read_reg>
 80031a4:	60f8      	str	r0, [r7, #12]

  switch (ctrl1_xl.fs_xl)
 80031a6:	7a3b      	ldrb	r3, [r7, #8]
 80031a8:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d81a      	bhi.n	80031e8 <lsm6dsl_xl_full_scale_get+0x5c>
 80031b2:	a201      	add	r2, pc, #4	@ (adr r2, 80031b8 <lsm6dsl_xl_full_scale_get+0x2c>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	080031c9 	.word	0x080031c9
 80031bc:	080031d1 	.word	0x080031d1
 80031c0:	080031d9 	.word	0x080031d9
 80031c4:	080031e1 	.word	0x080031e1
  {
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
      break;
 80031ce:	e00f      	b.n	80031f0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2201      	movs	r2, #1
 80031d4:	701a      	strb	r2, [r3, #0]
      break;
 80031d6:	e00b      	b.n	80031f0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	2202      	movs	r2, #2
 80031dc:	701a      	strb	r2, [r3, #0]
      break;
 80031de:	e007      	b.n	80031f0 <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2203      	movs	r2, #3
 80031e4:	701a      	strb	r2, [r3, #0]
      break;
 80031e6:	e003      	b.n	80031f0 <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2204      	movs	r2, #4
 80031ec:	701a      	strb	r2, [r3, #0]
      break;
 80031ee:	bf00      	nop
  }

  return ret;
 80031f0:	68fb      	ldr	r3, [r7, #12]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop

080031fc <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8003208:	f107 0208 	add.w	r2, r7, #8
 800320c:	2301      	movs	r3, #1
 800320e:	2110      	movs	r1, #16
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff ff65 	bl	80030e0 <lsm6dsl_read_reg>
 8003216:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <lsm6dsl_xl_data_rate_set+0x42>
  {
    ctrl1_xl.odr_xl = (uint8_t) val;
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	b2da      	uxtb	r2, r3
 8003226:	7a3b      	ldrb	r3, [r7, #8]
 8003228:	f362 1307 	bfi	r3, r2, #4, #4
 800322c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 800322e:	f107 0208 	add.w	r2, r7, #8
 8003232:	2301      	movs	r3, #1
 8003234:	2110      	movs	r1, #16
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ff6a 	bl	8003110 <lsm6dsl_write_reg>
 800323c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800323e:	68fb      	ldr	r3, [r7, #12]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8003254:	f107 0208 	add.w	r2, r7, #8
 8003258:	2301      	movs	r3, #1
 800325a:	2111      	movs	r1, #17
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff ff3f 	bl	80030e0 <lsm6dsl_read_reg>
 8003262:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10f      	bne.n	800328a <lsm6dsl_gy_full_scale_set+0x42>
  {
    ctrl2_g.fs_g = (uint8_t) val;
 800326a:	78fb      	ldrb	r3, [r7, #3]
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	b2da      	uxtb	r2, r3
 8003272:	7a3b      	ldrb	r3, [r7, #8]
 8003274:	f362 0343 	bfi	r3, r2, #1, #3
 8003278:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 800327a:	f107 0208 	add.w	r2, r7, #8
 800327e:	2301      	movs	r3, #1
 8003280:	2111      	movs	r1, #17
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7ff ff44 	bl	8003110 <lsm6dsl_write_reg>
 8003288:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800328a:	68fb      	ldr	r3, [r7, #12]
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80032a0:	f107 0208 	add.w	r2, r7, #8
 80032a4:	2301      	movs	r3, #1
 80032a6:	2111      	movs	r1, #17
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ff19 	bl	80030e0 <lsm6dsl_read_reg>
 80032ae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <lsm6dsl_gy_data_rate_set+0x42>
  {
    ctrl2_g.odr_g = (uint8_t) val;
 80032b6:	78fb      	ldrb	r3, [r7, #3]
 80032b8:	f003 030f 	and.w	r3, r3, #15
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	7a3b      	ldrb	r3, [r7, #8]
 80032c0:	f362 1307 	bfi	r3, r2, #4, #4
 80032c4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 80032c6:	f107 0208 	add.w	r2, r7, #8
 80032ca:	2301      	movs	r3, #1
 80032cc:	2111      	movs	r1, #17
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7ff ff1e 	bl	8003110 <lsm6dsl_write_reg>
 80032d4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80032d6:	68fb      	ldr	r3, [r7, #12]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80032ec:	f107 0208 	add.w	r2, r7, #8
 80032f0:	2301      	movs	r3, #1
 80032f2:	2112      	movs	r1, #18
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff fef3 	bl	80030e0 <lsm6dsl_read_reg>
 80032fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10f      	bne.n	8003322 <lsm6dsl_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = val;
 8003302:	78fb      	ldrb	r3, [r7, #3]
 8003304:	f003 0301 	and.w	r3, r3, #1
 8003308:	b2da      	uxtb	r2, r3
 800330a:	7a3b      	ldrb	r3, [r7, #8]
 800330c:	f362 1386 	bfi	r3, r2, #6, #1
 8003310:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003312:	f107 0208 	add.w	r2, r7, #8
 8003316:	2301      	movs	r3, #1
 8003318:	2112      	movs	r1, #18
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7ff fef8 	bl	8003110 <lsm6dsl_write_reg>
 8003320:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8003336:	f107 020c 	add.w	r2, r7, #12
 800333a:	2306      	movs	r3, #6
 800333c:	2128      	movs	r1, #40	@ 0x28
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fece 	bl	80030e0 <lsm6dsl_read_reg>
 8003344:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8003346:	7b7b      	ldrb	r3, [r7, #13]
 8003348:	b21a      	sxth	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003354:	b29b      	uxth	r3, r3
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	b29b      	uxth	r3, r3
 800335a:	7b3a      	ldrb	r2, [r7, #12]
 800335c:	4413      	add	r3, r2
 800335e:	b29b      	uxth	r3, r3
 8003360:	b21a      	sxth	r2, r3
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8003366:	7bfa      	ldrb	r2, [r7, #15]
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	3302      	adds	r3, #2
 800336c:	b212      	sxth	r2, r2
 800336e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	3302      	adds	r3, #2
 8003374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003378:	b29b      	uxth	r3, r3
 800337a:	021b      	lsls	r3, r3, #8
 800337c:	b29b      	uxth	r3, r3
 800337e:	7bba      	ldrb	r2, [r7, #14]
 8003380:	4413      	add	r3, r2
 8003382:	b29a      	uxth	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	3302      	adds	r3, #2
 8003388:	b212      	sxth	r2, r2
 800338a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800338c:	7c7a      	ldrb	r2, [r7, #17]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	3304      	adds	r3, #4
 8003392:	b212      	sxth	r2, r2
 8003394:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	3304      	adds	r3, #4
 800339a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	021b      	lsls	r3, r3, #8
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	7c3a      	ldrb	r2, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	3304      	adds	r3, #4
 80033ae:	b212      	sxth	r2, r2
 80033b0:	801a      	strh	r2, [r3, #0]

  return ret;
 80033b2:	697b      	ldr	r3, [r7, #20]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 80033c6:	2301      	movs	r3, #1
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	210f      	movs	r1, #15
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fe87 	bl	80030e0 <lsm6dsl_read_reg>
 80033d2:	60f8      	str	r0, [r7, #12]

  return ret;
 80033d4:	68fb      	ldr	r3, [r7, #12]
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}

080033de <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b084      	sub	sp, #16
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 80033ea:	f107 0208 	add.w	r2, r7, #8
 80033ee:	2301      	movs	r3, #1
 80033f0:	2112      	movs	r1, #18
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f7ff fe74 	bl	80030e0 <lsm6dsl_read_reg>
 80033f8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d10f      	bne.n	8003420 <lsm6dsl_auto_increment_set+0x42>
  {
    ctrl3_c.if_inc = val;
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	b2da      	uxtb	r2, r3
 8003408:	7a3b      	ldrb	r3, [r7, #8]
 800340a:	f362 0382 	bfi	r3, r2, #2, #1
 800340e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8003410:	f107 0208 	add.w	r2, r7, #8
 8003414:	2301      	movs	r3, #1
 8003416:	2112      	movs	r1, #18
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff fe79 	bl	8003110 <lsm6dsl_write_reg>
 800341e:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8003420:	68fb      	ldr	r3, [r7, #12]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b08a      	sub	sp, #40	@ 0x28
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
 8003432:	6039      	str	r1, [r7, #0]
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 8003434:	f107 021c 	add.w	r2, r7, #28
 8003438:	2301      	movs	r3, #1
 800343a:	210d      	movs	r1, #13
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fe4f 	bl	80030e0 <lsm6dsl_read_reg>
 8003442:	6278      	str	r0, [r7, #36]	@ 0x24

  if (ret == 0)
 8003444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003446:	2b00      	cmp	r3, #0
 8003448:	d147      	bne.n	80034da <lsm6dsl_pin_int1_route_set+0xb0>
  {
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800344a:	783b      	ldrb	r3, [r7, #0]
 800344c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003450:	b2da      	uxtb	r2, r3
 8003452:	7f3b      	ldrb	r3, [r7, #28]
 8003454:	f362 0300 	bfi	r3, r2, #0, #1
 8003458:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 800345a:	783b      	ldrb	r3, [r7, #0]
 800345c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003460:	b2da      	uxtb	r2, r3
 8003462:	7f3b      	ldrb	r3, [r7, #28]
 8003464:	f362 0341 	bfi	r3, r2, #1, #1
 8003468:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 800346a:	783b      	ldrb	r3, [r7, #0]
 800346c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003470:	b2da      	uxtb	r2, r3
 8003472:	7f3b      	ldrb	r3, [r7, #28]
 8003474:	f362 0382 	bfi	r3, r2, #2, #1
 8003478:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 800347a:	783b      	ldrb	r3, [r7, #0]
 800347c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	7f3b      	ldrb	r3, [r7, #28]
 8003484:	f362 03c3 	bfi	r3, r2, #3, #1
 8003488:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 800348a:	783b      	ldrb	r3, [r7, #0]
 800348c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003490:	b2da      	uxtb	r2, r3
 8003492:	7f3b      	ldrb	r3, [r7, #28]
 8003494:	f362 1304 	bfi	r3, r2, #4, #1
 8003498:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 800349a:	783b      	ldrb	r3, [r7, #0]
 800349c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	7f3b      	ldrb	r3, [r7, #28]
 80034a4:	f362 1345 	bfi	r3, r2, #5, #1
 80034a8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80034aa:	783b      	ldrb	r3, [r7, #0]
 80034ac:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	7f3b      	ldrb	r3, [r7, #28]
 80034b4:	f362 1386 	bfi	r3, r2, #6, #1
 80034b8:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 80034ba:	783b      	ldrb	r3, [r7, #0]
 80034bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	7f3b      	ldrb	r3, [r7, #28]
 80034c4:	f362 13c7 	bfi	r3, r2, #7, #1
 80034c8:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80034ca:	f107 021c 	add.w	r2, r7, #28
 80034ce:	2301      	movs	r3, #1
 80034d0:	210d      	movs	r1, #13
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff fe1c 	bl	8003110 <lsm6dsl_write_reg>
 80034d8:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80034da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d107      	bne.n	80034f0 <lsm6dsl_pin_int1_route_set+0xc6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80034e0:	f107 0218 	add.w	r2, r7, #24
 80034e4:	2301      	movs	r3, #1
 80034e6:	215e      	movs	r1, #94	@ 0x5e
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff fdf9 	bl	80030e0 <lsm6dsl_read_reg>
 80034ee:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80034f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <lsm6dsl_pin_int1_route_set+0xdc>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 80034f6:	f107 0214 	add.w	r2, r7, #20
 80034fa:	2301      	movs	r3, #1
 80034fc:	215f      	movs	r1, #95	@ 0x5f
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7ff fdee 	bl	80030e0 <lsm6dsl_read_reg>
 8003504:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	2b00      	cmp	r3, #0
 800350a:	d147      	bne.n	800359c <lsm6dsl_pin_int1_route_set+0x172>
  {
    md1_cfg.int1_timer           = val.int1_timer;
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	7e3b      	ldrb	r3, [r7, #24]
 8003516:	f362 0300 	bfi	r3, r2, #0, #1
 800351a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 800351c:	787b      	ldrb	r3, [r7, #1]
 800351e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003522:	b2da      	uxtb	r2, r3
 8003524:	7e3b      	ldrb	r3, [r7, #24]
 8003526:	f362 0341 	bfi	r3, r2, #1, #1
 800352a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 800352c:	787b      	ldrb	r3, [r7, #1]
 800352e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003532:	b2da      	uxtb	r2, r3
 8003534:	7e3b      	ldrb	r3, [r7, #24]
 8003536:	f362 0382 	bfi	r3, r2, #2, #1
 800353a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 800353c:	787b      	ldrb	r3, [r7, #1]
 800353e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003542:	b2da      	uxtb	r2, r3
 8003544:	7e3b      	ldrb	r3, [r7, #24]
 8003546:	f362 03c3 	bfi	r3, r2, #3, #1
 800354a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 800354c:	787b      	ldrb	r3, [r7, #1]
 800354e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003552:	b2da      	uxtb	r2, r3
 8003554:	7e3b      	ldrb	r3, [r7, #24]
 8003556:	f362 1304 	bfi	r3, r2, #4, #1
 800355a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 800355c:	787b      	ldrb	r3, [r7, #1]
 800355e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	7e3b      	ldrb	r3, [r7, #24]
 8003566:	f362 1345 	bfi	r3, r2, #5, #1
 800356a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003572:	b2da      	uxtb	r2, r3
 8003574:	7e3b      	ldrb	r3, [r7, #24]
 8003576:	f362 1386 	bfi	r3, r2, #6, #1
 800357a:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 800357c:	787b      	ldrb	r3, [r7, #1]
 800357e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003582:	b2da      	uxtb	r2, r3
 8003584:	7e3b      	ldrb	r3, [r7, #24]
 8003586:	f362 13c7 	bfi	r3, r2, #7, #1
 800358a:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 800358c:	f107 0218 	add.w	r2, r7, #24
 8003590:	2301      	movs	r3, #1
 8003592:	215e      	movs	r1, #94	@ 0x5e
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fdbb 	bl	8003110 <lsm6dsl_write_reg>
 800359a:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 800359c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d107      	bne.n	80035b2 <lsm6dsl_pin_int1_route_set+0x188>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80035a2:	f107 0210 	add.w	r2, r7, #16
 80035a6:	2301      	movs	r3, #1
 80035a8:	2113      	movs	r1, #19
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff fd98 	bl	80030e0 <lsm6dsl_read_reg>
 80035b0:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80035b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10f      	bne.n	80035d8 <lsm6dsl_pin_int1_route_set+0x1ae>
  {
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 80035b8:	78bb      	ldrb	r3, [r7, #2]
 80035ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	7c3b      	ldrb	r3, [r7, #16]
 80035c2:	f362 1304 	bfi	r3, r2, #4, #1
 80035c6:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80035c8:	f107 0210 	add.w	r2, r7, #16
 80035cc:	2301      	movs	r3, #1
 80035ce:	2113      	movs	r1, #19
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7ff fd9d 	bl	8003110 <lsm6dsl_write_reg>
 80035d6:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  if (ret == 0)
 80035d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d107      	bne.n	80035ee <lsm6dsl_pin_int1_route_set+0x1c4>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80035de:	f107 0220 	add.w	r2, r7, #32
 80035e2:	2301      	movs	r3, #1
 80035e4:	211a      	movs	r1, #26
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f7ff fd7a 	bl	80030e0 <lsm6dsl_read_reg>
 80035ec:	6278      	str	r0, [r7, #36]	@ 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d111      	bne.n	8003618 <lsm6dsl_pin_int1_route_set+0x1ee>
  {
    master_config.drdy_on_int1   = val.den_drdy_int1;
 80035f4:	78bb      	ldrb	r3, [r7, #2]
 80035f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003600:	f362 13c7 	bfi	r3, r2, #7, #1
 8003604:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003608:	f107 0220 	add.w	r2, r7, #32
 800360c:	2301      	movs	r3, #1
 800360e:	211a      	movs	r1, #26
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff fd7d 	bl	8003110 <lsm6dsl_write_reg>
 8003616:	6278      	str	r0, [r7, #36]	@ 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0)
 8003618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d158      	bne.n	80036d0 <lsm6dsl_pin_int1_route_set+0x2a6>
  {
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 800361e:	f107 020c 	add.w	r2, r7, #12
 8003622:	2301      	movs	r3, #1
 8003624:	2158      	movs	r1, #88	@ 0x58
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fd5a 	bl	80030e0 <lsm6dsl_read_reg>
 800362c:	6278      	str	r0, [r7, #36]	@ 0x24

    if ((val.int1_6d != 0x00U) ||
 800362e:	787b      	ldrb	r3, [r7, #1]
 8003630:	f003 0304 	and.w	r3, r3, #4
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d141      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800363a:	787b      	ldrb	r3, [r7, #1]
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8003642:	2b00      	cmp	r3, #0
 8003644:	d13b      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8003646:	787b      	ldrb	r3, [r7, #1]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 800364e:	2b00      	cmp	r3, #0
 8003650:	d135      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 8003652:	787b      	ldrb	r3, [r7, #1]
 8003654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003658:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 800365a:	2b00      	cmp	r3, #0
 800365c:	d12f      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 800365e:	787b      	ldrb	r3, [r7, #1]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 8003666:	2b00      	cmp	r3, #0
 8003668:	d129      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 800366a:	787b      	ldrb	r3, [r7, #1]
 800366c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8003670:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 8003672:	2b00      	cmp	r3, #0
 8003674:	d123      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 8003676:	7d3b      	ldrb	r3, [r7, #20]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11d      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 8003682:	7d3b      	ldrb	r3, [r7, #20]
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 800368a:	2b00      	cmp	r3, #0
 800368c:	d117      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 800368e:	7d3b      	ldrb	r3, [r7, #20]
 8003690:	f003 0320 	and.w	r3, r3, #32
 8003694:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 8003696:	2b00      	cmp	r3, #0
 8003698:	d111      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 800369a:	7d3b      	ldrb	r3, [r7, #20]
 800369c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036a0:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10b      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80036a6:	7d3b      	ldrb	r3, [r7, #20]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d105      	bne.n	80036be <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U))
 80036b2:	7d3b      	ldrb	r3, [r7, #20]
 80036b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80036b8:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d004      	beq.n	80036c8 <lsm6dsl_pin_int1_route_set+0x29e>
    {
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 80036be:	7b3b      	ldrb	r3, [r7, #12]
 80036c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036c4:	733b      	strb	r3, [r7, #12]
 80036c6:	e003      	b.n	80036d0 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else
    {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 80036c8:	7b3b      	ldrb	r3, [r7, #12]
 80036ca:	f36f 13c7 	bfc	r3, #7, #1
 80036ce:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0)
 80036d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d107      	bne.n	80036e6 <lsm6dsl_pin_int1_route_set+0x2bc>
  {
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 80036d6:	f107 020c 	add.w	r2, r7, #12
 80036da:	2301      	movs	r3, #1
 80036dc:	2158      	movs	r1, #88	@ 0x58
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff fd16 	bl	8003110 <lsm6dsl_write_reg>
 80036e4:	6278      	str	r0, [r7, #36]	@ 0x24
  }

  return ret;
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3728      	adds	r7, #40	@ 0x28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
 80036fa:	f107 0214 	add.w	r2, r7, #20
 80036fe:	2301      	movs	r3, #1
 8003700:	210d      	movs	r1, #13
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff fcec 	bl	80030e0 <lsm6dsl_read_reg>
 8003708:	61f8      	str	r0, [r7, #28]

  if (ret == 0)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 80c0 	bne.w	8003892 <lsm6dsl_pin_int1_route_get+0x1a2>
  {
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8003712:	7d3b      	ldrb	r3, [r7, #20]
 8003714:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003718:	b2d9      	uxtb	r1, r3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	7813      	ldrb	r3, [r2, #0]
 800371e:	f361 0300 	bfi	r3, r1, #0, #1
 8003722:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8003724:	7d3b      	ldrb	r3, [r7, #20]
 8003726:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800372a:	b2d9      	uxtb	r1, r3
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	7813      	ldrb	r3, [r2, #0]
 8003730:	f361 0341 	bfi	r3, r1, #1, #1
 8003734:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8003736:	7d3b      	ldrb	r3, [r7, #20]
 8003738:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800373c:	b2d9      	uxtb	r1, r3
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	7813      	ldrb	r3, [r2, #0]
 8003742:	f361 0382 	bfi	r3, r1, #2, #1
 8003746:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 8003748:	7d3b      	ldrb	r3, [r7, #20]
 800374a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800374e:	b2d9      	uxtb	r1, r3
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	7813      	ldrb	r3, [r2, #0]
 8003754:	f361 03c3 	bfi	r3, r1, #3, #1
 8003758:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 800375a:	7d3b      	ldrb	r3, [r7, #20]
 800375c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003760:	b2d9      	uxtb	r1, r3
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	7813      	ldrb	r3, [r2, #0]
 8003766:	f361 1304 	bfi	r3, r1, #4, #1
 800376a:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 800376c:	7d3b      	ldrb	r3, [r7, #20]
 800376e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003772:	b2d9      	uxtb	r1, r3
 8003774:	683a      	ldr	r2, [r7, #0]
 8003776:	7813      	ldrb	r3, [r2, #0]
 8003778:	f361 1345 	bfi	r3, r1, #5, #1
 800377c:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 800377e:	7d3b      	ldrb	r3, [r7, #20]
 8003780:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8003784:	b2d9      	uxtb	r1, r3
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	7813      	ldrb	r3, [r2, #0]
 800378a:	f361 1386 	bfi	r3, r1, #6, #1
 800378e:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 8003790:	7d3b      	ldrb	r3, [r7, #20]
 8003792:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003796:	b2d9      	uxtb	r1, r3
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	7813      	ldrb	r3, [r2, #0]
 800379c:	f361 13c7 	bfi	r3, r1, #7, #1
 80037a0:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80037a2:	f107 0210 	add.w	r2, r7, #16
 80037a6:	2301      	movs	r3, #1
 80037a8:	215e      	movs	r1, #94	@ 0x5e
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff fc98 	bl	80030e0 <lsm6dsl_read_reg>
 80037b0:	61f8      	str	r0, [r7, #28]

    if (ret == 0)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d16c      	bne.n	8003892 <lsm6dsl_pin_int1_route_get+0x1a2>
    {
      val->int1_timer       = md1_cfg.int1_timer;
 80037b8:	7c3b      	ldrb	r3, [r7, #16]
 80037ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80037be:	b2d9      	uxtb	r1, r3
 80037c0:	683a      	ldr	r2, [r7, #0]
 80037c2:	7853      	ldrb	r3, [r2, #1]
 80037c4:	f361 0300 	bfi	r3, r1, #0, #1
 80037c8:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 80037ca:	7c3b      	ldrb	r3, [r7, #16]
 80037cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80037d0:	b2d9      	uxtb	r1, r3
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	7853      	ldrb	r3, [r2, #1]
 80037d6:	f361 0341 	bfi	r3, r1, #1, #1
 80037da:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 80037dc:	7c3b      	ldrb	r3, [r7, #16]
 80037de:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80037e2:	b2d9      	uxtb	r1, r3
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	7853      	ldrb	r3, [r2, #1]
 80037e8:	f361 0382 	bfi	r3, r1, #2, #1
 80037ec:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 80037ee:	7c3b      	ldrb	r3, [r7, #16]
 80037f0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80037f4:	b2d9      	uxtb	r1, r3
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	7853      	ldrb	r3, [r2, #1]
 80037fa:	f361 03c3 	bfi	r3, r1, #3, #1
 80037fe:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8003800:	7c3b      	ldrb	r3, [r7, #16]
 8003802:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003806:	b2d9      	uxtb	r1, r3
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	7853      	ldrb	r3, [r2, #1]
 800380c:	f361 1304 	bfi	r3, r1, #4, #1
 8003810:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8003812:	7c3b      	ldrb	r3, [r7, #16]
 8003814:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003818:	b2d9      	uxtb	r1, r3
 800381a:	683a      	ldr	r2, [r7, #0]
 800381c:	7853      	ldrb	r3, [r2, #1]
 800381e:	f361 1345 	bfi	r3, r1, #5, #1
 8003822:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8003824:	7c3b      	ldrb	r3, [r7, #16]
 8003826:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800382a:	b2d9      	uxtb	r1, r3
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	7853      	ldrb	r3, [r2, #1]
 8003830:	f361 1386 	bfi	r3, r1, #6, #1
 8003834:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8003836:	7c3b      	ldrb	r3, [r7, #16]
 8003838:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800383c:	b2d9      	uxtb	r1, r3
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	7853      	ldrb	r3, [r2, #1]
 8003842:	f361 13c7 	bfi	r3, r1, #7, #1
 8003846:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 8003848:	f107 020c 	add.w	r2, r7, #12
 800384c:	2301      	movs	r3, #1
 800384e:	2113      	movs	r1, #19
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff fc45 	bl	80030e0 <lsm6dsl_read_reg>
 8003856:	61f8      	str	r0, [r7, #28]

      if (ret == 0)
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d119      	bne.n	8003892 <lsm6dsl_pin_int1_route_get+0x1a2>
      {
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 800385e:	7b3b      	ldrb	r3, [r7, #12]
 8003860:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003864:	b2d9      	uxtb	r1, r3
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	7893      	ldrb	r3, [r2, #2]
 800386a:	f361 0300 	bfi	r3, r1, #0, #1
 800386e:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8003870:	f107 0218 	add.w	r2, r7, #24
 8003874:	2301      	movs	r3, #1
 8003876:	211a      	movs	r1, #26
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff fc31 	bl	80030e0 <lsm6dsl_read_reg>
 800387e:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 8003880:	7e3b      	ldrb	r3, [r7, #24]
 8003882:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8003886:	b2d9      	uxtb	r1, r3
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	7893      	ldrb	r3, [r2, #2]
 800388c:	f361 0300 	bfi	r3, r1, #0, #1
 8003890:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 8003892:	69fb      	ldr	r3, [r7, #28]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3720      	adds	r7, #32
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;

  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80038a8:	f107 0208 	add.w	r2, r7, #8
 80038ac:	2301      	movs	r3, #1
 80038ae:	210a      	movs	r1, #10
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff fc15 	bl	80030e0 <lsm6dsl_read_reg>
 80038b6:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10f      	bne.n	80038de <lsm6dsl_fifo_mode_set+0x42>
  {
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	7a3b      	ldrb	r3, [r7, #8]
 80038c8:	f362 0302 	bfi	r3, r2, #0, #3
 80038cc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80038ce:	f107 0208 	add.w	r2, r7, #8
 80038d2:	2301      	movs	r3, #1
 80038d4:	210a      	movs	r1, #10
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f7ff fc1a 	bl	8003110 <lsm6dsl_write_reg>
 80038dc:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 80038de:	68fb      	ldr	r3, [r7, #12]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3710      	adds	r7, #16
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038f2:	2003      	movs	r0, #3
 80038f4:	f000 f960 	bl	8003bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038f8:	200f      	movs	r0, #15
 80038fa:	f000 f80d 	bl	8003918 <HAL_InitTick>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d002      	beq.n	800390a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	71fb      	strb	r3, [r7, #7]
 8003908:	e001      	b.n	800390e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800390a:	f7fe f89f 	bl	8001a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800390e:	79fb      	ldrb	r3, [r7, #7]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3708      	adds	r7, #8
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003924:	4b17      	ldr	r3, [pc, #92]	@ (8003984 <HAL_InitTick+0x6c>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d023      	beq.n	8003974 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800392c:	4b16      	ldr	r3, [pc, #88]	@ (8003988 <HAL_InitTick+0x70>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	4b14      	ldr	r3, [pc, #80]	@ (8003984 <HAL_InitTick+0x6c>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	4619      	mov	r1, r3
 8003936:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800393a:	fbb3 f3f1 	udiv	r3, r3, r1
 800393e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003942:	4618      	mov	r0, r3
 8003944:	f000 f96d 	bl	8003c22 <HAL_SYSTICK_Config>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10f      	bne.n	800396e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2b0f      	cmp	r3, #15
 8003952:	d809      	bhi.n	8003968 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003954:	2200      	movs	r2, #0
 8003956:	6879      	ldr	r1, [r7, #4]
 8003958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800395c:	f000 f937 	bl	8003bce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003960:	4a0a      	ldr	r2, [pc, #40]	@ (800398c <HAL_InitTick+0x74>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
 8003966:	e007      	b.n	8003978 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	73fb      	strb	r3, [r7, #15]
 800396c:	e004      	b.n	8003978 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
 8003972:	e001      	b.n	8003978 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003978:	7bfb      	ldrb	r3, [r7, #15]
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	2000002c 	.word	0x2000002c
 8003988:	20000010 	.word	0x20000010
 800398c:	20000028 	.word	0x20000028

08003990 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003994:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_IncTick+0x20>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	461a      	mov	r2, r3
 800399a:	4b06      	ldr	r3, [pc, #24]	@ (80039b4 <HAL_IncTick+0x24>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4413      	add	r3, r2
 80039a0:	4a04      	ldr	r2, [pc, #16]	@ (80039b4 <HAL_IncTick+0x24>)
 80039a2:	6013      	str	r3, [r2, #0]
}
 80039a4:	bf00      	nop
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	2000002c 	.word	0x2000002c
 80039b4:	20000e84 	.word	0x20000e84

080039b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return uwTick;
 80039bc:	4b03      	ldr	r3, [pc, #12]	@ (80039cc <HAL_GetTick+0x14>)
 80039be:	681b      	ldr	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000e84 	.word	0x20000e84

080039d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039d8:	f7ff ffee 	bl	80039b8 <HAL_GetTick>
 80039dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e8:	d005      	beq.n	80039f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80039ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003a14 <HAL_Delay+0x44>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	461a      	mov	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	4413      	add	r3, r2
 80039f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039f6:	bf00      	nop
 80039f8:	f7ff ffde 	bl	80039b8 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d8f7      	bhi.n	80039f8 <HAL_Delay+0x28>
  {
  }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	2000002c 	.word	0x2000002c

08003a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a28:	4b0c      	ldr	r3, [pc, #48]	@ (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003a34:	4013      	ands	r3, r2
 8003a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003a44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a4a:	4a04      	ldr	r2, [pc, #16]	@ (8003a5c <__NVIC_SetPriorityGrouping+0x44>)
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	60d3      	str	r3, [r2, #12]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	e000ed00 	.word	0xe000ed00

08003a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a64:	4b04      	ldr	r3, [pc, #16]	@ (8003a78 <__NVIC_GetPriorityGrouping+0x18>)
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	0a1b      	lsrs	r3, r3, #8
 8003a6a:	f003 0307 	and.w	r3, r3, #7
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	e000ed00 	.word	0xe000ed00

08003a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	db0b      	blt.n	8003aa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8e:	79fb      	ldrb	r3, [r7, #7]
 8003a90:	f003 021f 	and.w	r2, r3, #31
 8003a94:	4907      	ldr	r1, [pc, #28]	@ (8003ab4 <__NVIC_EnableIRQ+0x38>)
 8003a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a9a:	095b      	lsrs	r3, r3, #5
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	6039      	str	r1, [r7, #0]
 8003ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	db0a      	blt.n	8003ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	b2da      	uxtb	r2, r3
 8003ad0:	490c      	ldr	r1, [pc, #48]	@ (8003b04 <__NVIC_SetPriority+0x4c>)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	0112      	lsls	r2, r2, #4
 8003ad8:	b2d2      	uxtb	r2, r2
 8003ada:	440b      	add	r3, r1
 8003adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ae0:	e00a      	b.n	8003af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	4908      	ldr	r1, [pc, #32]	@ (8003b08 <__NVIC_SetPriority+0x50>)
 8003ae8:	79fb      	ldrb	r3, [r7, #7]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	3b04      	subs	r3, #4
 8003af0:	0112      	lsls	r2, r2, #4
 8003af2:	b2d2      	uxtb	r2, r2
 8003af4:	440b      	add	r3, r1
 8003af6:	761a      	strb	r2, [r3, #24]
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	e000e100 	.word	0xe000e100
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b089      	sub	sp, #36	@ 0x24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f1c3 0307 	rsb	r3, r3, #7
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	bf28      	it	cs
 8003b2a:	2304      	movcs	r3, #4
 8003b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3304      	adds	r3, #4
 8003b32:	2b06      	cmp	r3, #6
 8003b34:	d902      	bls.n	8003b3c <NVIC_EncodePriority+0x30>
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	3b03      	subs	r3, #3
 8003b3a:	e000      	b.n	8003b3e <NVIC_EncodePriority+0x32>
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4a:	43da      	mvns	r2, r3
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	401a      	ands	r2, r3
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b5e:	43d9      	mvns	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b64:	4313      	orrs	r3, r2
         );
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3724      	adds	r7, #36	@ 0x24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b84:	d301      	bcc.n	8003b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b86:	2301      	movs	r3, #1
 8003b88:	e00f      	b.n	8003baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb4 <SysTick_Config+0x40>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b92:	210f      	movs	r1, #15
 8003b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b98:	f7ff ff8e 	bl	8003ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <SysTick_Config+0x40>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ba2:	4b04      	ldr	r3, [pc, #16]	@ (8003bb4 <SysTick_Config+0x40>)
 8003ba4:	2207      	movs	r2, #7
 8003ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	e000e010 	.word	0xe000e010

08003bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f7ff ff29 	bl	8003a18 <__NVIC_SetPriorityGrouping>
}
 8003bc6:	bf00      	nop
 8003bc8:	3708      	adds	r7, #8
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b086      	sub	sp, #24
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003be0:	f7ff ff3e 	bl	8003a60 <__NVIC_GetPriorityGrouping>
 8003be4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68b9      	ldr	r1, [r7, #8]
 8003bea:	6978      	ldr	r0, [r7, #20]
 8003bec:	f7ff ff8e 	bl	8003b0c <NVIC_EncodePriority>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff ff5d 	bl	8003ab8 <__NVIC_SetPriority>
}
 8003bfe:	bf00      	nop
 8003c00:	3718      	adds	r7, #24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b082      	sub	sp, #8
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ff31 	bl	8003a7c <__NVIC_EnableIRQ>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b082      	sub	sp, #8
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7ff ffa2 	bl	8003b74 <SysTick_Config>
 8003c30:	4603      	mov	r3, r0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3708      	adds	r7, #8
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
	...

08003c3c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b082      	sub	sp, #8
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d101      	bne.n	8003c4e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0ac      	b.n	8003da8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 f8b2 	bl	8003dbc <DFSDM_GetChannelFromInstance>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4a55      	ldr	r2, [pc, #340]	@ (8003db0 <HAL_DFSDM_ChannelInit+0x174>)
 8003c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d001      	beq.n	8003c68 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e09f      	b.n	8003da8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7fd ff17 	bl	8001a9c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003c6e:	4b51      	ldr	r3, [pc, #324]	@ (8003db4 <HAL_DFSDM_ChannelInit+0x178>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	4a4f      	ldr	r2, [pc, #316]	@ (8003db4 <HAL_DFSDM_ChannelInit+0x178>)
 8003c76:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003c78:	4b4e      	ldr	r3, [pc, #312]	@ (8003db4 <HAL_DFSDM_ChannelInit+0x178>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d125      	bne.n	8003ccc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003c80:	4b4d      	ldr	r3, [pc, #308]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a4c      	ldr	r2, [pc, #304]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c8a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4948      	ldr	r1, [pc, #288]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003c9a:	4b47      	ldr	r3, [pc, #284]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a46      	ldr	r2, [pc, #280]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003ca0:	f423 037f 	bic.w	r3, r3, #16711680	@ 0xff0000
 8003ca4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	791b      	ldrb	r3, [r3, #4]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d108      	bne.n	8003cc0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003cae:	4b42      	ldr	r3, [pc, #264]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	041b      	lsls	r3, r3, #16
 8003cba:	493f      	ldr	r1, [pc, #252]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003cc0:	4b3d      	ldr	r3, [pc, #244]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a3c      	ldr	r2, [pc, #240]	@ (8003db8 <HAL_DFSDM_ChannelInit+0x17c>)
 8003cc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cca:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 8003cda:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6819      	ldr	r1, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003cea:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003cf0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 020f 	bic.w	r2, r2, #15
 8003d08:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003d18:	431a      	orrs	r2, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 8003d30:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6899      	ldr	r1, [r3, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f002 0207 	and.w	r2, r2, #7
 8003d5c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6859      	ldr	r1, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d68:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d6e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003d70:	431a      	orrs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d88:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f810 	bl	8003dbc <DFSDM_GetChannelFromInstance>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	4904      	ldr	r1, [pc, #16]	@ (8003db0 <HAL_DFSDM_ChannelInit+0x174>)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	20000e8c 	.word	0x20000e8c
 8003db4:	20000e88 	.word	0x20000e88
 8003db8:	40016000 	.word	0x40016000

08003dbc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e38 <DFSDM_GetChannelFromInstance+0x7c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d102      	bne.n	8003dd2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	e02b      	b.n	8003e2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a19      	ldr	r2, [pc, #100]	@ (8003e3c <DFSDM_GetChannelFromInstance+0x80>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d102      	bne.n	8003de0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]
 8003dde:	e024      	b.n	8003e2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	4a17      	ldr	r2, [pc, #92]	@ (8003e40 <DFSDM_GetChannelFromInstance+0x84>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d102      	bne.n	8003dee <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003de8:	2302      	movs	r3, #2
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e01d      	b.n	8003e2a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a14      	ldr	r2, [pc, #80]	@ (8003e44 <DFSDM_GetChannelFromInstance+0x88>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d102      	bne.n	8003dfc <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003df6:	2304      	movs	r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e016      	b.n	8003e2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a12      	ldr	r2, [pc, #72]	@ (8003e48 <DFSDM_GetChannelFromInstance+0x8c>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d102      	bne.n	8003e0a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003e04:	2305      	movs	r3, #5
 8003e06:	60fb      	str	r3, [r7, #12]
 8003e08:	e00f      	b.n	8003e2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8003e4c <DFSDM_GetChannelFromInstance+0x90>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d102      	bne.n	8003e18 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003e12:	2306      	movs	r3, #6
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	e008      	b.n	8003e2a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e50 <DFSDM_GetChannelFromInstance+0x94>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d102      	bne.n	8003e26 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003e20:	2307      	movs	r3, #7
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	e001      	b.n	8003e2a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003e26:	2303      	movs	r3, #3
 8003e28:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	40016000 	.word	0x40016000
 8003e3c:	40016020 	.word	0x40016020
 8003e40:	40016040 	.word	0x40016040
 8003e44:	40016080 	.word	0x40016080
 8003e48:	400160a0 	.word	0x400160a0
 8003e4c:	400160c0 	.word	0x400160c0
 8003e50:	400160e0 	.word	0x400160e0

08003e54 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8003e66:	7afb      	ldrb	r3, [r7, #11]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	605a      	str	r2, [r3, #4]
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	75fb      	strb	r3, [r7, #23]
      break;
 8003e78:	bf00      	nop
  }

  return status;
 8003e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e003      	b.n	8003ea4 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2201      	movs	r2, #1
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <HAL_EXTI_IRQHandler+0x5c>)
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4798      	blx	r3
    }
  }
}
 8003f02:	bf00      	nop
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40010414 	.word	0x40010414

08003f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f1e:	e17f      	b.n	8004220 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	2101      	movs	r1, #1
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 8171 	beq.w	800421a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d005      	beq.n	8003f50 <HAL_GPIO_Init+0x40>
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d130      	bne.n	8003fb2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	43db      	mvns	r3, r3
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4013      	ands	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68da      	ldr	r2, [r3, #12]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f86:	2201      	movs	r2, #1
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	693a      	ldr	r2, [r7, #16]
 8003f92:	4013      	ands	r3, r2
 8003f94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	091b      	lsrs	r3, r3, #4
 8003f9c:	f003 0201 	and.w	r2, r3, #1
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	693a      	ldr	r2, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d118      	bne.n	8003ff0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	693a      	ldr	r2, [r7, #16]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	08db      	lsrs	r3, r3, #3
 8003fda:	f003 0201 	and.w	r2, r3, #1
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	693a      	ldr	r2, [r7, #16]
 8003fee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d017      	beq.n	800402c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	2203      	movs	r2, #3
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
 800400c:	43db      	mvns	r3, r3
 800400e:	693a      	ldr	r2, [r7, #16]
 8004010:	4013      	ands	r3, r2
 8004012:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	689a      	ldr	r2, [r3, #8]
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0303 	and.w	r3, r3, #3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d123      	bne.n	8004080 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	08da      	lsrs	r2, r3, #3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	3208      	adds	r2, #8
 8004040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004044:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	220f      	movs	r2, #15
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4013      	ands	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	691a      	ldr	r2, [r3, #16]
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	08da      	lsrs	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3208      	adds	r2, #8
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	005b      	lsls	r3, r3, #1
 800408a:	2203      	movs	r2, #3
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	43db      	mvns	r3, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	4013      	ands	r3, r2
 8004096:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f003 0203 	and.w	r2, r3, #3
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	fa02 f303 	lsl.w	r3, r2, r3
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80ac 	beq.w	800421a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004240 <HAL_GPIO_Init+0x330>)
 80040c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004240 <HAL_GPIO_Init+0x330>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80040ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004240 <HAL_GPIO_Init+0x330>)
 80040d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80040da:	4a5a      	ldr	r2, [pc, #360]	@ (8004244 <HAL_GPIO_Init+0x334>)
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	089b      	lsrs	r3, r3, #2
 80040e0:	3302      	adds	r3, #2
 80040e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	220f      	movs	r2, #15
 80040f2:	fa02 f303 	lsl.w	r3, r2, r3
 80040f6:	43db      	mvns	r3, r3
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	4013      	ands	r3, r2
 80040fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004104:	d025      	beq.n	8004152 <HAL_GPIO_Init+0x242>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4f      	ldr	r2, [pc, #316]	@ (8004248 <HAL_GPIO_Init+0x338>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <HAL_GPIO_Init+0x23e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4e      	ldr	r2, [pc, #312]	@ (800424c <HAL_GPIO_Init+0x33c>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d019      	beq.n	800414a <HAL_GPIO_Init+0x23a>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a4d      	ldr	r2, [pc, #308]	@ (8004250 <HAL_GPIO_Init+0x340>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x236>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a4c      	ldr	r2, [pc, #304]	@ (8004254 <HAL_GPIO_Init+0x344>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x232>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a4b      	ldr	r2, [pc, #300]	@ (8004258 <HAL_GPIO_Init+0x348>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x22e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a4a      	ldr	r2, [pc, #296]	@ (800425c <HAL_GPIO_Init+0x34c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x22a>
 8004136:	2306      	movs	r3, #6
 8004138:	e00c      	b.n	8004154 <HAL_GPIO_Init+0x244>
 800413a:	2307      	movs	r3, #7
 800413c:	e00a      	b.n	8004154 <HAL_GPIO_Init+0x244>
 800413e:	2305      	movs	r3, #5
 8004140:	e008      	b.n	8004154 <HAL_GPIO_Init+0x244>
 8004142:	2304      	movs	r3, #4
 8004144:	e006      	b.n	8004154 <HAL_GPIO_Init+0x244>
 8004146:	2303      	movs	r3, #3
 8004148:	e004      	b.n	8004154 <HAL_GPIO_Init+0x244>
 800414a:	2302      	movs	r3, #2
 800414c:	e002      	b.n	8004154 <HAL_GPIO_Init+0x244>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <HAL_GPIO_Init+0x244>
 8004152:	2300      	movs	r3, #0
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	f002 0203 	and.w	r2, r2, #3
 800415a:	0092      	lsls	r2, r2, #2
 800415c:	4093      	lsls	r3, r2
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004164:	4937      	ldr	r1, [pc, #220]	@ (8004244 <HAL_GPIO_Init+0x334>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	089b      	lsrs	r3, r3, #2
 800416a:	3302      	adds	r3, #2
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004172:	4b3b      	ldr	r3, [pc, #236]	@ (8004260 <HAL_GPIO_Init+0x350>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43db      	mvns	r3, r3
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004196:	4a32      	ldr	r2, [pc, #200]	@ (8004260 <HAL_GPIO_Init+0x350>)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800419c:	4b30      	ldr	r3, [pc, #192]	@ (8004260 <HAL_GPIO_Init+0x350>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43db      	mvns	r3, r3
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041c0:	4a27      	ldr	r2, [pc, #156]	@ (8004260 <HAL_GPIO_Init+0x350>)
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80041c6:	4b26      	ldr	r3, [pc, #152]	@ (8004260 <HAL_GPIO_Init+0x350>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	43db      	mvns	r3, r3
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	4013      	ands	r3, r2
 80041d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80041e2:	693a      	ldr	r2, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041ea:	4a1d      	ldr	r2, [pc, #116]	@ (8004260 <HAL_GPIO_Init+0x350>)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80041f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004260 <HAL_GPIO_Init+0x350>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	43db      	mvns	r3, r3
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4013      	ands	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004214:	4a12      	ldr	r2, [pc, #72]	@ (8004260 <HAL_GPIO_Init+0x350>)
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3301      	adds	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	fa22 f303 	lsr.w	r3, r2, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f ae78 	bne.w	8003f20 <HAL_GPIO_Init+0x10>
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40021000 	.word	0x40021000
 8004244:	40010000 	.word	0x40010000
 8004248:	48000400 	.word	0x48000400
 800424c:	48000800 	.word	0x48000800
 8004250:	48000c00 	.word	0x48000c00
 8004254:	48001000 	.word	0x48001000
 8004258:	48001400 	.word	0x48001400
 800425c:	48001800 	.word	0x48001800
 8004260:	40010400 	.word	0x40010400

08004264 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004272:	e0cd      	b.n	8004410 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004274:	2201      	movs	r2, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	683a      	ldr	r2, [r7, #0]
 800427e:	4013      	ands	r3, r2
 8004280:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f000 80c0 	beq.w	800440a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800428a:	4a68      	ldr	r2, [pc, #416]	@ (800442c <HAL_GPIO_DeInit+0x1c8>)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	3302      	adds	r3, #2
 8004292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004296:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	220f      	movs	r2, #15
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4013      	ands	r3, r2
 80042aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80042b2:	d025      	beq.n	8004300 <HAL_GPIO_DeInit+0x9c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a5e      	ldr	r2, [pc, #376]	@ (8004430 <HAL_GPIO_DeInit+0x1cc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d01f      	beq.n	80042fc <HAL_GPIO_DeInit+0x98>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a5d      	ldr	r2, [pc, #372]	@ (8004434 <HAL_GPIO_DeInit+0x1d0>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d019      	beq.n	80042f8 <HAL_GPIO_DeInit+0x94>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a5c      	ldr	r2, [pc, #368]	@ (8004438 <HAL_GPIO_DeInit+0x1d4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_GPIO_DeInit+0x90>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a5b      	ldr	r2, [pc, #364]	@ (800443c <HAL_GPIO_DeInit+0x1d8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d00d      	beq.n	80042f0 <HAL_GPIO_DeInit+0x8c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a5a      	ldr	r2, [pc, #360]	@ (8004440 <HAL_GPIO_DeInit+0x1dc>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d007      	beq.n	80042ec <HAL_GPIO_DeInit+0x88>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a59      	ldr	r2, [pc, #356]	@ (8004444 <HAL_GPIO_DeInit+0x1e0>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d101      	bne.n	80042e8 <HAL_GPIO_DeInit+0x84>
 80042e4:	2306      	movs	r3, #6
 80042e6:	e00c      	b.n	8004302 <HAL_GPIO_DeInit+0x9e>
 80042e8:	2307      	movs	r3, #7
 80042ea:	e00a      	b.n	8004302 <HAL_GPIO_DeInit+0x9e>
 80042ec:	2305      	movs	r3, #5
 80042ee:	e008      	b.n	8004302 <HAL_GPIO_DeInit+0x9e>
 80042f0:	2304      	movs	r3, #4
 80042f2:	e006      	b.n	8004302 <HAL_GPIO_DeInit+0x9e>
 80042f4:	2303      	movs	r3, #3
 80042f6:	e004      	b.n	8004302 <HAL_GPIO_DeInit+0x9e>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e002      	b.n	8004302 <HAL_GPIO_DeInit+0x9e>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <HAL_GPIO_DeInit+0x9e>
 8004300:	2300      	movs	r3, #0
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	f002 0203 	and.w	r2, r2, #3
 8004308:	0092      	lsls	r2, r2, #2
 800430a:	4093      	lsls	r3, r2
 800430c:	68fa      	ldr	r2, [r7, #12]
 800430e:	429a      	cmp	r2, r3
 8004310:	d132      	bne.n	8004378 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8004312:	4b4d      	ldr	r3, [pc, #308]	@ (8004448 <HAL_GPIO_DeInit+0x1e4>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	43db      	mvns	r3, r3
 800431a:	494b      	ldr	r1, [pc, #300]	@ (8004448 <HAL_GPIO_DeInit+0x1e4>)
 800431c:	4013      	ands	r3, r2
 800431e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8004320:	4b49      	ldr	r3, [pc, #292]	@ (8004448 <HAL_GPIO_DeInit+0x1e4>)
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	43db      	mvns	r3, r3
 8004328:	4947      	ldr	r1, [pc, #284]	@ (8004448 <HAL_GPIO_DeInit+0x1e4>)
 800432a:	4013      	ands	r3, r2
 800432c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800432e:	4b46      	ldr	r3, [pc, #280]	@ (8004448 <HAL_GPIO_DeInit+0x1e4>)
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	43db      	mvns	r3, r3
 8004336:	4944      	ldr	r1, [pc, #272]	@ (8004448 <HAL_GPIO_DeInit+0x1e4>)
 8004338:	4013      	ands	r3, r2
 800433a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800433c:	4b42      	ldr	r3, [pc, #264]	@ (8004448 <HAL_GPIO_DeInit+0x1e4>)
 800433e:	689a      	ldr	r2, [r3, #8]
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	43db      	mvns	r3, r3
 8004344:	4940      	ldr	r1, [pc, #256]	@ (8004448 <HAL_GPIO_DeInit+0x1e4>)
 8004346:	4013      	ands	r3, r2
 8004348:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f003 0303 	and.w	r3, r3, #3
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	220f      	movs	r2, #15
 8004354:	fa02 f303 	lsl.w	r3, r2, r3
 8004358:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800435a:	4a34      	ldr	r2, [pc, #208]	@ (800442c <HAL_GPIO_DeInit+0x1c8>)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	3302      	adds	r3, #2
 8004362:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	43da      	mvns	r2, r3
 800436a:	4830      	ldr	r0, [pc, #192]	@ (800442c <HAL_GPIO_DeInit+0x1c8>)
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	089b      	lsrs	r3, r3, #2
 8004370:	400a      	ands	r2, r1
 8004372:	3302      	adds	r3, #2
 8004374:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	2103      	movs	r1, #3
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	08da      	lsrs	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	3208      	adds	r2, #8
 8004394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	220f      	movs	r2, #15
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	43db      	mvns	r3, r3
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	08d2      	lsrs	r2, r2, #3
 80043ac:	4019      	ands	r1, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3208      	adds	r2, #8
 80043b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689a      	ldr	r2, [r3, #8]
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	005b      	lsls	r3, r3, #1
 80043be:	2103      	movs	r1, #3
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	43db      	mvns	r3, r3
 80043c6:	401a      	ands	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	2101      	movs	r1, #1
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	fa01 f303 	lsl.w	r3, r1, r3
 80043d8:	43db      	mvns	r3, r3
 80043da:	401a      	ands	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	2103      	movs	r1, #3
 80043ea:	fa01 f303 	lsl.w	r3, r1, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	401a      	ands	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fa:	2101      	movs	r1, #1
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004402:	43db      	mvns	r3, r3
 8004404:	401a      	ands	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3301      	adds	r3, #1
 800440e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	2b00      	cmp	r3, #0
 800441a:	f47f af2b 	bne.w	8004274 <HAL_GPIO_DeInit+0x10>
  }
}
 800441e:	bf00      	nop
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	40010000 	.word	0x40010000
 8004430:	48000400 	.word	0x48000400
 8004434:	48000800 	.word	0x48000800
 8004438:	48000c00 	.word	0x48000c00
 800443c:	48001000 	.word	0x48001000
 8004440:	48001400 	.word	0x48001400
 8004444:	48001800 	.word	0x48001800
 8004448:	40010400 	.word	0x40010400

0800444c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691a      	ldr	r2, [r3, #16]
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d002      	beq.n	800446a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
 8004468:	e001      	b.n	800446e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800446e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3714      	adds	r7, #20
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	807b      	strh	r3, [r7, #2]
 8004488:	4613      	mov	r3, r2
 800448a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800448c:	787b      	ldrb	r3, [r7, #1]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004492:	887a      	ldrh	r2, [r7, #2]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004498:	e002      	b.n	80044a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800449a:	887a      	ldrh	r2, [r7, #2]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	460b      	mov	r3, r1
 80044b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4013      	ands	r3, r2
 80044c4:	041a      	lsls	r2, r3, #16
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	43d9      	mvns	r1, r3
 80044ca:	887b      	ldrh	r3, [r7, #2]
 80044cc:	400b      	ands	r3, r1
 80044ce:	431a      	orrs	r2, r3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	619a      	str	r2, [r3, #24]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr

080044e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044ea:	4b08      	ldr	r3, [pc, #32]	@ (800450c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	88fb      	ldrh	r3, [r7, #6]
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044f6:	4a05      	ldr	r2, [pc, #20]	@ (800450c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044f8:	88fb      	ldrh	r3, [r7, #6]
 80044fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fd fa28 	bl	8001954 <HAL_GPIO_EXTI_Callback>
  }
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e08d      	b.n	800463e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004528:	b2db      	uxtb	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8b4 	bl	80046a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	@ 0x24
 8004540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0201 	bic.w	r2, r2, #1
 8004552:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004560:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004570:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689a      	ldr	r2, [r3, #8]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004586:	609a      	str	r2, [r3, #8]
 8004588:	e006      	b.n	8004598 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004596:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	2b02      	cmp	r3, #2
 800459e:	d108      	bne.n	80045b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	e007      	b.n	80045c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69d9      	ldr	r1, [r3, #28]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1a      	ldr	r2, [r3, #32]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	430a      	orrs	r2, r1
 800460e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0201 	orr.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e021      	b.n	800469c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2224      	movs	r2, #36	@ 0x24
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f821 	bl	80046b8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	4608      	mov	r0, r1
 80046d6:	4611      	mov	r1, r2
 80046d8:	461a      	mov	r2, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	817b      	strh	r3, [r7, #10]
 80046de:	460b      	mov	r3, r1
 80046e0:	813b      	strh	r3, [r7, #8]
 80046e2:	4613      	mov	r3, r2
 80046e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	f040 80f9 	bne.w	80048e6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d002      	beq.n	8004700 <HAL_I2C_Mem_Write+0x34>
 80046fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d105      	bne.n	800470c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004706:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0ed      	b.n	80048e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_I2C_Mem_Write+0x4e>
 8004716:	2302      	movs	r3, #2
 8004718:	e0e6      	b.n	80048e8 <HAL_I2C_Mem_Write+0x21c>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004722:	f7ff f949 	bl	80039b8 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	2319      	movs	r3, #25
 800472e:	2201      	movs	r2, #1
 8004730:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fadd 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0d1      	b.n	80048e8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2221      	movs	r2, #33	@ 0x21
 8004748:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2240      	movs	r2, #64	@ 0x40
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a3a      	ldr	r2, [r7, #32]
 800475e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004764:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800476c:	88f8      	ldrh	r0, [r7, #6]
 800476e:	893a      	ldrh	r2, [r7, #8]
 8004770:	8979      	ldrh	r1, [r7, #10]
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4603      	mov	r3, r0
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 f9ed 	bl	8004b5c <I2C_RequestMemoryWrite>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0a9      	b.n	80048e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004798:	b29b      	uxth	r3, r3
 800479a:	2bff      	cmp	r3, #255	@ 0xff
 800479c:	d90e      	bls.n	80047bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	22ff      	movs	r2, #255	@ 0xff
 80047a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	8979      	ldrh	r1, [r7, #10]
 80047ac:	2300      	movs	r3, #0
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 fc61 	bl	800507c <I2C_TransferConfig>
 80047ba:	e00f      	b.n	80047dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	8979      	ldrh	r1, [r7, #10]
 80047ce:	2300      	movs	r3, #0
 80047d0:	9300      	str	r3, [sp, #0]
 80047d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fc50 	bl	800507c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 fae0 	bl	8004da6 <I2C_WaitOnTXISFlagUntilTimeout>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d001      	beq.n	80047f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e07b      	b.n	80048e8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047f4:	781a      	ldrb	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	1c5a      	adds	r2, r3, #1
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800480a:	b29b      	uxth	r3, r3
 800480c:	3b01      	subs	r3, #1
 800480e:	b29a      	uxth	r2, r3
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004818:	3b01      	subs	r3, #1
 800481a:	b29a      	uxth	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d034      	beq.n	8004894 <HAL_I2C_Mem_Write+0x1c8>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482e:	2b00      	cmp	r3, #0
 8004830:	d130      	bne.n	8004894 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	2200      	movs	r2, #0
 800483a:	2180      	movs	r1, #128	@ 0x80
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	f000 fa59 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e04d      	b.n	80048e8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2bff      	cmp	r3, #255	@ 0xff
 8004854:	d90e      	bls.n	8004874 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	22ff      	movs	r2, #255	@ 0xff
 800485a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004860:	b2da      	uxtb	r2, r3
 8004862:	8979      	ldrh	r1, [r7, #10]
 8004864:	2300      	movs	r3, #0
 8004866:	9300      	str	r3, [sp, #0]
 8004868:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fc05 	bl	800507c <I2C_TransferConfig>
 8004872:	e00f      	b.n	8004894 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004878:	b29a      	uxth	r2, r3
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	b2da      	uxtb	r2, r3
 8004884:	8979      	ldrh	r1, [r7, #10]
 8004886:	2300      	movs	r3, #0
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fbf4 	bl	800507c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004898:	b29b      	uxth	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d19e      	bne.n	80047dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fac6 	bl	8004e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e01a      	b.n	80048e8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2220      	movs	r2, #32
 80048b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6859      	ldr	r1, [r3, #4]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	4b0a      	ldr	r3, [pc, #40]	@ (80048f0 <HAL_I2C_Mem_Write+0x224>)
 80048c6:	400b      	ands	r3, r1
 80048c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80048e2:	2300      	movs	r3, #0
 80048e4:	e000      	b.n	80048e8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80048e6:	2302      	movs	r3, #2
  }
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	fe00e800 	.word	0xfe00e800

080048f4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b088      	sub	sp, #32
 80048f8:	af02      	add	r7, sp, #8
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	4608      	mov	r0, r1
 80048fe:	4611      	mov	r1, r2
 8004900:	461a      	mov	r2, r3
 8004902:	4603      	mov	r3, r0
 8004904:	817b      	strh	r3, [r7, #10]
 8004906:	460b      	mov	r3, r1
 8004908:	813b      	strh	r3, [r7, #8]
 800490a:	4613      	mov	r3, r2
 800490c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b20      	cmp	r3, #32
 8004918:	f040 80fd 	bne.w	8004b16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <HAL_I2C_Mem_Read+0x34>
 8004922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800492e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0f1      	b.n	8004b18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800493a:	2b01      	cmp	r3, #1
 800493c:	d101      	bne.n	8004942 <HAL_I2C_Mem_Read+0x4e>
 800493e:	2302      	movs	r3, #2
 8004940:	e0ea      	b.n	8004b18 <HAL_I2C_Mem_Read+0x224>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800494a:	f7ff f835 	bl	80039b8 <HAL_GetTick>
 800494e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	2319      	movs	r3, #25
 8004956:	2201      	movs	r2, #1
 8004958:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f9c9 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e0d5      	b.n	8004b18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2222      	movs	r2, #34	@ 0x22
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2240      	movs	r2, #64	@ 0x40
 8004978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6a3a      	ldr	r2, [r7, #32]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800498c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004994:	88f8      	ldrh	r0, [r7, #6]
 8004996:	893a      	ldrh	r2, [r7, #8]
 8004998:	8979      	ldrh	r1, [r7, #10]
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	9301      	str	r3, [sp, #4]
 800499e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	4603      	mov	r3, r0
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 f92d 	bl	8004c04 <I2C_RequestMemoryRead>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0ad      	b.n	8004b18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2bff      	cmp	r3, #255	@ 0xff
 80049c4:	d90e      	bls.n	80049e4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	8979      	ldrh	r1, [r7, #10]
 80049d4:	4b52      	ldr	r3, [pc, #328]	@ (8004b20 <HAL_I2C_Mem_Read+0x22c>)
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fb4d 	bl	800507c <I2C_TransferConfig>
 80049e2:	e00f      	b.n	8004a04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e8:	b29a      	uxth	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	8979      	ldrh	r1, [r7, #10]
 80049f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004b20 <HAL_I2C_Mem_Read+0x22c>)
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 fb3c 	bl	800507c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2104      	movs	r1, #4
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 f970 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e07c      	b.n	8004b18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a54:	b29b      	uxth	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d034      	beq.n	8004ac4 <HAL_I2C_Mem_Read+0x1d0>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d130      	bne.n	8004ac4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2180      	movs	r1, #128	@ 0x80
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 f941 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e04d      	b.n	8004b18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	2bff      	cmp	r3, #255	@ 0xff
 8004a84:	d90e      	bls.n	8004aa4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a90:	b2da      	uxtb	r2, r3
 8004a92:	8979      	ldrh	r1, [r7, #10]
 8004a94:	2300      	movs	r3, #0
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 faed 	bl	800507c <I2C_TransferConfig>
 8004aa2:	e00f      	b.n	8004ac4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	8979      	ldrh	r1, [r7, #10]
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004abe:	68f8      	ldr	r0, [r7, #12]
 8004ac0:	f000 fadc 	bl	800507c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d19a      	bne.n	8004a04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ace:	697a      	ldr	r2, [r7, #20]
 8004ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ad2:	68f8      	ldr	r0, [r7, #12]
 8004ad4:	f000 f9ae 	bl	8004e34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e01a      	b.n	8004b18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6859      	ldr	r1, [r3, #4]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	4b0b      	ldr	r3, [pc, #44]	@ (8004b24 <HAL_I2C_Mem_Read+0x230>)
 8004af6:	400b      	ands	r3, r1
 8004af8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	e000      	b.n	8004b18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b16:	2302      	movs	r3, #2
  }
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	80002400 	.word	0x80002400
 8004b24:	fe00e800 	.word	0xfe00e800

08004b28 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b36:	b2db      	uxtb	r3, r3
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	4608      	mov	r0, r1
 8004b66:	4611      	mov	r1, r2
 8004b68:	461a      	mov	r2, r3
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	817b      	strh	r3, [r7, #10]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	813b      	strh	r3, [r7, #8]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004b76:	88fb      	ldrh	r3, [r7, #6]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	8979      	ldrh	r1, [r7, #10]
 8004b7c:	4b20      	ldr	r3, [pc, #128]	@ (8004c00 <I2C_RequestMemoryWrite+0xa4>)
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fa79 	bl	800507c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b8a:	69fa      	ldr	r2, [r7, #28]
 8004b8c:	69b9      	ldr	r1, [r7, #24]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 f909 	bl	8004da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e02c      	b.n	8004bf8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b9e:	88fb      	ldrh	r3, [r7, #6]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ba4:	893b      	ldrh	r3, [r7, #8]
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bae:	e015      	b.n	8004bdc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004bb0:	893b      	ldrh	r3, [r7, #8]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	69b9      	ldr	r1, [r7, #24]
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f000 f8ef 	bl	8004da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e012      	b.n	8004bf8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004bd2:	893b      	ldrh	r3, [r7, #8]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2200      	movs	r2, #0
 8004be4:	2180      	movs	r1, #128	@ 0x80
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 f884 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	80002000 	.word	0x80002000

08004c04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af02      	add	r7, sp, #8
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	4608      	mov	r0, r1
 8004c0e:	4611      	mov	r1, r2
 8004c10:	461a      	mov	r2, r3
 8004c12:	4603      	mov	r3, r0
 8004c14:	817b      	strh	r3, [r7, #10]
 8004c16:	460b      	mov	r3, r1
 8004c18:	813b      	strh	r3, [r7, #8]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c1e:	88fb      	ldrh	r3, [r7, #6]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	8979      	ldrh	r1, [r7, #10]
 8004c24:	4b20      	ldr	r3, [pc, #128]	@ (8004ca8 <I2C_RequestMemoryRead+0xa4>)
 8004c26:	9300      	str	r3, [sp, #0]
 8004c28:	2300      	movs	r3, #0
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fa26 	bl	800507c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c30:	69fa      	ldr	r2, [r7, #28]
 8004c32:	69b9      	ldr	r1, [r7, #24]
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f8b6 	bl	8004da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e02c      	b.n	8004c9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c44:	88fb      	ldrh	r3, [r7, #6]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d105      	bne.n	8004c56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c4a:	893b      	ldrh	r3, [r7, #8]
 8004c4c:	b2da      	uxtb	r2, r3
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c54:	e015      	b.n	8004c82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c56:	893b      	ldrh	r3, [r7, #8]
 8004c58:	0a1b      	lsrs	r3, r3, #8
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	b2da      	uxtb	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	69b9      	ldr	r1, [r7, #24]
 8004c68:	68f8      	ldr	r0, [r7, #12]
 8004c6a:	f000 f89c 	bl	8004da6 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d001      	beq.n	8004c78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e012      	b.n	8004c9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c78:	893b      	ldrh	r3, [r7, #8]
 8004c7a:	b2da      	uxtb	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2140      	movs	r1, #64	@ 0x40
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f831 	bl	8004cf4 <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d001      	beq.n	8004c9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e000      	b.n	8004c9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	80002000 	.word	0x80002000

08004cac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	f003 0302 	and.w	r3, r3, #2
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d103      	bne.n	8004cca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d007      	beq.n	8004ce8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699a      	ldr	r2, [r3, #24]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f042 0201 	orr.w	r2, r2, #1
 8004ce6:	619a      	str	r2, [r3, #24]
  }
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d04:	e03b      	b.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d06:	69ba      	ldr	r2, [r7, #24]
 8004d08:	6839      	ldr	r1, [r7, #0]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 f8d6 	bl	8004ebc <I2C_IsErrorOccurred>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e041      	b.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d20:	d02d      	beq.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d22:	f7fe fe49 	bl	80039b8 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	683a      	ldr	r2, [r7, #0]
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d302      	bcc.n	8004d38 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d122      	bne.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	4013      	ands	r3, r2
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	bf0c      	ite	eq
 8004d48:	2301      	moveq	r3, #1
 8004d4a:	2300      	movne	r3, #0
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	79fb      	ldrb	r3, [r7, #7]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d113      	bne.n	8004d7e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f043 0220 	orr.w	r2, r3, #32
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e00f      	b.n	8004d9e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4013      	ands	r3, r2
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	bf0c      	ite	eq
 8004d8e:	2301      	moveq	r3, #1
 8004d90:	2300      	movne	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	461a      	mov	r2, r3
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d0b4      	beq.n	8004d06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3710      	adds	r7, #16
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}

08004da6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004da6:	b580      	push	{r7, lr}
 8004da8:	b084      	sub	sp, #16
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	60f8      	str	r0, [r7, #12]
 8004dae:	60b9      	str	r1, [r7, #8]
 8004db0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004db2:	e033      	b.n	8004e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	68b9      	ldr	r1, [r7, #8]
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f000 f87f 	bl	8004ebc <I2C_IsErrorOccurred>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e031      	b.n	8004e2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dce:	d025      	beq.n	8004e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd0:	f7fe fdf2 	bl	80039b8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d302      	bcc.n	8004de6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d11a      	bne.n	8004e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d013      	beq.n	8004e1c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df8:	f043 0220 	orr.w	r2, r3, #32
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2220      	movs	r2, #32
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e007      	b.n	8004e2c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d1c4      	bne.n	8004db4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e40:	e02f      	b.n	8004ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	68b9      	ldr	r1, [r7, #8]
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f838 	bl	8004ebc <I2C_IsErrorOccurred>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d001      	beq.n	8004e56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e02d      	b.n	8004eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e56:	f7fe fdaf 	bl	80039b8 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	68ba      	ldr	r2, [r7, #8]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d302      	bcc.n	8004e6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d11a      	bne.n	8004ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b20      	cmp	r3, #32
 8004e78:	d013      	beq.n	8004ea2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7e:	f043 0220 	orr.w	r2, r3, #32
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2220      	movs	r2, #32
 8004e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e007      	b.n	8004eb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	2b20      	cmp	r3, #32
 8004eae:	d1c8      	bne.n	8004e42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	@ 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d068      	beq.n	8004fba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2210      	movs	r2, #16
 8004eee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ef0:	e049      	b.n	8004f86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ef8:	d045      	beq.n	8004f86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004efa:	f7fe fd5d 	bl	80039b8 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d302      	bcc.n	8004f10 <I2C_IsErrorOccurred+0x54>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d13a      	bne.n	8004f86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f32:	d121      	bne.n	8004f78 <I2C_IsErrorOccurred+0xbc>
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f3a:	d01d      	beq.n	8004f78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004f3c:	7cfb      	ldrb	r3, [r7, #19]
 8004f3e:	2b20      	cmp	r3, #32
 8004f40:	d01a      	beq.n	8004f78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	685a      	ldr	r2, [r3, #4]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004f50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f52:	f7fe fd31 	bl	80039b8 <HAL_GetTick>
 8004f56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f58:	e00e      	b.n	8004f78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f5a:	f7fe fd2d 	bl	80039b8 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b19      	cmp	r3, #25
 8004f66:	d907      	bls.n	8004f78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f68:	6a3b      	ldr	r3, [r7, #32]
 8004f6a:	f043 0320 	orr.w	r3, r3, #32
 8004f6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004f76:	e006      	b.n	8004f86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b20      	cmp	r3, #32
 8004f84:	d1e9      	bne.n	8004f5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	699b      	ldr	r3, [r3, #24]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b20      	cmp	r3, #32
 8004f92:	d003      	beq.n	8004f9c <I2C_IsErrorOccurred+0xe0>
 8004f94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d0aa      	beq.n	8004ef2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	f043 0304 	orr.w	r3, r3, #4
 8004fb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00b      	beq.n	8004fe4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	f043 0301 	orr.w	r3, r3, #1
 8004fd2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00b      	beq.n	8005006 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	f043 0308 	orr.w	r3, r3, #8
 8004ff4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004ffe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00b      	beq.n	8005028 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005010:	6a3b      	ldr	r3, [r7, #32]
 8005012:	f043 0302 	orr.w	r3, r3, #2
 8005016:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005020:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005028:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01c      	beq.n	800506a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f7ff fe3b 	bl	8004cac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6859      	ldr	r1, [r3, #4]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	4b0d      	ldr	r3, [pc, #52]	@ (8005078 <I2C_IsErrorOccurred+0x1bc>)
 8005042:	400b      	ands	r3, r1
 8005044:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800504a:	6a3b      	ldr	r3, [r7, #32]
 800504c:	431a      	orrs	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800506a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800506e:	4618      	mov	r0, r3
 8005070:	3728      	adds	r7, #40	@ 0x28
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	fe00e800 	.word	0xfe00e800

0800507c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	460b      	mov	r3, r1
 8005088:	817b      	strh	r3, [r7, #10]
 800508a:	4613      	mov	r3, r2
 800508c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800508e:	897b      	ldrh	r3, [r7, #10]
 8005090:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005094:	7a7b      	ldrb	r3, [r7, #9]
 8005096:	041b      	lsls	r3, r3, #16
 8005098:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800509c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050aa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	6a3b      	ldr	r3, [r7, #32]
 80050b4:	0d5b      	lsrs	r3, r3, #21
 80050b6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80050ba:	4b08      	ldr	r3, [pc, #32]	@ (80050dc <I2C_TransferConfig+0x60>)
 80050bc:	430b      	orrs	r3, r1
 80050be:	43db      	mvns	r3, r3
 80050c0:	ea02 0103 	and.w	r1, r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80050ce:	bf00      	nop
 80050d0:	371c      	adds	r7, #28
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	03ff63ff 	.word	0x03ff63ff

080050e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	d138      	bne.n	8005168 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005100:	2302      	movs	r3, #2
 8005102:	e032      	b.n	800516a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2224      	movs	r2, #36	@ 0x24
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 0201 	bic.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005132:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	6819      	ldr	r1, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005164:	2300      	movs	r3, #0
 8005166:	e000      	b.n	800516a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005168:	2302      	movs	r3, #2
  }
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005176:	b480      	push	{r7}
 8005178:	b085      	sub	sp, #20
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
 800517e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b20      	cmp	r3, #32
 800518a:	d139      	bne.n	8005200 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005192:	2b01      	cmp	r3, #1
 8005194:	d101      	bne.n	800519a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005196:	2302      	movs	r3, #2
 8005198:	e033      	b.n	8005202 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2224      	movs	r2, #36	@ 0x24
 80051a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f022 0201 	bic.w	r2, r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80051c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f042 0201 	orr.w	r2, r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2220      	movs	r2, #32
 80051f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e000      	b.n	8005202 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005200:	2302      	movs	r3, #2
  }
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800520e:	b580      	push	{r7, lr}
 8005210:	b086      	sub	sp, #24
 8005212:	af02      	add	r7, sp, #8
 8005214:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e101      	b.n	8005424 <HAL_PCD_Init+0x216>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fc fd37 	bl	8001ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2203      	movs	r2, #3
 800523e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	719a      	strb	r2, [r3, #6]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f002 ff33 	bl	80080b8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6818      	ldr	r0, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	7c1a      	ldrb	r2, [r3, #16]
 800525a:	f88d 2000 	strb.w	r2, [sp]
 800525e:	3304      	adds	r3, #4
 8005260:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005262:	f002 fefc 	bl	800805e <USB_CoreInit>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_PCD_Init+0x6a>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2202      	movs	r2, #2
 8005270:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e0d5      	b.n	8005424 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2100      	movs	r1, #0
 800527e:	4618      	mov	r0, r3
 8005280:	f002 ff2b 	bl	80080da <USB_SetCurrentMode>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d005      	beq.n	8005296 <HAL_PCD_Init+0x88>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2202      	movs	r2, #2
 800528e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e0c6      	b.n	8005424 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005296:	2300      	movs	r3, #0
 8005298:	73fb      	strb	r3, [r7, #15]
 800529a:	e04a      	b.n	8005332 <HAL_PCD_Init+0x124>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800529c:	7bfa      	ldrb	r2, [r7, #15]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	3315      	adds	r3, #21
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	4613      	mov	r3, r2
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	440b      	add	r3, r1
 80052be:	3314      	adds	r3, #20
 80052c0:	7bfa      	ldrb	r2, [r7, #15]
 80052c2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052c4:	7bfa      	ldrb	r2, [r7, #15]
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
 80052c8:	b298      	uxth	r0, r3
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	332e      	adds	r3, #46	@ 0x2e
 80052d8:	4602      	mov	r2, r0
 80052da:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	4613      	mov	r3, r2
 80052e2:	00db      	lsls	r3, r3, #3
 80052e4:	4413      	add	r3, r2
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	440b      	add	r3, r1
 80052ea:	3318      	adds	r3, #24
 80052ec:	2200      	movs	r2, #0
 80052ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	4613      	mov	r3, r2
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	440b      	add	r3, r1
 80052fe:	331c      	adds	r3, #28
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005304:	7bfa      	ldrb	r2, [r7, #15]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	3320      	adds	r3, #32
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005318:	7bfa      	ldrb	r2, [r7, #15]
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4613      	mov	r3, r2
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	4413      	add	r3, r2
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	440b      	add	r3, r1
 8005326:	3324      	adds	r3, #36	@ 0x24
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800532c:	7bfb      	ldrb	r3, [r7, #15]
 800532e:	3301      	adds	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	791b      	ldrb	r3, [r3, #4]
 8005336:	7bfa      	ldrb	r2, [r7, #15]
 8005338:	429a      	cmp	r2, r3
 800533a:	d3af      	bcc.n	800529c <HAL_PCD_Init+0x8e>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800533c:	2300      	movs	r3, #0
 800533e:	73fb      	strb	r3, [r7, #15]
 8005340:	e044      	b.n	80053cc <HAL_PCD_Init+0x1be>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005342:	7bfa      	ldrb	r2, [r7, #15]
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4613      	mov	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005354:	2200      	movs	r2, #0
 8005356:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005358:	7bfa      	ldrb	r2, [r7, #15]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4413      	add	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800536a:	7bfa      	ldrb	r2, [r7, #15]
 800536c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800536e:	7bfa      	ldrb	r2, [r7, #15]
 8005370:	6879      	ldr	r1, [r7, #4]
 8005372:	4613      	mov	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	440b      	add	r3, r1
 800537c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005384:	7bfa      	ldrb	r2, [r7, #15]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800539a:	7bfa      	ldrb	r2, [r7, #15]
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80053ac:	2200      	movs	r2, #0
 80053ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80053b0:	7bfa      	ldrb	r2, [r7, #15]
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	4613      	mov	r3, r2
 80053b6:	00db      	lsls	r3, r3, #3
 80053b8:	4413      	add	r3, r2
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	440b      	add	r3, r1
 80053be:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80053c2:	2200      	movs	r2, #0
 80053c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053c6:	7bfb      	ldrb	r3, [r7, #15]
 80053c8:	3301      	adds	r3, #1
 80053ca:	73fb      	strb	r3, [r7, #15]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	791b      	ldrb	r3, [r3, #4]
 80053d0:	7bfa      	ldrb	r2, [r7, #15]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d3b5      	bcc.n	8005342 <HAL_PCD_Init+0x134>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6818      	ldr	r0, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7c1a      	ldrb	r2, [r3, #16]
 80053de:	f88d 2000 	strb.w	r2, [sp]
 80053e2:	3304      	adds	r3, #4
 80053e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053e6:	f002 fec5 	bl	8008174 <USB_DevInit>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_PCD_Init+0x1ee>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e013      	b.n	8005424 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	7b1b      	ldrb	r3, [r3, #12]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d102      	bne.n	8005418 <HAL_PCD_Init+0x20a>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f80a 	bl	800542c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f003 f86a 	bl	80084f6 <USB_DevDisconnect>

  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800545a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800545e:	f043 0303 	orr.w	r3, r3, #3
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005474:	b480      	push	{r7}
 8005476:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005478:	4b05      	ldr	r3, [pc, #20]	@ (8005490 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a04      	ldr	r2, [pc, #16]	@ (8005490 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800547e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005482:	6013      	str	r3, [r2, #0]
}
 8005484:	bf00      	nop
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	40007000 	.word	0x40007000

08005494 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005494:	b480      	push	{r7}
 8005496:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005498:	4b04      	ldr	r3, [pc, #16]	@ (80054ac <HAL_PWREx_GetVoltageRange+0x18>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40007000 	.word	0x40007000

080054b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054be:	d130      	bne.n	8005522 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80054c0:	4b23      	ldr	r3, [pc, #140]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054cc:	d038      	beq.n	8005540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80054ce:	4b20      	ldr	r3, [pc, #128]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80054d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80054dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80054de:	4b1d      	ldr	r3, [pc, #116]	@ (8005554 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2232      	movs	r2, #50	@ 0x32
 80054e4:	fb02 f303 	mul.w	r3, r2, r3
 80054e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80054ea:	fba2 2303 	umull	r2, r3, r2, r3
 80054ee:	0c9b      	lsrs	r3, r3, #18
 80054f0:	3301      	adds	r3, #1
 80054f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054f4:	e002      	b.n	80054fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	3b01      	subs	r3, #1
 80054fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054fc:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005508:	d102      	bne.n	8005510 <HAL_PWREx_ControlVoltageScaling+0x60>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d1f2      	bne.n	80054f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005510:	4b0f      	ldr	r3, [pc, #60]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800551c:	d110      	bne.n	8005540 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e00f      	b.n	8005542 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005522:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800552a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800552e:	d007      	beq.n	8005540 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005530:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005538:	4a05      	ldr	r2, [pc, #20]	@ (8005550 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800553a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800553e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	40007000 	.word	0x40007000
 8005554:	20000010 	.word	0x20000010
 8005558:	431bde83 	.word	0x431bde83

0800555c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005560:	4b05      	ldr	r3, [pc, #20]	@ (8005578 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	4a04      	ldr	r2, [pc, #16]	@ (8005578 <HAL_PWREx_EnableVddUSB+0x1c>)
 8005566:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800556a:	6053      	str	r3, [r2, #4]
}
 800556c:	bf00      	nop
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr
 8005576:	bf00      	nop
 8005578:	40007000 	.word	0x40007000

0800557c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af02      	add	r7, sp, #8
 8005582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8005584:	f7fe fa18 	bl	80039b8 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e063      	b.n	800565c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10b      	bne.n	80055b8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f7fc fadb 	bl	8001b64 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80055ae:	f241 3188 	movw	r1, #5000	@ 0x1388
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f858 	bl	8005668 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f423 6170 	bic.w	r1, r3, #3840	@ 0xf00
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	3b01      	subs	r3, #1
 80055c8:	021a      	lsls	r2, r3, #8
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	2200      	movs	r2, #0
 80055dc:	2120      	movs	r1, #32
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f850 	bl	8005684 <QSPI_WaitFlagStateUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80055e8:	7afb      	ldrb	r3, [r7, #11]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d131      	bne.n	8005652 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80055f8:	f023 0310 	bic.w	r3, r3, #16
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6852      	ldr	r2, [r2, #4]
 8005600:	0611      	lsls	r1, r2, #24
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	68d2      	ldr	r2, [r2, #12]
 8005606:	4311      	orrs	r1, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	430b      	orrs	r3, r1
 800560e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	4b13      	ldr	r3, [pc, #76]	@ (8005664 <HAL_QSPI_Init+0xe8>)
 8005618:	4013      	ands	r3, r2
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6912      	ldr	r2, [r2, #16]
 800561e:	0411      	lsls	r1, r2, #16
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	6952      	ldr	r2, [r2, #20]
 8005624:	4311      	orrs	r1, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6992      	ldr	r2, [r2, #24]
 800562a:	4311      	orrs	r1, r2
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	430b      	orrs	r3, r1
 8005632:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f042 0201 	orr.w	r2, r2, #1
 8005642:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Return function status */
  return status;
 800565a:	7afb      	ldrb	r3, [r7, #11]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	ffe0f8fe 	.word	0xffe0f8fe

08005668 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
 8005670:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr

08005684 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	603b      	str	r3, [r7, #0]
 8005690:	4613      	mov	r3, r2
 8005692:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005694:	e01a      	b.n	80056cc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800569c:	d016      	beq.n	80056cc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800569e:	f7fe f98b 	bl	80039b8 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d302      	bcc.n	80056b4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2204      	movs	r2, #4
 80056b8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c0:	f043 0201 	orr.w	r2, r3, #1
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	63da      	str	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e00e      	b.n	80056ea <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689a      	ldr	r2, [r3, #8]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	461a      	mov	r2, r3
 80056e2:	79fb      	ldrb	r3, [r7, #7]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d1d6      	bne.n	8005696 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056e8:	2300      	movs	r3, #0
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e3ca      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005706:	4b97      	ldr	r3, [pc, #604]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 030c 	and.w	r3, r3, #12
 800570e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005710:	4b94      	ldr	r3, [pc, #592]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80e4 	beq.w	80058f0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d007      	beq.n	800573e <HAL_RCC_OscConfig+0x4a>
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	2b0c      	cmp	r3, #12
 8005732:	f040 808b 	bne.w	800584c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2b01      	cmp	r3, #1
 800573a:	f040 8087 	bne.w	800584c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800573e:	4b89      	ldr	r3, [pc, #548]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0302 	and.w	r3, r3, #2
 8005746:	2b00      	cmp	r3, #0
 8005748:	d005      	beq.n	8005756 <HAL_RCC_OscConfig+0x62>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005752:	2301      	movs	r3, #1
 8005754:	e3a2      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1a      	ldr	r2, [r3, #32]
 800575a:	4b82      	ldr	r3, [pc, #520]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0308 	and.w	r3, r3, #8
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <HAL_RCC_OscConfig+0x7c>
 8005766:	4b7f      	ldr	r3, [pc, #508]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800576e:	e005      	b.n	800577c <HAL_RCC_OscConfig+0x88>
 8005770:	4b7c      	ldr	r3, [pc, #496]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005772:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005776:	091b      	lsrs	r3, r3, #4
 8005778:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800577c:	4293      	cmp	r3, r2
 800577e:	d223      	bcs.n	80057c8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	4618      	mov	r0, r3
 8005786:	f000 fd55 	bl	8006234 <RCC_SetFlashLatencyFromMSIRange>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e383      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005794:	4b73      	ldr	r3, [pc, #460]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a72      	ldr	r2, [pc, #456]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800579a:	f043 0308 	orr.w	r3, r3, #8
 800579e:	6013      	str	r3, [r2, #0]
 80057a0:	4b70      	ldr	r3, [pc, #448]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6a1b      	ldr	r3, [r3, #32]
 80057ac:	496d      	ldr	r1, [pc, #436]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69db      	ldr	r3, [r3, #28]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	4968      	ldr	r1, [pc, #416]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	604b      	str	r3, [r1, #4]
 80057c6:	e025      	b.n	8005814 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80057c8:	4b66      	ldr	r3, [pc, #408]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a65      	ldr	r2, [pc, #404]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057ce:	f043 0308 	orr.w	r3, r3, #8
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	4b63      	ldr	r3, [pc, #396]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	4960      	ldr	r1, [pc, #384]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80057e6:	4b5f      	ldr	r3, [pc, #380]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	021b      	lsls	r3, r3, #8
 80057f4:	495b      	ldr	r1, [pc, #364]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	4618      	mov	r0, r3
 8005806:	f000 fd15 	bl	8006234 <RCC_SetFlashLatencyFromMSIRange>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e343      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005814:	f000 fc4a 	bl	80060ac <HAL_RCC_GetSysClockFreq>
 8005818:	4602      	mov	r2, r0
 800581a:	4b52      	ldr	r3, [pc, #328]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	f003 030f 	and.w	r3, r3, #15
 8005824:	4950      	ldr	r1, [pc, #320]	@ (8005968 <HAL_RCC_OscConfig+0x274>)
 8005826:	5ccb      	ldrb	r3, [r1, r3]
 8005828:	f003 031f 	and.w	r3, r3, #31
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
 8005830:	4a4e      	ldr	r2, [pc, #312]	@ (800596c <HAL_RCC_OscConfig+0x278>)
 8005832:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005834:	4b4e      	ldr	r3, [pc, #312]	@ (8005970 <HAL_RCC_OscConfig+0x27c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f7fe f86d 	bl	8003918 <HAL_InitTick>
 800583e:	4603      	mov	r3, r0
 8005840:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005842:	7bfb      	ldrb	r3, [r7, #15]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d052      	beq.n	80058ee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	e327      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d032      	beq.n	80058ba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005854:	4b43      	ldr	r3, [pc, #268]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a42      	ldr	r2, [pc, #264]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800585a:	f043 0301 	orr.w	r3, r3, #1
 800585e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005860:	f7fe f8aa 	bl	80039b8 <HAL_GetTick>
 8005864:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005866:	e008      	b.n	800587a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005868:	f7fe f8a6 	bl	80039b8 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	2b02      	cmp	r3, #2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e310      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800587a:	4b3a      	ldr	r3, [pc, #232]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0f0      	beq.n	8005868 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005886:	4b37      	ldr	r3, [pc, #220]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a36      	ldr	r2, [pc, #216]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800588c:	f043 0308 	orr.w	r3, r3, #8
 8005890:	6013      	str	r3, [r2, #0]
 8005892:	4b34      	ldr	r3, [pc, #208]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	4931      	ldr	r1, [pc, #196]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80058a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	69db      	ldr	r3, [r3, #28]
 80058b0:	021b      	lsls	r3, r3, #8
 80058b2:	492c      	ldr	r1, [pc, #176]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]
 80058b8:	e01a      	b.n	80058f0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80058ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a29      	ldr	r2, [pc, #164]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80058c0:	f023 0301 	bic.w	r3, r3, #1
 80058c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80058c6:	f7fe f877 	bl	80039b8 <HAL_GetTick>
 80058ca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058cc:	e008      	b.n	80058e0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058ce:	f7fe f873 	bl	80039b8 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d901      	bls.n	80058e0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80058dc:	2303      	movs	r3, #3
 80058de:	e2dd      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80058e0:	4b20      	ldr	r3, [pc, #128]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0302 	and.w	r3, r3, #2
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f0      	bne.n	80058ce <HAL_RCC_OscConfig+0x1da>
 80058ec:	e000      	b.n	80058f0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80058ee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d074      	beq.n	80059e6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	2b08      	cmp	r3, #8
 8005900:	d005      	beq.n	800590e <HAL_RCC_OscConfig+0x21a>
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b0c      	cmp	r3, #12
 8005906:	d10e      	bne.n	8005926 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d10b      	bne.n	8005926 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800590e:	4b15      	ldr	r3, [pc, #84]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d064      	beq.n	80059e4 <HAL_RCC_OscConfig+0x2f0>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d160      	bne.n	80059e4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e2ba      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800592e:	d106      	bne.n	800593e <HAL_RCC_OscConfig+0x24a>
 8005930:	4b0c      	ldr	r3, [pc, #48]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a0b      	ldr	r2, [pc, #44]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800593a:	6013      	str	r3, [r2, #0]
 800593c:	e026      	b.n	800598c <HAL_RCC_OscConfig+0x298>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005946:	d115      	bne.n	8005974 <HAL_RCC_OscConfig+0x280>
 8005948:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a05      	ldr	r2, [pc, #20]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800594e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	4b03      	ldr	r3, [pc, #12]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a02      	ldr	r2, [pc, #8]	@ (8005964 <HAL_RCC_OscConfig+0x270>)
 800595a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	e014      	b.n	800598c <HAL_RCC_OscConfig+0x298>
 8005962:	bf00      	nop
 8005964:	40021000 	.word	0x40021000
 8005968:	0800d794 	.word	0x0800d794
 800596c:	20000010 	.word	0x20000010
 8005970:	20000028 	.word	0x20000028
 8005974:	4ba0      	ldr	r3, [pc, #640]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a9f      	ldr	r2, [pc, #636]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 800597a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800597e:	6013      	str	r3, [r2, #0]
 8005980:	4b9d      	ldr	r3, [pc, #628]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a9c      	ldr	r2, [pc, #624]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005986:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800598a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d013      	beq.n	80059bc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005994:	f7fe f810 	bl	80039b8 <HAL_GetTick>
 8005998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800599a:	e008      	b.n	80059ae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800599c:	f7fe f80c 	bl	80039b8 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	@ 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e276      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059ae:	4b92      	ldr	r3, [pc, #584]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d0f0      	beq.n	800599c <HAL_RCC_OscConfig+0x2a8>
 80059ba:	e014      	b.n	80059e6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059bc:	f7fd fffc 	bl	80039b8 <HAL_GetTick>
 80059c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059c2:	e008      	b.n	80059d6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059c4:	f7fd fff8 	bl	80039b8 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b64      	cmp	r3, #100	@ 0x64
 80059d0:	d901      	bls.n	80059d6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	e262      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80059d6:	4b88      	ldr	r3, [pc, #544]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d1f0      	bne.n	80059c4 <HAL_RCC_OscConfig+0x2d0>
 80059e2:	e000      	b.n	80059e6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0302 	and.w	r3, r3, #2
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d060      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	2b04      	cmp	r3, #4
 80059f6:	d005      	beq.n	8005a04 <HAL_RCC_OscConfig+0x310>
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d119      	bne.n	8005a32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d116      	bne.n	8005a32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a04:	4b7c      	ldr	r3, [pc, #496]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d005      	beq.n	8005a1c <HAL_RCC_OscConfig+0x328>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e23f      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a1c:	4b76      	ldr	r3, [pc, #472]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	061b      	lsls	r3, r3, #24
 8005a2a:	4973      	ldr	r1, [pc, #460]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005a30:	e040      	b.n	8005ab4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d023      	beq.n	8005a82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a6e      	ldr	r2, [pc, #440]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fd ffb7 	bl	80039b8 <HAL_GetTick>
 8005a4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a4c:	e008      	b.n	8005a60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a4e:	f7fd ffb3 	bl	80039b8 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	2b02      	cmp	r3, #2
 8005a5a:	d901      	bls.n	8005a60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	e21d      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a60:	4b65      	ldr	r3, [pc, #404]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d0f0      	beq.n	8005a4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a6c:	4b62      	ldr	r3, [pc, #392]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	495f      	ldr	r1, [pc, #380]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	604b      	str	r3, [r1, #4]
 8005a80:	e018      	b.n	8005ab4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005a82:	4b5d      	ldr	r3, [pc, #372]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a5c      	ldr	r2, [pc, #368]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005a88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fd ff93 	bl	80039b8 <HAL_GetTick>
 8005a92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a96:	f7fd ff8f 	bl	80039b8 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e1f9      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aa8:	4b53      	ldr	r3, [pc, #332]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d03c      	beq.n	8005b3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d01c      	beq.n	8005b02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ac8:	4b4b      	ldr	r3, [pc, #300]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ace:	4a4a      	ldr	r2, [pc, #296]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fd ff6e 	bl	80039b8 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ae0:	f7fd ff6a 	bl	80039b8 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e1d4      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005af2:	4b41      	ldr	r3, [pc, #260]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005af8:	f003 0302 	and.w	r3, r3, #2
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ef      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x3ec>
 8005b00:	e01b      	b.n	8005b3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b02:	4b3d      	ldr	r3, [pc, #244]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b08:	4a3b      	ldr	r2, [pc, #236]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005b0a:	f023 0301 	bic.w	r3, r3, #1
 8005b0e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b12:	f7fd ff51 	bl	80039b8 <HAL_GetTick>
 8005b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b18:	e008      	b.n	8005b2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b1a:	f7fd ff4d 	bl	80039b8 <HAL_GetTick>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	2b02      	cmp	r3, #2
 8005b26:	d901      	bls.n	8005b2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e1b7      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b2c:	4b32      	ldr	r3, [pc, #200]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b32:	f003 0302 	and.w	r3, r3, #2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1ef      	bne.n	8005b1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80a6 	beq.w	8005c94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005b4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10d      	bne.n	8005b74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b58:	4b27      	ldr	r3, [pc, #156]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5c:	4a26      	ldr	r2, [pc, #152]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005b5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b64:	4b24      	ldr	r3, [pc, #144]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6c:	60bb      	str	r3, [r7, #8]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b70:	2301      	movs	r3, #1
 8005b72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b74:	4b21      	ldr	r3, [pc, #132]	@ (8005bfc <HAL_RCC_OscConfig+0x508>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d118      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b80:	4b1e      	ldr	r3, [pc, #120]	@ (8005bfc <HAL_RCC_OscConfig+0x508>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a1d      	ldr	r2, [pc, #116]	@ (8005bfc <HAL_RCC_OscConfig+0x508>)
 8005b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b8c:	f7fd ff14 	bl	80039b8 <HAL_GetTick>
 8005b90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005b92:	e008      	b.n	8005ba6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b94:	f7fd ff10 	bl	80039b8 <HAL_GetTick>
 8005b98:	4602      	mov	r2, r0
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	1ad3      	subs	r3, r2, r3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e17a      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ba6:	4b15      	ldr	r3, [pc, #84]	@ (8005bfc <HAL_RCC_OscConfig+0x508>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d0f0      	beq.n	8005b94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2b01      	cmp	r3, #1
 8005bb8:	d108      	bne.n	8005bcc <HAL_RCC_OscConfig+0x4d8>
 8005bba:	4b0f      	ldr	r3, [pc, #60]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc0:	4a0d      	ldr	r2, [pc, #52]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005bc2:	f043 0301 	orr.w	r3, r3, #1
 8005bc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bca:	e029      	b.n	8005c20 <HAL_RCC_OscConfig+0x52c>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b05      	cmp	r3, #5
 8005bd2:	d115      	bne.n	8005c00 <HAL_RCC_OscConfig+0x50c>
 8005bd4:	4b08      	ldr	r3, [pc, #32]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bda:	4a07      	ldr	r2, [pc, #28]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005bdc:	f043 0304 	orr.w	r3, r3, #4
 8005be0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005be4:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bea:	4a03      	ldr	r2, [pc, #12]	@ (8005bf8 <HAL_RCC_OscConfig+0x504>)
 8005bec:	f043 0301 	orr.w	r3, r3, #1
 8005bf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005bf4:	e014      	b.n	8005c20 <HAL_RCC_OscConfig+0x52c>
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	40007000 	.word	0x40007000
 8005c00:	4b9c      	ldr	r3, [pc, #624]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c06:	4a9b      	ldr	r2, [pc, #620]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005c10:	4b98      	ldr	r3, [pc, #608]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c16:	4a97      	ldr	r2, [pc, #604]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005c18:	f023 0304 	bic.w	r3, r3, #4
 8005c1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d016      	beq.n	8005c56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c28:	f7fd fec6 	bl	80039b8 <HAL_GetTick>
 8005c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2e:	e00a      	b.n	8005c46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c30:	f7fd fec2 	bl	80039b8 <HAL_GetTick>
 8005c34:	4602      	mov	r2, r0
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	1ad3      	subs	r3, r2, r3
 8005c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e12a      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c46:	4b8b      	ldr	r3, [pc, #556]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0ed      	beq.n	8005c30 <HAL_RCC_OscConfig+0x53c>
 8005c54:	e015      	b.n	8005c82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c56:	f7fd feaf 	bl	80039b8 <HAL_GetTick>
 8005c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5e:	f7fd feab 	bl	80039b8 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	e113      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005c74:	4b7f      	ldr	r3, [pc, #508]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1ed      	bne.n	8005c5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c82:	7ffb      	ldrb	r3, [r7, #31]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d105      	bne.n	8005c94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c88:	4b7a      	ldr	r3, [pc, #488]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8c:	4a79      	ldr	r2, [pc, #484]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c92:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 80fe 	beq.w	8005e9a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	f040 80d0 	bne.w	8005e48 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005ca8:	4b72      	ldr	r3, [pc, #456]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 0203 	and.w	r2, r3, #3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d130      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d127      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d11f      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005ce8:	2a07      	cmp	r2, #7
 8005cea:	bf14      	ite	ne
 8005cec:	2201      	movne	r2, #1
 8005cee:	2200      	moveq	r2, #0
 8005cf0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d113      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d00:	085b      	lsrs	r3, r3, #1
 8005d02:	3b01      	subs	r3, #1
 8005d04:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d109      	bne.n	8005d1e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	3b01      	subs	r3, #1
 8005d18:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d06e      	beq.n	8005dfc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	2b0c      	cmp	r3, #12
 8005d22:	d069      	beq.n	8005df8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005d24:	4b53      	ldr	r3, [pc, #332]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d105      	bne.n	8005d3c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005d30:	4b50      	ldr	r3, [pc, #320]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0ad      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005d40:	4b4c      	ldr	r3, [pc, #304]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a4b      	ldr	r2, [pc, #300]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005d46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d4a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d4c:	f7fd fe34 	bl	80039b8 <HAL_GetTick>
 8005d50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d54:	f7fd fe30 	bl	80039b8 <HAL_GetTick>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	1ad3      	subs	r3, r2, r3
 8005d5e:	2b02      	cmp	r3, #2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e09a      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d66:	4b43      	ldr	r3, [pc, #268]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d1f0      	bne.n	8005d54 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d72:	4b40      	ldr	r3, [pc, #256]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	4b40      	ldr	r3, [pc, #256]	@ (8005e78 <HAL_RCC_OscConfig+0x784>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005d82:	3a01      	subs	r2, #1
 8005d84:	0112      	lsls	r2, r2, #4
 8005d86:	4311      	orrs	r1, r2
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005d8c:	0212      	lsls	r2, r2, #8
 8005d8e:	4311      	orrs	r1, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005d94:	0852      	lsrs	r2, r2, #1
 8005d96:	3a01      	subs	r2, #1
 8005d98:	0552      	lsls	r2, r2, #21
 8005d9a:	4311      	orrs	r1, r2
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005da0:	0852      	lsrs	r2, r2, #1
 8005da2:	3a01      	subs	r2, #1
 8005da4:	0652      	lsls	r2, r2, #25
 8005da6:	4311      	orrs	r1, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005dac:	0912      	lsrs	r2, r2, #4
 8005dae:	0452      	lsls	r2, r2, #17
 8005db0:	430a      	orrs	r2, r1
 8005db2:	4930      	ldr	r1, [pc, #192]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005db8:	4b2e      	ldr	r3, [pc, #184]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a2d      	ldr	r2, [pc, #180]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dc2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4a2a      	ldr	r2, [pc, #168]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005dce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005dd0:	f7fd fdf2 	bl	80039b8 <HAL_GetTick>
 8005dd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dd6:	e008      	b.n	8005dea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dd8:	f7fd fdee 	bl	80039b8 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	2b02      	cmp	r3, #2
 8005de4:	d901      	bls.n	8005dea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005de6:	2303      	movs	r3, #3
 8005de8:	e058      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dea:	4b22      	ldr	r3, [pc, #136]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d0f0      	beq.n	8005dd8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005df6:	e050      	b.n	8005e9a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e04f      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005dfc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d148      	bne.n	8005e9a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005e08:	4b1a      	ldr	r3, [pc, #104]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a19      	ldr	r2, [pc, #100]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005e0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e12:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005e14:	4b17      	ldr	r3, [pc, #92]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	4a16      	ldr	r2, [pc, #88]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005e1a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e1e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e20:	f7fd fdca 	bl	80039b8 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e28:	f7fd fdc6 	bl	80039b8 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e030      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d0f0      	beq.n	8005e28 <HAL_RCC_OscConfig+0x734>
 8005e46:	e028      	b.n	8005e9a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005e48:	69bb      	ldr	r3, [r7, #24]
 8005e4a:	2b0c      	cmp	r3, #12
 8005e4c:	d023      	beq.n	8005e96 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e4e:	4b09      	ldr	r3, [pc, #36]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a08      	ldr	r2, [pc, #32]	@ (8005e74 <HAL_RCC_OscConfig+0x780>)
 8005e54:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e5a:	f7fd fdad 	bl	80039b8 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e60:	e00c      	b.n	8005e7c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e62:	f7fd fda9 	bl	80039b8 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d905      	bls.n	8005e7c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e013      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
 8005e74:	40021000 	.word	0x40021000
 8005e78:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005e7c:	4b09      	ldr	r3, [pc, #36]	@ (8005ea4 <HAL_RCC_OscConfig+0x7b0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1ec      	bne.n	8005e62 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005e88:	4b06      	ldr	r3, [pc, #24]	@ (8005ea4 <HAL_RCC_OscConfig+0x7b0>)
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	4905      	ldr	r1, [pc, #20]	@ (8005ea4 <HAL_RCC_OscConfig+0x7b0>)
 8005e8e:	4b06      	ldr	r3, [pc, #24]	@ (8005ea8 <HAL_RCC_OscConfig+0x7b4>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60cb      	str	r3, [r1, #12]
 8005e94:	e001      	b.n	8005e9a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3720      	adds	r7, #32
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	40021000 	.word	0x40021000
 8005ea8:	feeefffc 	.word	0xfeeefffc

08005eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d101      	bne.n	8005ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e0e7      	b.n	8006090 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ec0:	4b75      	ldr	r3, [pc, #468]	@ (8006098 <HAL_RCC_ClockConfig+0x1ec>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0307 	and.w	r3, r3, #7
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d910      	bls.n	8005ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ece:	4b72      	ldr	r3, [pc, #456]	@ (8006098 <HAL_RCC_ClockConfig+0x1ec>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f023 0207 	bic.w	r2, r3, #7
 8005ed6:	4970      	ldr	r1, [pc, #448]	@ (8006098 <HAL_RCC_ClockConfig+0x1ec>)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ede:	4b6e      	ldr	r3, [pc, #440]	@ (8006098 <HAL_RCC_ClockConfig+0x1ec>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0307 	and.w	r3, r3, #7
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d001      	beq.n	8005ef0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0cf      	b.n	8006090 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d010      	beq.n	8005f1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689a      	ldr	r2, [r3, #8]
 8005f00:	4b66      	ldr	r3, [pc, #408]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d908      	bls.n	8005f1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f0c:	4b63      	ldr	r3, [pc, #396]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	4960      	ldr	r1, [pc, #384]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d04c      	beq.n	8005fc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d107      	bne.n	8005f42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f32:	4b5a      	ldr	r3, [pc, #360]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d121      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e0a6      	b.n	8006090 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b02      	cmp	r3, #2
 8005f48:	d107      	bne.n	8005f5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f4a:	4b54      	ldr	r3, [pc, #336]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d115      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e09a      	b.n	8006090 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005f62:	4b4e      	ldr	r3, [pc, #312]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0302 	and.w	r3, r3, #2
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d109      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e08e      	b.n	8006090 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f72:	4b4a      	ldr	r3, [pc, #296]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d101      	bne.n	8005f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e086      	b.n	8006090 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005f82:	4b46      	ldr	r3, [pc, #280]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f023 0203 	bic.w	r2, r3, #3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4943      	ldr	r1, [pc, #268]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f94:	f7fd fd10 	bl	80039b8 <HAL_GetTick>
 8005f98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f9a:	e00a      	b.n	8005fb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f9c:	f7fd fd0c 	bl	80039b8 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e06e      	b.n	8006090 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 020c 	and.w	r2, r3, #12
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	009b      	lsls	r3, r3, #2
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d1eb      	bne.n	8005f9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d010      	beq.n	8005ff2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	689a      	ldr	r2, [r3, #8]
 8005fd4:	4b31      	ldr	r3, [pc, #196]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d208      	bcs.n	8005ff2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	492b      	ldr	r1, [pc, #172]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ff2:	4b29      	ldr	r3, [pc, #164]	@ (8006098 <HAL_RCC_ClockConfig+0x1ec>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	683a      	ldr	r2, [r7, #0]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d210      	bcs.n	8006022 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006000:	4b25      	ldr	r3, [pc, #148]	@ (8006098 <HAL_RCC_ClockConfig+0x1ec>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f023 0207 	bic.w	r2, r3, #7
 8006008:	4923      	ldr	r1, [pc, #140]	@ (8006098 <HAL_RCC_ClockConfig+0x1ec>)
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	4313      	orrs	r3, r2
 800600e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006010:	4b21      	ldr	r3, [pc, #132]	@ (8006098 <HAL_RCC_ClockConfig+0x1ec>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0307 	and.w	r3, r3, #7
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	429a      	cmp	r2, r3
 800601c:	d001      	beq.n	8006022 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e036      	b.n	8006090 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0304 	and.w	r3, r3, #4
 800602a:	2b00      	cmp	r3, #0
 800602c:	d008      	beq.n	8006040 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800602e:	4b1b      	ldr	r3, [pc, #108]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68db      	ldr	r3, [r3, #12]
 800603a:	4918      	ldr	r1, [pc, #96]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 800603c:	4313      	orrs	r3, r2
 800603e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d009      	beq.n	8006060 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800604c:	4b13      	ldr	r3, [pc, #76]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	00db      	lsls	r3, r3, #3
 800605a:	4910      	ldr	r1, [pc, #64]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 800605c:	4313      	orrs	r3, r2
 800605e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006060:	f000 f824 	bl	80060ac <HAL_RCC_GetSysClockFreq>
 8006064:	4602      	mov	r2, r0
 8006066:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <HAL_RCC_ClockConfig+0x1f0>)
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	091b      	lsrs	r3, r3, #4
 800606c:	f003 030f 	and.w	r3, r3, #15
 8006070:	490b      	ldr	r1, [pc, #44]	@ (80060a0 <HAL_RCC_ClockConfig+0x1f4>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	fa22 f303 	lsr.w	r3, r2, r3
 800607c:	4a09      	ldr	r2, [pc, #36]	@ (80060a4 <HAL_RCC_ClockConfig+0x1f8>)
 800607e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006080:	4b09      	ldr	r3, [pc, #36]	@ (80060a8 <HAL_RCC_ClockConfig+0x1fc>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4618      	mov	r0, r3
 8006086:	f7fd fc47 	bl	8003918 <HAL_InitTick>
 800608a:	4603      	mov	r3, r0
 800608c:	72fb      	strb	r3, [r7, #11]

  return status;
 800608e:	7afb      	ldrb	r3, [r7, #11]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40022000 	.word	0x40022000
 800609c:	40021000 	.word	0x40021000
 80060a0:	0800d794 	.word	0x0800d794
 80060a4:	20000010 	.word	0x20000010
 80060a8:	20000028 	.word	0x20000028

080060ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b089      	sub	sp, #36	@ 0x24
 80060b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	2300      	movs	r3, #0
 80060b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ba:	4b3e      	ldr	r3, [pc, #248]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f003 030c 	and.w	r3, r3, #12
 80060c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060c4:	4b3b      	ldr	r3, [pc, #236]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0303 	and.w	r3, r3, #3
 80060cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d005      	beq.n	80060e0 <HAL_RCC_GetSysClockFreq+0x34>
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b0c      	cmp	r3, #12
 80060d8:	d121      	bne.n	800611e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d11e      	bne.n	800611e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80060e0:	4b34      	ldr	r3, [pc, #208]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80060ec:	4b31      	ldr	r3, [pc, #196]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80060ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060f2:	0a1b      	lsrs	r3, r3, #8
 80060f4:	f003 030f 	and.w	r3, r3, #15
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	e005      	b.n	8006108 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80060fc:	4b2d      	ldr	r3, [pc, #180]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	091b      	lsrs	r3, r3, #4
 8006102:	f003 030f 	and.w	r3, r3, #15
 8006106:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006108:	4a2b      	ldr	r2, [pc, #172]	@ (80061b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006110:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10d      	bne.n	8006134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800611c:	e00a      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	2b04      	cmp	r3, #4
 8006122:	d102      	bne.n	800612a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006124:	4b25      	ldr	r3, [pc, #148]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x110>)
 8006126:	61bb      	str	r3, [r7, #24]
 8006128:	e004      	b.n	8006134 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	2b08      	cmp	r3, #8
 800612e:	d101      	bne.n	8006134 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006130:	4b23      	ldr	r3, [pc, #140]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8006132:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	2b0c      	cmp	r3, #12
 8006138:	d134      	bne.n	80061a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800613a:	4b1e      	ldr	r3, [pc, #120]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b02      	cmp	r3, #2
 8006148:	d003      	beq.n	8006152 <HAL_RCC_GetSysClockFreq+0xa6>
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2b03      	cmp	r3, #3
 800614e:	d003      	beq.n	8006158 <HAL_RCC_GetSysClockFreq+0xac>
 8006150:	e005      	b.n	800615e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006152:	4b1a      	ldr	r3, [pc, #104]	@ (80061bc <HAL_RCC_GetSysClockFreq+0x110>)
 8006154:	617b      	str	r3, [r7, #20]
      break;
 8006156:	e005      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006158:	4b19      	ldr	r3, [pc, #100]	@ (80061c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800615a:	617b      	str	r3, [r7, #20]
      break;
 800615c:	e002      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	617b      	str	r3, [r7, #20]
      break;
 8006162:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006164:	4b13      	ldr	r3, [pc, #76]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	091b      	lsrs	r3, r3, #4
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	3301      	adds	r3, #1
 8006170:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006172:	4b10      	ldr	r3, [pc, #64]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8006174:	68db      	ldr	r3, [r3, #12]
 8006176:	0a1b      	lsrs	r3, r3, #8
 8006178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	fb03 f202 	mul.w	r2, r3, r2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	fbb2 f3f3 	udiv	r3, r2, r3
 8006188:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800618a:	4b0a      	ldr	r3, [pc, #40]	@ (80061b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	0e5b      	lsrs	r3, r3, #25
 8006190:	f003 0303 	and.w	r3, r3, #3
 8006194:	3301      	adds	r3, #1
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	fbb2 f3f3 	udiv	r3, r2, r3
 80061a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80061a4:	69bb      	ldr	r3, [r7, #24]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3724      	adds	r7, #36	@ 0x24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40021000 	.word	0x40021000
 80061b8:	0800d7ac 	.word	0x0800d7ac
 80061bc:	00f42400 	.word	0x00f42400
 80061c0:	007a1200 	.word	0x007a1200

080061c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061c4:	b480      	push	{r7}
 80061c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061c8:	4b03      	ldr	r3, [pc, #12]	@ (80061d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80061ca:	681b      	ldr	r3, [r3, #0]
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop
 80061d8:	20000010 	.word	0x20000010

080061dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80061e0:	f7ff fff0 	bl	80061c4 <HAL_RCC_GetHCLKFreq>
 80061e4:	4602      	mov	r2, r0
 80061e6:	4b06      	ldr	r3, [pc, #24]	@ (8006200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	0a1b      	lsrs	r3, r3, #8
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	4904      	ldr	r1, [pc, #16]	@ (8006204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80061f2:	5ccb      	ldrb	r3, [r1, r3]
 80061f4:	f003 031f 	and.w	r3, r3, #31
 80061f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	40021000 	.word	0x40021000
 8006204:	0800d7a4 	.word	0x0800d7a4

08006208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800620c:	f7ff ffda 	bl	80061c4 <HAL_RCC_GetHCLKFreq>
 8006210:	4602      	mov	r2, r0
 8006212:	4b06      	ldr	r3, [pc, #24]	@ (800622c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	0adb      	lsrs	r3, r3, #11
 8006218:	f003 0307 	and.w	r3, r3, #7
 800621c:	4904      	ldr	r1, [pc, #16]	@ (8006230 <HAL_RCC_GetPCLK2Freq+0x28>)
 800621e:	5ccb      	ldrb	r3, [r1, r3]
 8006220:	f003 031f 	and.w	r3, r3, #31
 8006224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006228:	4618      	mov	r0, r3
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40021000 	.word	0x40021000
 8006230:	0800d7a4 	.word	0x0800d7a4

08006234 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b086      	sub	sp, #24
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800623c:	2300      	movs	r3, #0
 800623e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006240:	4b2a      	ldr	r3, [pc, #168]	@ (80062ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006244:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800624c:	f7ff f922 	bl	8005494 <HAL_PWREx_GetVoltageRange>
 8006250:	6178      	str	r0, [r7, #20]
 8006252:	e014      	b.n	800627e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006254:	4b25      	ldr	r3, [pc, #148]	@ (80062ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006256:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006258:	4a24      	ldr	r2, [pc, #144]	@ (80062ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800625a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800625e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006260:	4b22      	ldr	r3, [pc, #136]	@ (80062ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006268:	60fb      	str	r3, [r7, #12]
 800626a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800626c:	f7ff f912 	bl	8005494 <HAL_PWREx_GetVoltageRange>
 8006270:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006272:	4b1e      	ldr	r3, [pc, #120]	@ (80062ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	4a1d      	ldr	r2, [pc, #116]	@ (80062ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006278:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800627c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006284:	d10b      	bne.n	800629e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b80      	cmp	r3, #128	@ 0x80
 800628a:	d919      	bls.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2ba0      	cmp	r3, #160	@ 0xa0
 8006290:	d902      	bls.n	8006298 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006292:	2302      	movs	r3, #2
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	e013      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006298:	2301      	movs	r3, #1
 800629a:	613b      	str	r3, [r7, #16]
 800629c:	e010      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b80      	cmp	r3, #128	@ 0x80
 80062a2:	d902      	bls.n	80062aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80062a4:	2303      	movs	r3, #3
 80062a6:	613b      	str	r3, [r7, #16]
 80062a8:	e00a      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2b80      	cmp	r3, #128	@ 0x80
 80062ae:	d102      	bne.n	80062b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80062b0:	2302      	movs	r3, #2
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	e004      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2b70      	cmp	r3, #112	@ 0x70
 80062ba:	d101      	bne.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80062bc:	2301      	movs	r3, #1
 80062be:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062c0:	4b0b      	ldr	r3, [pc, #44]	@ (80062f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f023 0207 	bic.w	r2, r3, #7
 80062c8:	4909      	ldr	r1, [pc, #36]	@ (80062f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80062d0:	4b07      	ldr	r3, [pc, #28]	@ (80062f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d001      	beq.n	80062e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40021000 	.word	0x40021000
 80062f0:	40022000 	.word	0x40022000

080062f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062fc:	2300      	movs	r3, #0
 80062fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006300:	2300      	movs	r3, #0
 8006302:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800630c:	2b00      	cmp	r3, #0
 800630e:	d041      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006314:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006318:	d02a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800631a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800631e:	d824      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006320:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006324:	d008      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006326:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800632a:	d81e      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006330:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006334:	d010      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006336:	e018      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006338:	4b86      	ldr	r3, [pc, #536]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a85      	ldr	r2, [pc, #532]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006342:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006344:	e015      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3304      	adds	r3, #4
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f000 facb 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006356:	e00c      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3320      	adds	r3, #32
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fbb6 	bl	8006ad0 <RCCEx_PLLSAI2_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	74fb      	strb	r3, [r7, #19]
      break;
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006372:	7cfb      	ldrb	r3, [r7, #19]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10b      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006378:	4b76      	ldr	r3, [pc, #472]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800637e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006386:	4973      	ldr	r1, [pc, #460]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800638e:	e001      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006390:	7cfb      	ldrb	r3, [r7, #19]
 8006392:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d041      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80063a4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063a8:	d02a      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80063aa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80063ae:	d824      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063b4:	d008      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80063b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80063ba:	d81e      	bhi.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80063c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80063c4:	d010      	beq.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80063c6:	e018      	b.n	80063fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80063c8:	4b62      	ldr	r3, [pc, #392]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	4a61      	ldr	r2, [pc, #388]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063d4:	e015      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	3304      	adds	r3, #4
 80063da:	2100      	movs	r1, #0
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 fa83 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 80063e2:	4603      	mov	r3, r0
 80063e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063e6:	e00c      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3320      	adds	r3, #32
 80063ec:	2100      	movs	r1, #0
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fb6e 	bl	8006ad0 <RCCEx_PLLSAI2_Config>
 80063f4:	4603      	mov	r3, r0
 80063f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80063f8:	e003      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	74fb      	strb	r3, [r7, #19]
      break;
 80063fe:	e000      	b.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006402:	7cfb      	ldrb	r3, [r7, #19]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10b      	bne.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006408:	4b52      	ldr	r3, [pc, #328]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006416:	494f      	ldr	r1, [pc, #316]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006418:	4313      	orrs	r3, r2
 800641a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800641e:	e001      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006420:	7cfb      	ldrb	r3, [r7, #19]
 8006422:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 80a0 	beq.w	8006572 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006432:	2300      	movs	r3, #0
 8006434:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006436:	4b47      	ldr	r3, [pc, #284]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800643a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006446:	2300      	movs	r3, #0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800644c:	4b41      	ldr	r3, [pc, #260]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800644e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006450:	4a40      	ldr	r2, [pc, #256]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006456:	6593      	str	r3, [r2, #88]	@ 0x58
 8006458:	4b3e      	ldr	r3, [pc, #248]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800645a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006460:	60bb      	str	r3, [r7, #8]
 8006462:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006464:	2301      	movs	r3, #1
 8006466:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006468:	4b3b      	ldr	r3, [pc, #236]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a3a      	ldr	r2, [pc, #232]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800646e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006472:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006474:	f7fd faa0 	bl	80039b8 <HAL_GetTick>
 8006478:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800647a:	e009      	b.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800647c:	f7fd fa9c 	bl	80039b8 <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d902      	bls.n	8006490 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	74fb      	strb	r3, [r7, #19]
        break;
 800648e:	e005      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006490:	4b31      	ldr	r3, [pc, #196]	@ (8006558 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0ef      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d15c      	bne.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01f      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d019      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80064c0:	4b24      	ldr	r3, [pc, #144]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80064cc:	4b21      	ldr	r3, [pc, #132]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064d2:	4a20      	ldr	r2, [pc, #128]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80064d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80064dc:	4b1d      	ldr	r3, [pc, #116]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80064ec:	4a19      	ldr	r2, [pc, #100]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f003 0301 	and.w	r3, r3, #1
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d016      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064fe:	f7fd fa5b 	bl	80039b8 <HAL_GetTick>
 8006502:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006504:	e00b      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006506:	f7fd fa57 	bl	80039b8 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006514:	4293      	cmp	r3, r2
 8006516:	d902      	bls.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	74fb      	strb	r3, [r7, #19]
            break;
 800651c:	e006      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800651e:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006520:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d0ec      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800652c:	7cfb      	ldrb	r3, [r7, #19]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10c      	bne.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006532:	4b08      	ldr	r3, [pc, #32]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006534:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006538:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006542:	4904      	ldr	r1, [pc, #16]	@ (8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006544:	4313      	orrs	r3, r2
 8006546:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800654a:	e009      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800654c:	7cfb      	ldrb	r3, [r7, #19]
 800654e:	74bb      	strb	r3, [r7, #18]
 8006550:	e006      	b.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006552:	bf00      	nop
 8006554:	40021000 	.word	0x40021000
 8006558:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655c:	7cfb      	ldrb	r3, [r7, #19]
 800655e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006560:	7c7b      	ldrb	r3, [r7, #17]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d105      	bne.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006566:	4b9e      	ldr	r3, [pc, #632]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800656a:	4a9d      	ldr	r2, [pc, #628]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800656c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006570:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0301 	and.w	r3, r3, #1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800657e:	4b98      	ldr	r3, [pc, #608]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006584:	f023 0203 	bic.w	r2, r3, #3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800658c:	4994      	ldr	r1, [pc, #592]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800658e:	4313      	orrs	r3, r2
 8006590:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065a0:	4b8f      	ldr	r3, [pc, #572]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065a6:	f023 020c 	bic.w	r2, r3, #12
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ae:	498c      	ldr	r1, [pc, #560]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80065c2:	4b87      	ldr	r3, [pc, #540]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065d0:	4983      	ldr	r1, [pc, #524]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065d2:	4313      	orrs	r3, r2
 80065d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0308 	and.w	r3, r3, #8
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00a      	beq.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80065e4:	4b7e      	ldr	r3, [pc, #504]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	497b      	ldr	r1, [pc, #492]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80065f4:	4313      	orrs	r3, r2
 80065f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f003 0310 	and.w	r3, r3, #16
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006606:	4b76      	ldr	r3, [pc, #472]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006614:	4972      	ldr	r1, [pc, #456]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006616:	4313      	orrs	r3, r2
 8006618:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 0320 	and.w	r3, r3, #32
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00a      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006628:	4b6d      	ldr	r3, [pc, #436]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800662a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006636:	496a      	ldr	r1, [pc, #424]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006638:	4313      	orrs	r3, r2
 800663a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00a      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800664a:	4b65      	ldr	r3, [pc, #404]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800664c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006650:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006658:	4961      	ldr	r1, [pc, #388]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800665a:	4313      	orrs	r3, r2
 800665c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00a      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800666c:	4b5c      	ldr	r3, [pc, #368]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800666e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006672:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800667a:	4959      	ldr	r1, [pc, #356]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800667c:	4313      	orrs	r3, r2
 800667e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800668e:	4b54      	ldr	r3, [pc, #336]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006690:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006694:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800669c:	4950      	ldr	r1, [pc, #320]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800669e:	4313      	orrs	r3, r2
 80066a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00a      	beq.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066b0:	4b4b      	ldr	r3, [pc, #300]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066be:	4948      	ldr	r1, [pc, #288]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066d2:	4b43      	ldr	r3, [pc, #268]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066e0:	493f      	ldr	r1, [pc, #252]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d028      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80066f4:	4b3a      	ldr	r3, [pc, #232]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80066f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006702:	4937      	ldr	r1, [pc, #220]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006704:	4313      	orrs	r3, r2
 8006706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800670e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006712:	d106      	bne.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006714:	4b32      	ldr	r3, [pc, #200]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	4a31      	ldr	r2, [pc, #196]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800671a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800671e:	60d3      	str	r3, [r2, #12]
 8006720:	e011      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006726:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800672a:	d10c      	bne.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3304      	adds	r3, #4
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f000 f8d8 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800673c:	7cfb      	ldrb	r3, [r7, #19]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8006742:	7cfb      	ldrb	r3, [r7, #19]
 8006744:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d028      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006752:	4b23      	ldr	r3, [pc, #140]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006758:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006760:	491f      	ldr	r1, [pc, #124]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006770:	d106      	bne.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006772:	4b1b      	ldr	r3, [pc, #108]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	4a1a      	ldr	r2, [pc, #104]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006778:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800677c:	60d3      	str	r3, [r2, #12]
 800677e:	e011      	b.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006784:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006788:	d10c      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3304      	adds	r3, #4
 800678e:	2101      	movs	r1, #1
 8006790:	4618      	mov	r0, r3
 8006792:	f000 f8a9 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 8006796:	4603      	mov	r3, r0
 8006798:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800679a:	7cfb      	ldrb	r3, [r7, #19]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80067a0:	7cfb      	ldrb	r3, [r7, #19]
 80067a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d02b      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067b0:	4b0b      	ldr	r3, [pc, #44]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067be:	4908      	ldr	r1, [pc, #32]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067ce:	d109      	bne.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067d0:	4b03      	ldr	r3, [pc, #12]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	4a02      	ldr	r2, [pc, #8]	@ (80067e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80067d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067da:	60d3      	str	r3, [r2, #12]
 80067dc:	e014      	b.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80067de:	bf00      	nop
 80067e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80067ec:	d10c      	bne.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	3304      	adds	r3, #4
 80067f2:	2101      	movs	r1, #1
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f877 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 80067fa:	4603      	mov	r3, r0
 80067fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067fe:	7cfb      	ldrb	r3, [r7, #19]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8006804:	7cfb      	ldrb	r3, [r7, #19]
 8006806:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006810:	2b00      	cmp	r3, #0
 8006812:	d02f      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006814:	4b2b      	ldr	r3, [pc, #172]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800681a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006822:	4928      	ldr	r1, [pc, #160]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006824:	4313      	orrs	r3, r2
 8006826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800682e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006832:	d10d      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3304      	adds	r3, #4
 8006838:	2102      	movs	r1, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f000 f854 	bl	80068e8 <RCCEx_PLLSAI1_Config>
 8006840:	4603      	mov	r3, r0
 8006842:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006844:	7cfb      	ldrb	r3, [r7, #19]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d014      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800684a:	7cfb      	ldrb	r3, [r7, #19]
 800684c:	74bb      	strb	r3, [r7, #18]
 800684e:	e011      	b.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006858:	d10c      	bne.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	3320      	adds	r3, #32
 800685e:	2102      	movs	r1, #2
 8006860:	4618      	mov	r0, r3
 8006862:	f000 f935 	bl	8006ad0 <RCCEx_PLLSAI2_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800686a:	7cfb      	ldrb	r3, [r7, #19]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006870:	7cfb      	ldrb	r3, [r7, #19]
 8006872:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d00a      	beq.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006880:	4b10      	ldr	r3, [pc, #64]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006882:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006886:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800688e:	490d      	ldr	r1, [pc, #52]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006890:	4313      	orrs	r3, r2
 8006892:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00b      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068a2:	4b08      	ldr	r3, [pc, #32]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068b2:	4904      	ldr	r1, [pc, #16]	@ (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80068ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40021000 	.word	0x40021000

080068c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80068c8:	b480      	push	{r7}
 80068ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80068cc:	4b05      	ldr	r3, [pc, #20]	@ (80068e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a04      	ldr	r2, [pc, #16]	@ (80068e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	6013      	str	r3, [r2, #0]
}
 80068d8:	bf00      	nop
 80068da:	46bd      	mov	sp, r7
 80068dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	40021000 	.word	0x40021000

080068e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068f2:	2300      	movs	r3, #0
 80068f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80068f6:	4b75      	ldr	r3, [pc, #468]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	f003 0303 	and.w	r3, r3, #3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d018      	beq.n	8006934 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006902:	4b72      	ldr	r3, [pc, #456]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	f003 0203 	and.w	r2, r3, #3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	429a      	cmp	r2, r3
 8006910:	d10d      	bne.n	800692e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
       ||
 8006916:	2b00      	cmp	r3, #0
 8006918:	d009      	beq.n	800692e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800691a:	4b6c      	ldr	r3, [pc, #432]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
       ||
 800692a:	429a      	cmp	r2, r3
 800692c:	d047      	beq.n	80069be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	73fb      	strb	r3, [r7, #15]
 8006932:	e044      	b.n	80069be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b03      	cmp	r3, #3
 800693a:	d018      	beq.n	800696e <RCCEx_PLLSAI1_Config+0x86>
 800693c:	2b03      	cmp	r3, #3
 800693e:	d825      	bhi.n	800698c <RCCEx_PLLSAI1_Config+0xa4>
 8006940:	2b01      	cmp	r3, #1
 8006942:	d002      	beq.n	800694a <RCCEx_PLLSAI1_Config+0x62>
 8006944:	2b02      	cmp	r3, #2
 8006946:	d009      	beq.n	800695c <RCCEx_PLLSAI1_Config+0x74>
 8006948:	e020      	b.n	800698c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800694a:	4b60      	ldr	r3, [pc, #384]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d11d      	bne.n	8006992 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800695a:	e01a      	b.n	8006992 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800695c:	4b5b      	ldr	r3, [pc, #364]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006964:	2b00      	cmp	r3, #0
 8006966:	d116      	bne.n	8006996 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800696c:	e013      	b.n	8006996 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800696e:	4b57      	ldr	r3, [pc, #348]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10f      	bne.n	800699a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800697a:	4b54      	ldr	r3, [pc, #336]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d109      	bne.n	800699a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800698a:	e006      	b.n	800699a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800698c:	2301      	movs	r3, #1
 800698e:	73fb      	strb	r3, [r7, #15]
      break;
 8006990:	e004      	b.n	800699c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006992:	bf00      	nop
 8006994:	e002      	b.n	800699c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006996:	bf00      	nop
 8006998:	e000      	b.n	800699c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800699a:	bf00      	nop
    }

    if(status == HAL_OK)
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10d      	bne.n	80069be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80069a2:	4b4a      	ldr	r3, [pc, #296]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069a4:	68db      	ldr	r3, [r3, #12]
 80069a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6819      	ldr	r1, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	3b01      	subs	r3, #1
 80069b4:	011b      	lsls	r3, r3, #4
 80069b6:	430b      	orrs	r3, r1
 80069b8:	4944      	ldr	r1, [pc, #272]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ba:	4313      	orrs	r3, r2
 80069bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80069be:	7bfb      	ldrb	r3, [r7, #15]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d17d      	bne.n	8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80069c4:	4b41      	ldr	r3, [pc, #260]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a40      	ldr	r2, [pc, #256]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069d0:	f7fc fff2 	bl	80039b8 <HAL_GetTick>
 80069d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069d6:	e009      	b.n	80069ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80069d8:	f7fc ffee 	bl	80039b8 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d902      	bls.n	80069ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	73fb      	strb	r3, [r7, #15]
        break;
 80069ea:	e005      	b.n	80069f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80069ec:	4b37      	ldr	r3, [pc, #220]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1ef      	bne.n	80069d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80069f8:	7bfb      	ldrb	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d160      	bne.n	8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d111      	bne.n	8006a28 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a04:	4b31      	ldr	r3, [pc, #196]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a06:	691b      	ldr	r3, [r3, #16]
 8006a08:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6892      	ldr	r2, [r2, #8]
 8006a14:	0211      	lsls	r1, r2, #8
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	68d2      	ldr	r2, [r2, #12]
 8006a1a:	0912      	lsrs	r2, r2, #4
 8006a1c:	0452      	lsls	r2, r2, #17
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	492a      	ldr	r1, [pc, #168]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	610b      	str	r3, [r1, #16]
 8006a26:	e027      	b.n	8006a78 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d112      	bne.n	8006a54 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a2e:	4b27      	ldr	r3, [pc, #156]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8006a36:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6892      	ldr	r2, [r2, #8]
 8006a3e:	0211      	lsls	r1, r2, #8
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	6912      	ldr	r2, [r2, #16]
 8006a44:	0852      	lsrs	r2, r2, #1
 8006a46:	3a01      	subs	r2, #1
 8006a48:	0552      	lsls	r2, r2, #21
 8006a4a:	430a      	orrs	r2, r1
 8006a4c:	491f      	ldr	r1, [pc, #124]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	610b      	str	r3, [r1, #16]
 8006a52:	e011      	b.n	8006a78 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006a54:	4b1d      	ldr	r3, [pc, #116]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006a5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	6892      	ldr	r2, [r2, #8]
 8006a64:	0211      	lsls	r1, r2, #8
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6952      	ldr	r2, [r2, #20]
 8006a6a:	0852      	lsrs	r2, r2, #1
 8006a6c:	3a01      	subs	r2, #1
 8006a6e:	0652      	lsls	r2, r2, #25
 8006a70:	430a      	orrs	r2, r1
 8006a72:	4916      	ldr	r1, [pc, #88]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a74:	4313      	orrs	r3, r2
 8006a76:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006a78:	4b14      	ldr	r3, [pc, #80]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a13      	ldr	r2, [pc, #76]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006a7e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a84:	f7fc ff98 	bl	80039b8 <HAL_GetTick>
 8006a88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006a8a:	e009      	b.n	8006aa0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006a8c:	f7fc ff94 	bl	80039b8 <HAL_GetTick>
 8006a90:	4602      	mov	r2, r0
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	1ad3      	subs	r3, r2, r3
 8006a96:	2b02      	cmp	r3, #2
 8006a98:	d902      	bls.n	8006aa0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	73fb      	strb	r3, [r7, #15]
          break;
 8006a9e:	e005      	b.n	8006aac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0ef      	beq.n	8006a8c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006aac:	7bfb      	ldrb	r3, [r7, #15]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006ab2:	4b06      	ldr	r3, [pc, #24]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ab4:	691a      	ldr	r2, [r3, #16]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	699b      	ldr	r3, [r3, #24]
 8006aba:	4904      	ldr	r1, [pc, #16]	@ (8006acc <RCCEx_PLLSAI1_Config+0x1e4>)
 8006abc:	4313      	orrs	r3, r2
 8006abe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	40021000 	.word	0x40021000

08006ad0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006ade:	4b6a      	ldr	r3, [pc, #424]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d018      	beq.n	8006b1c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006aea:	4b67      	ldr	r3, [pc, #412]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006aec:	68db      	ldr	r3, [r3, #12]
 8006aee:	f003 0203 	and.w	r2, r3, #3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d10d      	bne.n	8006b16 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
       ||
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d009      	beq.n	8006b16 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006b02:	4b61      	ldr	r3, [pc, #388]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	091b      	lsrs	r3, r3, #4
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
       ||
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d047      	beq.n	8006ba6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	73fb      	strb	r3, [r7, #15]
 8006b1a:	e044      	b.n	8006ba6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d018      	beq.n	8006b56 <RCCEx_PLLSAI2_Config+0x86>
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d825      	bhi.n	8006b74 <RCCEx_PLLSAI2_Config+0xa4>
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d002      	beq.n	8006b32 <RCCEx_PLLSAI2_Config+0x62>
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d009      	beq.n	8006b44 <RCCEx_PLLSAI2_Config+0x74>
 8006b30:	e020      	b.n	8006b74 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006b32:	4b55      	ldr	r3, [pc, #340]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d11d      	bne.n	8006b7a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b42:	e01a      	b.n	8006b7a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006b44:	4b50      	ldr	r3, [pc, #320]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d116      	bne.n	8006b7e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b54:	e013      	b.n	8006b7e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006b56:	4b4c      	ldr	r3, [pc, #304]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10f      	bne.n	8006b82 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006b62:	4b49      	ldr	r3, [pc, #292]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d109      	bne.n	8006b82 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006b72:	e006      	b.n	8006b82 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	73fb      	strb	r3, [r7, #15]
      break;
 8006b78:	e004      	b.n	8006b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b7a:	bf00      	nop
 8006b7c:	e002      	b.n	8006b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b7e:	bf00      	nop
 8006b80:	e000      	b.n	8006b84 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006b82:	bf00      	nop
    }

    if(status == HAL_OK)
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10d      	bne.n	8006ba6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006b8a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6819      	ldr	r1, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	430b      	orrs	r3, r1
 8006ba0:	4939      	ldr	r1, [pc, #228]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d167      	bne.n	8006c7c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006bac:	4b36      	ldr	r3, [pc, #216]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a35      	ldr	r2, [pc, #212]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006bb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bb8:	f7fc fefe 	bl	80039b8 <HAL_GetTick>
 8006bbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bbe:	e009      	b.n	8006bd4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006bc0:	f7fc fefa 	bl	80039b8 <HAL_GetTick>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d902      	bls.n	8006bd4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	73fb      	strb	r3, [r7, #15]
        break;
 8006bd2:	e005      	b.n	8006be0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1ef      	bne.n	8006bc0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006be0:	7bfb      	ldrb	r3, [r7, #15]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d14a      	bne.n	8006c7c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d111      	bne.n	8006c10 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006bec:	4b26      	ldr	r3, [pc, #152]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8006bf4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bf8:	687a      	ldr	r2, [r7, #4]
 8006bfa:	6892      	ldr	r2, [r2, #8]
 8006bfc:	0211      	lsls	r1, r2, #8
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	68d2      	ldr	r2, [r2, #12]
 8006c02:	0912      	lsrs	r2, r2, #4
 8006c04:	0452      	lsls	r2, r2, #17
 8006c06:	430a      	orrs	r2, r1
 8006c08:	491f      	ldr	r1, [pc, #124]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	614b      	str	r3, [r1, #20]
 8006c0e:	e011      	b.n	8006c34 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006c10:	4b1d      	ldr	r3, [pc, #116]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8006c18:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	6892      	ldr	r2, [r2, #8]
 8006c20:	0211      	lsls	r1, r2, #8
 8006c22:	687a      	ldr	r2, [r7, #4]
 8006c24:	6912      	ldr	r2, [r2, #16]
 8006c26:	0852      	lsrs	r2, r2, #1
 8006c28:	3a01      	subs	r2, #1
 8006c2a:	0652      	lsls	r2, r2, #25
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	4916      	ldr	r1, [pc, #88]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006c34:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a13      	ldr	r2, [pc, #76]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c3e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c40:	f7fc feba 	bl	80039b8 <HAL_GetTick>
 8006c44:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c46:	e009      	b.n	8006c5c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006c48:	f7fc feb6 	bl	80039b8 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d902      	bls.n	8006c5c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	73fb      	strb	r3, [r7, #15]
          break;
 8006c5a:	e005      	b.n	8006c68 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d0ef      	beq.n	8006c48 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006c68:	7bfb      	ldrb	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d106      	bne.n	8006c7c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006c6e:	4b06      	ldr	r3, [pc, #24]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c70:	695a      	ldr	r2, [r3, #20]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	4904      	ldr	r1, [pc, #16]	@ (8006c88 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	40021000 	.word	0x40021000

08006c8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d101      	bne.n	8006c9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e095      	b.n	8006dca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d108      	bne.n	8006cb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cae:	d009      	beq.n	8006cc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	61da      	str	r2, [r3, #28]
 8006cb6:	e005      	b.n	8006cc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f877 	bl	8006dd2 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2202      	movs	r2, #2
 8006ce8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cfa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d04:	d902      	bls.n	8006d0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e002      	b.n	8006d12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006d10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	68db      	ldr	r3, [r3, #12]
 8006d16:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006d1a:	d007      	beq.n	8006d2c <HAL_SPI_Init+0xa0>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d24:	d002      	beq.n	8006d2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	691b      	ldr	r3, [r3, #16]
 8006d42:	f003 0302 	and.w	r3, r3, #2
 8006d46:	431a      	orrs	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
 8006d50:	431a      	orrs	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	699b      	ldr	r3, [r3, #24]
 8006d56:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	69db      	ldr	r3, [r3, #28]
 8006d60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d6e:	ea42 0103 	orr.w	r1, r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d76:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	0c1b      	lsrs	r3, r3, #16
 8006d88:	f003 0204 	and.w	r2, r3, #4
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d90:	f003 0310 	and.w	r3, r3, #16
 8006d94:	431a      	orrs	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d9a:	f003 0308 	and.w	r3, r3, #8
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006da8:	ea42 0103 	orr.w	r1, r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3710      	adds	r7, #16
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006de6:	b580      	push	{r7, lr}
 8006de8:	b08a      	sub	sp, #40	@ 0x28
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	60f8      	str	r0, [r7, #12]
 8006dee:	60b9      	str	r1, [r7, #8]
 8006df0:	607a      	str	r2, [r7, #4]
 8006df2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006df4:	2301      	movs	r3, #1
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006df8:	f7fc fdde 	bl	80039b8 <HAL_GetTick>
 8006dfc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e04:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006e0c:	887b      	ldrh	r3, [r7, #2]
 8006e0e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006e10:	887b      	ldrh	r3, [r7, #2]
 8006e12:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006e14:	7ffb      	ldrb	r3, [r7, #31]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d00c      	beq.n	8006e34 <HAL_SPI_TransmitReceive+0x4e>
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e20:	d106      	bne.n	8006e30 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d102      	bne.n	8006e30 <HAL_SPI_TransmitReceive+0x4a>
 8006e2a:	7ffb      	ldrb	r3, [r7, #31]
 8006e2c:	2b04      	cmp	r3, #4
 8006e2e:	d001      	beq.n	8006e34 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006e30:	2302      	movs	r3, #2
 8006e32:	e1f3      	b.n	800721c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d005      	beq.n	8006e46 <HAL_SPI_TransmitReceive+0x60>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_SPI_TransmitReceive+0x60>
 8006e40:	887b      	ldrh	r3, [r7, #2]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e1e8      	b.n	800721c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d101      	bne.n	8006e58 <HAL_SPI_TransmitReceive+0x72>
 8006e54:	2302      	movs	r3, #2
 8006e56:	e1e1      	b.n	800721c <HAL_SPI_TransmitReceive+0x436>
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b04      	cmp	r3, #4
 8006e6a:	d003      	beq.n	8006e74 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2205      	movs	r2, #5
 8006e70:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	887a      	ldrh	r2, [r7, #2]
 8006e84:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	887a      	ldrh	r2, [r7, #2]
 8006e8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	68ba      	ldr	r2, [r7, #8]
 8006e94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	887a      	ldrh	r2, [r7, #2]
 8006e9a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	887a      	ldrh	r2, [r7, #2]
 8006ea0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	68db      	ldr	r3, [r3, #12]
 8006eb2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006eb6:	d802      	bhi.n	8006ebe <HAL_SPI_TransmitReceive+0xd8>
 8006eb8:	8abb      	ldrh	r3, [r7, #20]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d908      	bls.n	8006ed0 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006ecc:	605a      	str	r2, [r3, #4]
 8006ece:	e007      	b.n	8006ee0 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ede:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eea:	2b40      	cmp	r3, #64	@ 0x40
 8006eec:	d007      	beq.n	8006efe <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006efc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006f06:	f240 8083 	bls.w	8007010 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <HAL_SPI_TransmitReceive+0x132>
 8006f12:	8afb      	ldrh	r3, [r7, #22]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d16f      	bne.n	8006ff8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f1c:	881a      	ldrh	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f28:	1c9a      	adds	r2, r3, #2
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f3c:	e05c      	b.n	8006ff8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	2b02      	cmp	r3, #2
 8006f4a:	d11b      	bne.n	8006f84 <HAL_SPI_TransmitReceive+0x19e>
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d016      	beq.n	8006f84 <HAL_SPI_TransmitReceive+0x19e>
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d113      	bne.n	8006f84 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f60:	881a      	ldrh	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f6c:	1c9a      	adds	r2, r3, #2
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d11c      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x1e6>
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d016      	beq.n	8006fcc <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa8:	b292      	uxth	r2, r2
 8006faa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb0:	1c9a      	adds	r2, r3, #2
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	b29a      	uxth	r2, r3
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006fcc:	f7fc fcf4 	bl	80039b8 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	d80d      	bhi.n	8006ff8 <HAL_SPI_TransmitReceive+0x212>
 8006fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fe2:	d009      	beq.n	8006ff8 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	e111      	b.n	800721c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d19d      	bne.n	8006f3e <HAL_SPI_TransmitReceive+0x158>
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d197      	bne.n	8006f3e <HAL_SPI_TransmitReceive+0x158>
 800700e:	e0e5      	b.n	80071dc <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d003      	beq.n	8007020 <HAL_SPI_TransmitReceive+0x23a>
 8007018:	8afb      	ldrh	r3, [r7, #22]
 800701a:	2b01      	cmp	r3, #1
 800701c:	f040 80d1 	bne.w	80071c2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007024:	b29b      	uxth	r3, r3
 8007026:	2b01      	cmp	r3, #1
 8007028:	d912      	bls.n	8007050 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	881a      	ldrh	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	1c9a      	adds	r2, r3, #2
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007044:	b29b      	uxth	r3, r3
 8007046:	3b02      	subs	r3, #2
 8007048:	b29a      	uxth	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800704e:	e0b8      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	7812      	ldrb	r2, [r2, #0]
 800705c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007076:	e0a4      	b.n	80071c2 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b02      	cmp	r3, #2
 8007084:	d134      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x30a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800708a:	b29b      	uxth	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d02f      	beq.n	80070f0 <HAL_SPI_TransmitReceive+0x30a>
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	2b01      	cmp	r3, #1
 8007094:	d12c      	bne.n	80070f0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800709a:	b29b      	uxth	r3, r3
 800709c:	2b01      	cmp	r3, #1
 800709e:	d912      	bls.n	80070c6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a4:	881a      	ldrh	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070b0:	1c9a      	adds	r2, r3, #2
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ba:	b29b      	uxth	r3, r3
 80070bc:	3b02      	subs	r3, #2
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070c4:	e012      	b.n	80070ec <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	330c      	adds	r3, #12
 80070d0:	7812      	ldrb	r2, [r2, #0]
 80070d2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	3b01      	subs	r3, #1
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	689b      	ldr	r3, [r3, #8]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b01      	cmp	r3, #1
 80070fc:	d148      	bne.n	8007190 <HAL_SPI_TransmitReceive+0x3aa>
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d042      	beq.n	8007190 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007110:	b29b      	uxth	r3, r3
 8007112:	2b01      	cmp	r3, #1
 8007114:	d923      	bls.n	800715e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007120:	b292      	uxth	r2, r2
 8007122:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007128:	1c9a      	adds	r2, r3, #2
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007134:	b29b      	uxth	r3, r3
 8007136:	3b02      	subs	r3, #2
 8007138:	b29a      	uxth	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d81f      	bhi.n	800718c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800715a:	605a      	str	r2, [r3, #4]
 800715c:	e016      	b.n	800718c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f103 020c 	add.w	r2, r3, #12
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	b2d2      	uxtb	r2, r2
 800716e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007174:	1c5a      	adds	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800718c:	2301      	movs	r3, #1
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007190:	f7fc fc12 	bl	80039b8 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800719c:	429a      	cmp	r2, r3
 800719e:	d803      	bhi.n	80071a8 <HAL_SPI_TransmitReceive+0x3c2>
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071a6:	d102      	bne.n	80071ae <HAL_SPI_TransmitReceive+0x3c8>
 80071a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2201      	movs	r2, #1
 80071b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e02c      	b.n	800721c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f47f af55 	bne.w	8007078 <HAL_SPI_TransmitReceive+0x292>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	f47f af4e 	bne.w	8007078 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071dc:	6a3a      	ldr	r2, [r7, #32]
 80071de:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071e0:	68f8      	ldr	r0, [r7, #12]
 80071e2:	f000 f94b 	bl	800747c <SPI_EndRxTxTransaction>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d008      	beq.n	80071fe <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	2220      	movs	r2, #32
 80071f0:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e00e      	b.n	800721c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e000      	b.n	800721c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800721a:	2300      	movs	r3, #0
  }
}
 800721c:	4618      	mov	r0, r3
 800721e:	3728      	adds	r7, #40	@ 0x28
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007232:	b2db      	uxtb	r3, r3
}
 8007234:	4618      	mov	r0, r3
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b088      	sub	sp, #32
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	603b      	str	r3, [r7, #0]
 800724c:	4613      	mov	r3, r2
 800724e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007250:	f7fc fbb2 	bl	80039b8 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	1a9b      	subs	r3, r3, r2
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4413      	add	r3, r2
 800725e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007260:	f7fc fbaa 	bl	80039b8 <HAL_GetTick>
 8007264:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007266:	4b39      	ldr	r3, [pc, #228]	@ (800734c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	015b      	lsls	r3, r3, #5
 800726c:	0d1b      	lsrs	r3, r3, #20
 800726e:	69fa      	ldr	r2, [r7, #28]
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007276:	e054      	b.n	8007322 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800727e:	d050      	beq.n	8007322 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007280:	f7fc fb9a 	bl	80039b8 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	429a      	cmp	r2, r3
 800728e:	d902      	bls.n	8007296 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d13d      	bne.n	8007312 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80072a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072ae:	d111      	bne.n	80072d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072b8:	d004      	beq.n	80072c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80072c2:	d107      	bne.n	80072d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072dc:	d10f      	bne.n	80072fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681a      	ldr	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800730e:	2303      	movs	r3, #3
 8007310:	e017      	b.n	8007342 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d101      	bne.n	800731c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	3b01      	subs	r3, #1
 8007320:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	689a      	ldr	r2, [r3, #8]
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	4013      	ands	r3, r2
 800732c:	68ba      	ldr	r2, [r7, #8]
 800732e:	429a      	cmp	r2, r3
 8007330:	bf0c      	ite	eq
 8007332:	2301      	moveq	r3, #1
 8007334:	2300      	movne	r3, #0
 8007336:	b2db      	uxtb	r3, r3
 8007338:	461a      	mov	r2, r3
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	429a      	cmp	r2, r3
 800733e:	d19b      	bne.n	8007278 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007340:	2300      	movs	r3, #0
}
 8007342:	4618      	mov	r0, r3
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	20000010 	.word	0x20000010

08007350 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	@ 0x28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800735e:	2300      	movs	r3, #0
 8007360:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007362:	f7fc fb29 	bl	80039b8 <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	4413      	add	r3, r2
 8007370:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007372:	f7fc fb21 	bl	80039b8 <HAL_GetTick>
 8007376:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	330c      	adds	r3, #12
 800737e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007380:	4b3d      	ldr	r3, [pc, #244]	@ (8007478 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	4613      	mov	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	4413      	add	r3, r2
 800738a:	00da      	lsls	r2, r3, #3
 800738c:	1ad3      	subs	r3, r2, r3
 800738e:	0d1b      	lsrs	r3, r3, #20
 8007390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007392:	fb02 f303 	mul.w	r3, r2, r3
 8007396:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007398:	e060      	b.n	800745c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80073a0:	d107      	bne.n	80073b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d104      	bne.n	80073b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80073b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073b8:	d050      	beq.n	800745c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80073ba:	f7fc fafd 	bl	80039b8 <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	6a3b      	ldr	r3, [r7, #32]
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d902      	bls.n	80073d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d13d      	bne.n	800744c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80073de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073e8:	d111      	bne.n	800740e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f2:	d004      	beq.n	80073fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073fc:	d107      	bne.n	800740e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800740c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007412:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007416:	d10f      	bne.n	8007438 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007426:	601a      	str	r2, [r3, #0]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007436:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2200      	movs	r2, #0
 8007444:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e010      	b.n	800746e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007452:	2300      	movs	r3, #0
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	3b01      	subs	r3, #1
 800745a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	689a      	ldr	r2, [r3, #8]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	4013      	ands	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	429a      	cmp	r2, r3
 800746a:	d196      	bne.n	800739a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3728      	adds	r7, #40	@ 0x28
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	20000010 	.word	0x20000010

0800747c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b086      	sub	sp, #24
 8007480:	af02      	add	r7, sp, #8
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	2200      	movs	r2, #0
 8007490:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f7ff ff5b 	bl	8007350 <SPI_WaitFifoStateUntilTimeout>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d007      	beq.n	80074b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a4:	f043 0220 	orr.w	r2, r3, #32
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074ac:	2303      	movs	r3, #3
 80074ae:	e027      	b.n	8007500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	2180      	movs	r1, #128	@ 0x80
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7ff fec0 	bl	8007240 <SPI_WaitFlagStateUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d007      	beq.n	80074d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e014      	b.n	8007500 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	9300      	str	r3, [sp, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	2200      	movs	r2, #0
 80074de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f7ff ff34 	bl	8007350 <SPI_WaitFifoStateUntilTimeout>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d007      	beq.n	80074fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074f2:	f043 0220 	orr.w	r2, r3, #32
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e000      	b.n	8007500 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e040      	b.n	800759c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d106      	bne.n	8007530 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f7fa fb5e 	bl	8001bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2224      	movs	r2, #36	@ 0x24
 8007534:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0201 	bic.w	r2, r2, #1
 8007544:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 fb6a 	bl	8007c28 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f8af 	bl	80076b8 <UART_SetConfig>
 800755a:	4603      	mov	r3, r0
 800755c:	2b01      	cmp	r3, #1
 800755e:	d101      	bne.n	8007564 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e01b      	b.n	800759c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007572:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689a      	ldr	r2, [r3, #8]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007582:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	681a      	ldr	r2, [r3, #0]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fbe9 	bl	8007d6c <UART_CheckIdleState>
 800759a:	4603      	mov	r3, r0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	@ 0x28
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	603b      	str	r3, [r7, #0]
 80075b0:	4613      	mov	r3, r2
 80075b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d177      	bne.n	80076ac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_UART_Transmit+0x24>
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e070      	b.n	80076ae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2221      	movs	r2, #33	@ 0x21
 80075d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80075da:	f7fc f9ed 	bl	80039b8 <HAL_GetTick>
 80075de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	88fa      	ldrh	r2, [r7, #6]
 80075ec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80075f8:	d108      	bne.n	800760c <HAL_UART_Transmit+0x68>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d104      	bne.n	800760c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007602:	2300      	movs	r3, #0
 8007604:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	61bb      	str	r3, [r7, #24]
 800760a:	e003      	b.n	8007614 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007610:	2300      	movs	r3, #0
 8007612:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007614:	e02f      	b.n	8007676 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2200      	movs	r2, #0
 800761e:	2180      	movs	r1, #128	@ 0x80
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 fc4b 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d004      	beq.n	8007636 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2220      	movs	r2, #32
 8007630:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8007632:	2303      	movs	r3, #3
 8007634:	e03b      	b.n	80076ae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8007636:	69fb      	ldr	r3, [r7, #28]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	881a      	ldrh	r2, [r3, #0]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007648:	b292      	uxth	r2, r2
 800764a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	3302      	adds	r3, #2
 8007650:	61bb      	str	r3, [r7, #24]
 8007652:	e007      	b.n	8007664 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007654:	69fb      	ldr	r3, [r7, #28]
 8007656:	781a      	ldrb	r2, [r3, #0]
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	3301      	adds	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800766a:	b29b      	uxth	r3, r3
 800766c:	3b01      	subs	r3, #1
 800766e:	b29a      	uxth	r2, r3
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800767c:	b29b      	uxth	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1c9      	bne.n	8007616 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	2200      	movs	r2, #0
 800768a:	2140      	movs	r1, #64	@ 0x40
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fc15 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d004      	beq.n	80076a2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2220      	movs	r2, #32
 800769c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800769e:	2303      	movs	r3, #3
 80076a0:	e005      	b.n	80076ae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2220      	movs	r2, #32
 80076a6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80076a8:	2300      	movs	r3, #0
 80076aa:	e000      	b.n	80076ae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80076ac:	2302      	movs	r3, #2
  }
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076bc:	b08a      	sub	sp, #40	@ 0x28
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	691b      	ldr	r3, [r3, #16]
 80076d0:	431a      	orrs	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	695b      	ldr	r3, [r3, #20]
 80076d6:	431a      	orrs	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	4313      	orrs	r3, r2
 80076de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	4ba4      	ldr	r3, [pc, #656]	@ (8007978 <UART_SetConfig+0x2c0>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	6812      	ldr	r2, [r2, #0]
 80076ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80076f0:	430b      	orrs	r3, r1
 80076f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	430a      	orrs	r2, r1
 8007708:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a99      	ldr	r2, [pc, #612]	@ (800797c <UART_SetConfig+0x2c4>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d004      	beq.n	8007724 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007720:	4313      	orrs	r3, r2
 8007722:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a90      	ldr	r2, [pc, #576]	@ (8007980 <UART_SetConfig+0x2c8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d126      	bne.n	8007790 <UART_SetConfig+0xd8>
 8007742:	4b90      	ldr	r3, [pc, #576]	@ (8007984 <UART_SetConfig+0x2cc>)
 8007744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007748:	f003 0303 	and.w	r3, r3, #3
 800774c:	2b03      	cmp	r3, #3
 800774e:	d81b      	bhi.n	8007788 <UART_SetConfig+0xd0>
 8007750:	a201      	add	r2, pc, #4	@ (adr r2, 8007758 <UART_SetConfig+0xa0>)
 8007752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007756:	bf00      	nop
 8007758:	08007769 	.word	0x08007769
 800775c:	08007779 	.word	0x08007779
 8007760:	08007771 	.word	0x08007771
 8007764:	08007781 	.word	0x08007781
 8007768:	2301      	movs	r3, #1
 800776a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800776e:	e116      	b.n	800799e <UART_SetConfig+0x2e6>
 8007770:	2302      	movs	r3, #2
 8007772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007776:	e112      	b.n	800799e <UART_SetConfig+0x2e6>
 8007778:	2304      	movs	r3, #4
 800777a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800777e:	e10e      	b.n	800799e <UART_SetConfig+0x2e6>
 8007780:	2308      	movs	r3, #8
 8007782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007786:	e10a      	b.n	800799e <UART_SetConfig+0x2e6>
 8007788:	2310      	movs	r3, #16
 800778a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800778e:	e106      	b.n	800799e <UART_SetConfig+0x2e6>
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a7c      	ldr	r2, [pc, #496]	@ (8007988 <UART_SetConfig+0x2d0>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d138      	bne.n	800780c <UART_SetConfig+0x154>
 800779a:	4b7a      	ldr	r3, [pc, #488]	@ (8007984 <UART_SetConfig+0x2cc>)
 800779c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077a0:	f003 030c 	and.w	r3, r3, #12
 80077a4:	2b0c      	cmp	r3, #12
 80077a6:	d82d      	bhi.n	8007804 <UART_SetConfig+0x14c>
 80077a8:	a201      	add	r2, pc, #4	@ (adr r2, 80077b0 <UART_SetConfig+0xf8>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077e5 	.word	0x080077e5
 80077b4:	08007805 	.word	0x08007805
 80077b8:	08007805 	.word	0x08007805
 80077bc:	08007805 	.word	0x08007805
 80077c0:	080077f5 	.word	0x080077f5
 80077c4:	08007805 	.word	0x08007805
 80077c8:	08007805 	.word	0x08007805
 80077cc:	08007805 	.word	0x08007805
 80077d0:	080077ed 	.word	0x080077ed
 80077d4:	08007805 	.word	0x08007805
 80077d8:	08007805 	.word	0x08007805
 80077dc:	08007805 	.word	0x08007805
 80077e0:	080077fd 	.word	0x080077fd
 80077e4:	2300      	movs	r3, #0
 80077e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077ea:	e0d8      	b.n	800799e <UART_SetConfig+0x2e6>
 80077ec:	2302      	movs	r3, #2
 80077ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077f2:	e0d4      	b.n	800799e <UART_SetConfig+0x2e6>
 80077f4:	2304      	movs	r3, #4
 80077f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80077fa:	e0d0      	b.n	800799e <UART_SetConfig+0x2e6>
 80077fc:	2308      	movs	r3, #8
 80077fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007802:	e0cc      	b.n	800799e <UART_SetConfig+0x2e6>
 8007804:	2310      	movs	r3, #16
 8007806:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800780a:	e0c8      	b.n	800799e <UART_SetConfig+0x2e6>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a5e      	ldr	r2, [pc, #376]	@ (800798c <UART_SetConfig+0x2d4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d125      	bne.n	8007862 <UART_SetConfig+0x1aa>
 8007816:	4b5b      	ldr	r3, [pc, #364]	@ (8007984 <UART_SetConfig+0x2cc>)
 8007818:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800781c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007820:	2b30      	cmp	r3, #48	@ 0x30
 8007822:	d016      	beq.n	8007852 <UART_SetConfig+0x19a>
 8007824:	2b30      	cmp	r3, #48	@ 0x30
 8007826:	d818      	bhi.n	800785a <UART_SetConfig+0x1a2>
 8007828:	2b20      	cmp	r3, #32
 800782a:	d00a      	beq.n	8007842 <UART_SetConfig+0x18a>
 800782c:	2b20      	cmp	r3, #32
 800782e:	d814      	bhi.n	800785a <UART_SetConfig+0x1a2>
 8007830:	2b00      	cmp	r3, #0
 8007832:	d002      	beq.n	800783a <UART_SetConfig+0x182>
 8007834:	2b10      	cmp	r3, #16
 8007836:	d008      	beq.n	800784a <UART_SetConfig+0x192>
 8007838:	e00f      	b.n	800785a <UART_SetConfig+0x1a2>
 800783a:	2300      	movs	r3, #0
 800783c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007840:	e0ad      	b.n	800799e <UART_SetConfig+0x2e6>
 8007842:	2302      	movs	r3, #2
 8007844:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007848:	e0a9      	b.n	800799e <UART_SetConfig+0x2e6>
 800784a:	2304      	movs	r3, #4
 800784c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007850:	e0a5      	b.n	800799e <UART_SetConfig+0x2e6>
 8007852:	2308      	movs	r3, #8
 8007854:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007858:	e0a1      	b.n	800799e <UART_SetConfig+0x2e6>
 800785a:	2310      	movs	r3, #16
 800785c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007860:	e09d      	b.n	800799e <UART_SetConfig+0x2e6>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a4a      	ldr	r2, [pc, #296]	@ (8007990 <UART_SetConfig+0x2d8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d125      	bne.n	80078b8 <UART_SetConfig+0x200>
 800786c:	4b45      	ldr	r3, [pc, #276]	@ (8007984 <UART_SetConfig+0x2cc>)
 800786e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007872:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007876:	2bc0      	cmp	r3, #192	@ 0xc0
 8007878:	d016      	beq.n	80078a8 <UART_SetConfig+0x1f0>
 800787a:	2bc0      	cmp	r3, #192	@ 0xc0
 800787c:	d818      	bhi.n	80078b0 <UART_SetConfig+0x1f8>
 800787e:	2b80      	cmp	r3, #128	@ 0x80
 8007880:	d00a      	beq.n	8007898 <UART_SetConfig+0x1e0>
 8007882:	2b80      	cmp	r3, #128	@ 0x80
 8007884:	d814      	bhi.n	80078b0 <UART_SetConfig+0x1f8>
 8007886:	2b00      	cmp	r3, #0
 8007888:	d002      	beq.n	8007890 <UART_SetConfig+0x1d8>
 800788a:	2b40      	cmp	r3, #64	@ 0x40
 800788c:	d008      	beq.n	80078a0 <UART_SetConfig+0x1e8>
 800788e:	e00f      	b.n	80078b0 <UART_SetConfig+0x1f8>
 8007890:	2300      	movs	r3, #0
 8007892:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007896:	e082      	b.n	800799e <UART_SetConfig+0x2e6>
 8007898:	2302      	movs	r3, #2
 800789a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800789e:	e07e      	b.n	800799e <UART_SetConfig+0x2e6>
 80078a0:	2304      	movs	r3, #4
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078a6:	e07a      	b.n	800799e <UART_SetConfig+0x2e6>
 80078a8:	2308      	movs	r3, #8
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078ae:	e076      	b.n	800799e <UART_SetConfig+0x2e6>
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078b6:	e072      	b.n	800799e <UART_SetConfig+0x2e6>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a35      	ldr	r2, [pc, #212]	@ (8007994 <UART_SetConfig+0x2dc>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d12a      	bne.n	8007918 <UART_SetConfig+0x260>
 80078c2:	4b30      	ldr	r3, [pc, #192]	@ (8007984 <UART_SetConfig+0x2cc>)
 80078c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80078cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078d0:	d01a      	beq.n	8007908 <UART_SetConfig+0x250>
 80078d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80078d6:	d81b      	bhi.n	8007910 <UART_SetConfig+0x258>
 80078d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078dc:	d00c      	beq.n	80078f8 <UART_SetConfig+0x240>
 80078de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078e2:	d815      	bhi.n	8007910 <UART_SetConfig+0x258>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d003      	beq.n	80078f0 <UART_SetConfig+0x238>
 80078e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078ec:	d008      	beq.n	8007900 <UART_SetConfig+0x248>
 80078ee:	e00f      	b.n	8007910 <UART_SetConfig+0x258>
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078f6:	e052      	b.n	800799e <UART_SetConfig+0x2e6>
 80078f8:	2302      	movs	r3, #2
 80078fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80078fe:	e04e      	b.n	800799e <UART_SetConfig+0x2e6>
 8007900:	2304      	movs	r3, #4
 8007902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007906:	e04a      	b.n	800799e <UART_SetConfig+0x2e6>
 8007908:	2308      	movs	r3, #8
 800790a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800790e:	e046      	b.n	800799e <UART_SetConfig+0x2e6>
 8007910:	2310      	movs	r3, #16
 8007912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007916:	e042      	b.n	800799e <UART_SetConfig+0x2e6>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a17      	ldr	r2, [pc, #92]	@ (800797c <UART_SetConfig+0x2c4>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d13a      	bne.n	8007998 <UART_SetConfig+0x2e0>
 8007922:	4b18      	ldr	r3, [pc, #96]	@ (8007984 <UART_SetConfig+0x2cc>)
 8007924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007928:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800792c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007930:	d01a      	beq.n	8007968 <UART_SetConfig+0x2b0>
 8007932:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007936:	d81b      	bhi.n	8007970 <UART_SetConfig+0x2b8>
 8007938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800793c:	d00c      	beq.n	8007958 <UART_SetConfig+0x2a0>
 800793e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007942:	d815      	bhi.n	8007970 <UART_SetConfig+0x2b8>
 8007944:	2b00      	cmp	r3, #0
 8007946:	d003      	beq.n	8007950 <UART_SetConfig+0x298>
 8007948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800794c:	d008      	beq.n	8007960 <UART_SetConfig+0x2a8>
 800794e:	e00f      	b.n	8007970 <UART_SetConfig+0x2b8>
 8007950:	2300      	movs	r3, #0
 8007952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007956:	e022      	b.n	800799e <UART_SetConfig+0x2e6>
 8007958:	2302      	movs	r3, #2
 800795a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800795e:	e01e      	b.n	800799e <UART_SetConfig+0x2e6>
 8007960:	2304      	movs	r3, #4
 8007962:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007966:	e01a      	b.n	800799e <UART_SetConfig+0x2e6>
 8007968:	2308      	movs	r3, #8
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800796e:	e016      	b.n	800799e <UART_SetConfig+0x2e6>
 8007970:	2310      	movs	r3, #16
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007976:	e012      	b.n	800799e <UART_SetConfig+0x2e6>
 8007978:	efff69f3 	.word	0xefff69f3
 800797c:	40008000 	.word	0x40008000
 8007980:	40013800 	.word	0x40013800
 8007984:	40021000 	.word	0x40021000
 8007988:	40004400 	.word	0x40004400
 800798c:	40004800 	.word	0x40004800
 8007990:	40004c00 	.word	0x40004c00
 8007994:	40005000 	.word	0x40005000
 8007998:	2310      	movs	r3, #16
 800799a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a9f      	ldr	r2, [pc, #636]	@ (8007c20 <UART_SetConfig+0x568>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d17a      	bne.n	8007a9e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80079a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d824      	bhi.n	80079fa <UART_SetConfig+0x342>
 80079b0:	a201      	add	r2, pc, #4	@ (adr r2, 80079b8 <UART_SetConfig+0x300>)
 80079b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b6:	bf00      	nop
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079fb 	.word	0x080079fb
 80079c0:	080079e5 	.word	0x080079e5
 80079c4:	080079fb 	.word	0x080079fb
 80079c8:	080079eb 	.word	0x080079eb
 80079cc:	080079fb 	.word	0x080079fb
 80079d0:	080079fb 	.word	0x080079fb
 80079d4:	080079fb 	.word	0x080079fb
 80079d8:	080079f3 	.word	0x080079f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079dc:	f7fe fbfe 	bl	80061dc <HAL_RCC_GetPCLK1Freq>
 80079e0:	61f8      	str	r0, [r7, #28]
        break;
 80079e2:	e010      	b.n	8007a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079e4:	4b8f      	ldr	r3, [pc, #572]	@ (8007c24 <UART_SetConfig+0x56c>)
 80079e6:	61fb      	str	r3, [r7, #28]
        break;
 80079e8:	e00d      	b.n	8007a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079ea:	f7fe fb5f 	bl	80060ac <HAL_RCC_GetSysClockFreq>
 80079ee:	61f8      	str	r0, [r7, #28]
        break;
 80079f0:	e009      	b.n	8007a06 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80079f6:	61fb      	str	r3, [r7, #28]
        break;
 80079f8:	e005      	b.n	8007a06 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007a04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 80fb 	beq.w	8007c04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d305      	bcc.n	8007a2a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007a24:	69fa      	ldr	r2, [r7, #28]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d903      	bls.n	8007a32 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a30:	e0e8      	b.n	8007c04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	2200      	movs	r2, #0
 8007a36:	461c      	mov	r4, r3
 8007a38:	4615      	mov	r5, r2
 8007a3a:	f04f 0200 	mov.w	r2, #0
 8007a3e:	f04f 0300 	mov.w	r3, #0
 8007a42:	022b      	lsls	r3, r5, #8
 8007a44:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007a48:	0222      	lsls	r2, r4, #8
 8007a4a:	68f9      	ldr	r1, [r7, #12]
 8007a4c:	6849      	ldr	r1, [r1, #4]
 8007a4e:	0849      	lsrs	r1, r1, #1
 8007a50:	2000      	movs	r0, #0
 8007a52:	4688      	mov	r8, r1
 8007a54:	4681      	mov	r9, r0
 8007a56:	eb12 0a08 	adds.w	sl, r2, r8
 8007a5a:	eb43 0b09 	adc.w	fp, r3, r9
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	603b      	str	r3, [r7, #0]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a6c:	4650      	mov	r0, sl
 8007a6e:	4659      	mov	r1, fp
 8007a70:	f7f8 fc06 	bl	8000280 <__aeabi_uldivmod>
 8007a74:	4602      	mov	r2, r0
 8007a76:	460b      	mov	r3, r1
 8007a78:	4613      	mov	r3, r2
 8007a7a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007a82:	d308      	bcc.n	8007a96 <UART_SetConfig+0x3de>
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a8a:	d204      	bcs.n	8007a96 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	60da      	str	r2, [r3, #12]
 8007a94:	e0b6      	b.n	8007c04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007a9c:	e0b2      	b.n	8007c04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aa6:	d15e      	bne.n	8007b66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007aa8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d828      	bhi.n	8007b02 <UART_SetConfig+0x44a>
 8007ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab8 <UART_SetConfig+0x400>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007add 	.word	0x08007add
 8007abc:	08007ae5 	.word	0x08007ae5
 8007ac0:	08007aed 	.word	0x08007aed
 8007ac4:	08007b03 	.word	0x08007b03
 8007ac8:	08007af3 	.word	0x08007af3
 8007acc:	08007b03 	.word	0x08007b03
 8007ad0:	08007b03 	.word	0x08007b03
 8007ad4:	08007b03 	.word	0x08007b03
 8007ad8:	08007afb 	.word	0x08007afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007adc:	f7fe fb7e 	bl	80061dc <HAL_RCC_GetPCLK1Freq>
 8007ae0:	61f8      	str	r0, [r7, #28]
        break;
 8007ae2:	e014      	b.n	8007b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae4:	f7fe fb90 	bl	8006208 <HAL_RCC_GetPCLK2Freq>
 8007ae8:	61f8      	str	r0, [r7, #28]
        break;
 8007aea:	e010      	b.n	8007b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aec:	4b4d      	ldr	r3, [pc, #308]	@ (8007c24 <UART_SetConfig+0x56c>)
 8007aee:	61fb      	str	r3, [r7, #28]
        break;
 8007af0:	e00d      	b.n	8007b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af2:	f7fe fadb 	bl	80060ac <HAL_RCC_GetSysClockFreq>
 8007af6:	61f8      	str	r0, [r7, #28]
        break;
 8007af8:	e009      	b.n	8007b0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007afe:	61fb      	str	r3, [r7, #28]
        break;
 8007b00:	e005      	b.n	8007b0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007b02:	2300      	movs	r3, #0
 8007b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007b0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d077      	beq.n	8007c04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	005a      	lsls	r2, r3, #1
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	085b      	lsrs	r3, r3, #1
 8007b1e:	441a      	add	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b0f      	cmp	r3, #15
 8007b2e:	d916      	bls.n	8007b5e <UART_SetConfig+0x4a6>
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b36:	d212      	bcs.n	8007b5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	f023 030f 	bic.w	r3, r3, #15
 8007b40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b42:	69bb      	ldr	r3, [r7, #24]
 8007b44:	085b      	lsrs	r3, r3, #1
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f003 0307 	and.w	r3, r3, #7
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	8afb      	ldrh	r3, [r7, #22]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	8afa      	ldrh	r2, [r7, #22]
 8007b5a:	60da      	str	r2, [r3, #12]
 8007b5c:	e052      	b.n	8007c04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8007b64:	e04e      	b.n	8007c04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007b6a:	2b08      	cmp	r3, #8
 8007b6c:	d827      	bhi.n	8007bbe <UART_SetConfig+0x506>
 8007b6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b74 <UART_SetConfig+0x4bc>)
 8007b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b74:	08007b99 	.word	0x08007b99
 8007b78:	08007ba1 	.word	0x08007ba1
 8007b7c:	08007ba9 	.word	0x08007ba9
 8007b80:	08007bbf 	.word	0x08007bbf
 8007b84:	08007baf 	.word	0x08007baf
 8007b88:	08007bbf 	.word	0x08007bbf
 8007b8c:	08007bbf 	.word	0x08007bbf
 8007b90:	08007bbf 	.word	0x08007bbf
 8007b94:	08007bb7 	.word	0x08007bb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b98:	f7fe fb20 	bl	80061dc <HAL_RCC_GetPCLK1Freq>
 8007b9c:	61f8      	str	r0, [r7, #28]
        break;
 8007b9e:	e014      	b.n	8007bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ba0:	f7fe fb32 	bl	8006208 <HAL_RCC_GetPCLK2Freq>
 8007ba4:	61f8      	str	r0, [r7, #28]
        break;
 8007ba6:	e010      	b.n	8007bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ba8:	4b1e      	ldr	r3, [pc, #120]	@ (8007c24 <UART_SetConfig+0x56c>)
 8007baa:	61fb      	str	r3, [r7, #28]
        break;
 8007bac:	e00d      	b.n	8007bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bae:	f7fe fa7d 	bl	80060ac <HAL_RCC_GetSysClockFreq>
 8007bb2:	61f8      	str	r0, [r7, #28]
        break;
 8007bb4:	e009      	b.n	8007bca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bba:	61fb      	str	r3, [r7, #28]
        break;
 8007bbc:	e005      	b.n	8007bca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bc2:	2301      	movs	r3, #1
 8007bc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8007bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8007bca:	69fb      	ldr	r3, [r7, #28]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d019      	beq.n	8007c04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	085a      	lsrs	r2, r3, #1
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	441a      	add	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8007be2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007be4:	69bb      	ldr	r3, [r7, #24]
 8007be6:	2b0f      	cmp	r3, #15
 8007be8:	d909      	bls.n	8007bfe <UART_SetConfig+0x546>
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bf0:	d205      	bcs.n	8007bfe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007bf2:	69bb      	ldr	r3, [r7, #24]
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	60da      	str	r2, [r3, #12]
 8007bfc:	e002      	b.n	8007c04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2200      	movs	r2, #0
 8007c08:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007c10:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3728      	adds	r7, #40	@ 0x28
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c1e:	bf00      	nop
 8007c20:	40008000 	.word	0x40008000
 8007c24:	00f42400 	.word	0x00f42400

08007c28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c34:	f003 0308 	and.w	r3, r3, #8
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00a      	beq.n	8007c52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c56:	f003 0301 	and.w	r3, r3, #1
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d00a      	beq.n	8007c74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	430a      	orrs	r2, r1
 8007c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00a      	beq.n	8007c96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	430a      	orrs	r2, r1
 8007c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00a      	beq.n	8007cb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cbc:	f003 0310 	and.w	r3, r3, #16
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d00a      	beq.n	8007cda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cde:	f003 0320 	and.w	r3, r3, #32
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d00a      	beq.n	8007cfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	430a      	orrs	r2, r1
 8007cfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01a      	beq.n	8007d3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d26:	d10a      	bne.n	8007d3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
  }
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b098      	sub	sp, #96	@ 0x60
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d7c:	f7fb fe1c 	bl	80039b8 <HAL_GetTick>
 8007d80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f003 0308 	and.w	r3, r3, #8
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d12e      	bne.n	8007dee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007d94:	9300      	str	r3, [sp, #0]
 8007d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d98:	2200      	movs	r2, #0
 8007d9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f88c 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d021      	beq.n	8007dee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db2:	e853 3f00 	ldrex	r3, [r3]
 8007db6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dbe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007dce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e6      	bne.n	8007daa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2220      	movs	r2, #32
 8007de0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dea:	2303      	movs	r3, #3
 8007dec:	e062      	b.n	8007eb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f003 0304 	and.w	r3, r3, #4
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d149      	bne.n	8007e90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007dfc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007e00:	9300      	str	r3, [sp, #0]
 8007e02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007e04:	2200      	movs	r2, #0
 8007e06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f856 	bl	8007ebc <UART_WaitOnFlagUntilTimeout>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d03c      	beq.n	8007e90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	623b      	str	r3, [r7, #32]
   return(result);
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	461a      	mov	r2, r3
 8007e32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e34:	633b      	str	r3, [r7, #48]	@ 0x30
 8007e36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e6      	bne.n	8007e16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	3308      	adds	r3, #8
 8007e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	e853 3f00 	ldrex	r3, [r3]
 8007e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 0301 	bic.w	r3, r3, #1
 8007e5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3308      	adds	r3, #8
 8007e66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e68:	61fa      	str	r2, [r7, #28]
 8007e6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e6c:	69b9      	ldr	r1, [r7, #24]
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	e841 2300 	strex	r3, r2, [r1]
 8007e74:	617b      	str	r3, [r7, #20]
   return(result);
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d1e5      	bne.n	8007e48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e011      	b.n	8007eb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2220      	movs	r2, #32
 8007e94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3758      	adds	r7, #88	@ 0x58
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ecc:	e04f      	b.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ed4:	d04b      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ed6:	f7fb fd6f 	bl	80039b8 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d302      	bcc.n	8007eec <UART_WaitOnFlagUntilTimeout+0x30>
 8007ee6:	69bb      	ldr	r3, [r7, #24]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d101      	bne.n	8007ef0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e04e      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d037      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b80      	cmp	r3, #128	@ 0x80
 8007f02:	d034      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	2b40      	cmp	r3, #64	@ 0x40
 8007f08:	d031      	beq.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69db      	ldr	r3, [r3, #28]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b08      	cmp	r3, #8
 8007f16:	d110      	bne.n	8007f3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	2208      	movs	r2, #8
 8007f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f838 	bl	8007f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2208      	movs	r2, #8
 8007f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e029      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	69db      	ldr	r3, [r3, #28]
 8007f40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f48:	d111      	bne.n	8007f6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007f52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007f54:	68f8      	ldr	r0, [r7, #12]
 8007f56:	f000 f81e 	bl	8007f96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2220      	movs	r2, #32
 8007f5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e00f      	b.n	8007f8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	69da      	ldr	r2, [r3, #28]
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4013      	ands	r3, r2
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	bf0c      	ite	eq
 8007f7e:	2301      	moveq	r3, #1
 8007f80:	2300      	movne	r3, #0
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	461a      	mov	r2, r3
 8007f86:	79fb      	ldrb	r3, [r7, #7]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d0a0      	beq.n	8007ece <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3710      	adds	r7, #16
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b095      	sub	sp, #84	@ 0x54
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fa6:	e853 3f00 	ldrex	r3, [r3]
 8007faa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007fc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007fc4:	e841 2300 	strex	r3, r2, [r1]
 8007fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d1e6      	bne.n	8007f9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fd8:	6a3b      	ldr	r3, [r7, #32]
 8007fda:	e853 3f00 	ldrex	r3, [r3]
 8007fde:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f023 0301 	bic.w	r3, r3, #1
 8007fe6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	3308      	adds	r3, #8
 8007fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ff0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007ff6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ff8:	e841 2300 	strex	r3, r2, [r1]
 8007ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1e5      	bne.n	8007fd0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008008:	2b01      	cmp	r3, #1
 800800a:	d118      	bne.n	800803e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	60bb      	str	r3, [r7, #8]
   return(result);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f023 0310 	bic.w	r3, r3, #16
 8008020:	647b      	str	r3, [r7, #68]	@ 0x44
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6979      	ldr	r1, [r7, #20]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	613b      	str	r3, [r7, #16]
   return(result);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e6      	bne.n	800800c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2220      	movs	r2, #32
 8008042:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008052:	bf00      	nop
 8008054:	3754      	adds	r7, #84	@ 0x54
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800805e:	b084      	sub	sp, #16
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	f107 001c 	add.w	r0, r7, #28
 800806c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f000 fa69 	bl	8008554 <USB_CoreReset>
 8008082:	4603      	mov	r3, r0
 8008084:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008086:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008092:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	639a      	str	r2, [r3, #56]	@ 0x38
 800809a:	e005      	b.n	80080a8 <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return ret;
 80080a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080b4:	b004      	add	sp, #16
 80080b6:	4770      	bx	lr

080080b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	f023 0201 	bic.w	r2, r3, #1
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80080da:	b580      	push	{r7, lr}
 80080dc:	b084      	sub	sp, #16
 80080de:	af00      	add	r7, sp, #0
 80080e0:	6078      	str	r0, [r7, #4]
 80080e2:	460b      	mov	r3, r1
 80080e4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80080f6:	78fb      	ldrb	r3, [r7, #3]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d115      	bne.n	8008128 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008108:	200a      	movs	r0, #10
 800810a:	f7fb fc61 	bl	80039d0 <HAL_Delay>
      ms += 10U;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	330a      	adds	r3, #10
 8008112:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 fa0f 	bl	8008538 <USB_GetMode>
 800811a:	4603      	mov	r3, r0
 800811c:	2b01      	cmp	r3, #1
 800811e:	d01e      	beq.n	800815e <USB_SetCurrentMode+0x84>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2bc7      	cmp	r3, #199	@ 0xc7
 8008124:	d9f0      	bls.n	8008108 <USB_SetCurrentMode+0x2e>
 8008126:	e01a      	b.n	800815e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d115      	bne.n	800815a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800813a:	200a      	movs	r0, #10
 800813c:	f7fb fc48 	bl	80039d0 <HAL_Delay>
      ms += 10U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	330a      	adds	r3, #10
 8008144:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f9f6 	bl	8008538 <USB_GetMode>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d005      	beq.n	800815e <USB_SetCurrentMode+0x84>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2bc7      	cmp	r3, #199	@ 0xc7
 8008156:	d9f0      	bls.n	800813a <USB_SetCurrentMode+0x60>
 8008158:	e001      	b.n	800815e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e005      	b.n	800816a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2bc8      	cmp	r3, #200	@ 0xc8
 8008162:	d101      	bne.n	8008168 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e000      	b.n	800816a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
	...

08008174 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008174:	b084      	sub	sp, #16
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	6078      	str	r0, [r7, #4]
 800817e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008182:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800818e:	2300      	movs	r3, #0
 8008190:	613b      	str	r3, [r7, #16]
 8008192:	e009      	b.n	80081a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	3340      	adds	r3, #64	@ 0x40
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	3301      	adds	r3, #1
 80081a6:	613b      	str	r3, [r7, #16]
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	2b0e      	cmp	r3, #14
 80081ac:	d9f2      	bls.n	8008194 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80081ae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d11c      	bne.n	80081f0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081bc:	685b      	ldr	r3, [r3, #4]
 80081be:	68fa      	ldr	r2, [r7, #12]
 80081c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80081c4:	f043 0302 	orr.w	r3, r3, #2
 80081c8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	e005      	b.n	80081fc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008202:	461a      	mov	r2, r3
 8008204:	2300      	movs	r3, #0
 8008206:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008208:	2103      	movs	r1, #3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f95a 	bl	80084c4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008210:	2110      	movs	r1, #16
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f000 f8f6 	bl	8008404 <USB_FlushTxFifo>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d001      	beq.n	8008222 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 800821e:	2301      	movs	r3, #1
 8008220:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f920 	bl	8008468 <USB_FlushRxFifo>
 8008228:	4603      	mov	r3, r0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008238:	461a      	mov	r2, r3
 800823a:	2300      	movs	r3, #0
 800823c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008244:	461a      	mov	r2, r3
 8008246:	2300      	movs	r3, #0
 8008248:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008250:	461a      	mov	r2, r3
 8008252:	2300      	movs	r3, #0
 8008254:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	e043      	b.n	80082e4 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	015a      	lsls	r2, r3, #5
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4413      	add	r3, r2
 8008264:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800826e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008272:	d118      	bne.n	80082a6 <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008286:	461a      	mov	r2, r3
 8008288:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800828c:	6013      	str	r3, [r2, #0]
 800828e:	e013      	b.n	80082b8 <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008290:	693b      	ldr	r3, [r7, #16]
 8008292:	015a      	lsls	r2, r3, #5
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	4413      	add	r3, r2
 8008298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800829c:	461a      	mov	r2, r3
 800829e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	e008      	b.n	80082b8 <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	015a      	lsls	r2, r3, #5
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	4413      	add	r3, r2
 80082ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b2:	461a      	mov	r2, r3
 80082b4:	2300      	movs	r3, #0
 80082b6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c4:	461a      	mov	r2, r3
 80082c6:	2300      	movs	r3, #0
 80082c8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	015a      	lsls	r2, r3, #5
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	4413      	add	r3, r2
 80082d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d6:	461a      	mov	r2, r3
 80082d8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80082dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	3301      	adds	r3, #1
 80082e2:	613b      	str	r3, [r7, #16]
 80082e4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80082e8:	461a      	mov	r2, r3
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d3b5      	bcc.n	800825c <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082f0:	2300      	movs	r3, #0
 80082f2:	613b      	str	r3, [r7, #16]
 80082f4:	e043      	b.n	800837e <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	015a      	lsls	r2, r3, #5
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	4413      	add	r3, r2
 80082fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008308:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800830c:	d118      	bne.n	8008340 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d10a      	bne.n	800832a <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	015a      	lsls	r2, r3, #5
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008320:	461a      	mov	r2, r3
 8008322:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	e013      	b.n	8008352 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	4413      	add	r3, r2
 8008332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008336:	461a      	mov	r2, r3
 8008338:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800833c:	6013      	str	r3, [r2, #0]
 800833e:	e008      	b.n	8008352 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	015a      	lsls	r2, r3, #5
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	4413      	add	r3, r2
 8008348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800834c:	461a      	mov	r2, r3
 800834e:	2300      	movs	r3, #0
 8008350:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	4413      	add	r3, r2
 800835a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800835e:	461a      	mov	r2, r3
 8008360:	2300      	movs	r3, #0
 8008362:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008370:	461a      	mov	r2, r3
 8008372:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008376:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	3301      	adds	r3, #1
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008382:	461a      	mov	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	4293      	cmp	r3, r2
 8008388:	d3b5      	bcc.n	80082f6 <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008398:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800839c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80083aa:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	699b      	ldr	r3, [r3, #24]
 80083b0:	f043 0210 	orr.w	r2, r3, #16
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699a      	ldr	r2, [r3, #24]
 80083bc:	4b10      	ldr	r3, [pc, #64]	@ (8008400 <USB_DevInit+0x28c>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80083c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d005      	beq.n	80083d8 <USB_DevInit+0x264>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	699b      	ldr	r3, [r3, #24]
 80083d0:	f043 0208 	orr.w	r2, r3, #8
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80083d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d107      	bne.n	80083f0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083e8:	f043 0304 	orr.w	r3, r3, #4
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80083f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3718      	adds	r7, #24
 80083f6:	46bd      	mov	sp, r7
 80083f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083fc:	b004      	add	sp, #16
 80083fe:	4770      	bx	lr
 8008400:	803c3800 	.word	0x803c3800

08008404 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	3301      	adds	r3, #1
 8008416:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800841e:	d901      	bls.n	8008424 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008420:	2303      	movs	r3, #3
 8008422:	e01b      	b.n	800845c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	2b00      	cmp	r3, #0
 800842a:	daf2      	bge.n	8008412 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800842c:	2300      	movs	r3, #0
 800842e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	019b      	lsls	r3, r3, #6
 8008434:	f043 0220 	orr.w	r2, r3, #32
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3301      	adds	r3, #1
 8008440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008448:	d901      	bls.n	800844e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800844a:	2303      	movs	r3, #3
 800844c:	e006      	b.n	800845c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	691b      	ldr	r3, [r3, #16]
 8008452:	f003 0320 	and.w	r3, r3, #32
 8008456:	2b20      	cmp	r3, #32
 8008458:	d0f0      	beq.n	800843c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800845a:	2300      	movs	r3, #0
}
 800845c:	4618      	mov	r0, r3
 800845e:	3714      	adds	r7, #20
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008470:	2300      	movs	r3, #0
 8008472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	3301      	adds	r3, #1
 8008478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008480:	d901      	bls.n	8008486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e018      	b.n	80084b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	2b00      	cmp	r3, #0
 800848c:	daf2      	bge.n	8008474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800848e:	2300      	movs	r3, #0
 8008490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2210      	movs	r2, #16
 8008496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80084a4:	d901      	bls.n	80084aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80084a6:	2303      	movs	r3, #3
 80084a8:	e006      	b.n	80084b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	f003 0310 	and.w	r3, r3, #16
 80084b2:	2b10      	cmp	r3, #16
 80084b4:	d0f0      	beq.n	8008498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084da:	681a      	ldr	r2, [r3, #0]
 80084dc:	78fb      	ldrb	r3, [r7, #3]
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084e4:	4313      	orrs	r3, r2
 80084e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3714      	adds	r7, #20
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b085      	sub	sp, #20
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008510:	f023 0303 	bic.w	r3, r3, #3
 8008514:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008524:	f043 0302 	orr.w	r3, r3, #2
 8008528:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	695b      	ldr	r3, [r3, #20]
 8008544:	f003 0301 	and.w	r3, r3, #1
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	3301      	adds	r3, #1
 8008564:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800856c:	d901      	bls.n	8008572 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e01b      	b.n	80085aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	2b00      	cmp	r3, #0
 8008578:	daf2      	bge.n	8008560 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f043 0201 	orr.w	r2, r3, #1
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	3301      	adds	r3, #1
 800858e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008596:	d901      	bls.n	800859c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008598:	2303      	movs	r3, #3
 800859a:	e006      	b.n	80085aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	691b      	ldr	r3, [r3, #16]
 80085a0:	f003 0301 	and.w	r3, r3, #1
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d0f0      	beq.n	800858a <USB_CoreReset+0x36>

  return HAL_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3714      	adds	r7, #20
 80085ae:	46bd      	mov	sp, r7
 80085b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b4:	4770      	bx	lr

080085b6 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80085b6:	b580      	push	{r7, lr}
 80085b8:	b08c      	sub	sp, #48	@ 0x30
 80085ba:	af00      	add	r7, sp, #0
 80085bc:	603b      	str	r3, [r7, #0]
 80085be:	4603      	mov	r3, r0
 80085c0:	71fb      	strb	r3, [r7, #7]
 80085c2:	460b      	mov	r3, r1
 80085c4:	71bb      	strb	r3, [r7, #6]
 80085c6:	4613      	mov	r3, r2
 80085c8:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_init_cp_IDB05A1 cp;
  gap_init_rp resp;
 
  cp.role = role;
 80085ca:	79fb      	ldrb	r3, [r7, #7]
 80085cc:	753b      	strb	r3, [r7, #20]
  cp.privacy_enabled = privacy_enabled;
 80085ce:	79bb      	ldrb	r3, [r7, #6]
 80085d0:	757b      	strb	r3, [r7, #21]
  cp.device_name_char_len = device_name_char_len;
 80085d2:	797b      	ldrb	r3, [r7, #5]
 80085d4:	75bb      	strb	r3, [r7, #22]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80085d6:	f107 030c 	add.w	r3, r7, #12
 80085da:	2207      	movs	r2, #7
 80085dc:	2100      	movs	r1, #0
 80085de:	4618      	mov	r0, r3
 80085e0:	f004 f97a 	bl	800c8d8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80085e4:	f107 0318 	add.w	r3, r7, #24
 80085e8:	2218      	movs	r2, #24
 80085ea:	2100      	movs	r1, #0
 80085ec:	4618      	mov	r0, r3
 80085ee:	f004 f973 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80085f2:	233f      	movs	r3, #63	@ 0x3f
 80085f4:	833b      	strh	r3, [r7, #24]
  rq.ocf = OCF_GAP_INIT;
 80085f6:	238a      	movs	r3, #138	@ 0x8a
 80085f8:	837b      	strh	r3, [r7, #26]
  rq.cparam = &cp;
 80085fa:	f107 0314 	add.w	r3, r7, #20
 80085fe:	623b      	str	r3, [r7, #32]
  rq.clen = sizeof(cp);
 8008600:	2303      	movs	r3, #3
 8008602:	627b      	str	r3, [r7, #36]	@ 0x24
  rq.rparam = &resp;
 8008604:	f107 030c 	add.w	r3, r7, #12
 8008608:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.rlen = GAP_INIT_RP_SIZE;
 800860a:	2307      	movs	r3, #7
 800860c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  if (hci_send_req(&rq, FALSE) < 0)
 800860e:	f107 0318 	add.w	r3, r7, #24
 8008612:	2100      	movs	r1, #0
 8008614:	4618      	mov	r0, r3
 8008616:	f000 fee3 	bl	80093e0 <hci_send_req>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	da01      	bge.n	8008624 <aci_gap_init_IDB05A1+0x6e>
    return BLE_STATUS_TIMEOUT;
 8008620:	23ff      	movs	r3, #255	@ 0xff
 8008622:	e014      	b.n	800864e <aci_gap_init_IDB05A1+0x98>
  
  if (resp.status) {
 8008624:	7b3b      	ldrb	r3, [r7, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <aci_gap_init_IDB05A1+0x78>
    return resp.status;
 800862a:	7b3b      	ldrb	r3, [r7, #12]
 800862c:	e00f      	b.n	800864e <aci_gap_init_IDB05A1+0x98>
  }
  
  *service_handle = btohs(resp.service_handle);
 800862e:	f8b7 300d 	ldrh.w	r3, [r7, #13]
 8008632:	b29a      	uxth	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8008638:	f8b7 300f 	ldrh.w	r3, [r7, #15]
 800863c:	b29a      	uxth	r2, r3
 800863e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008640:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8008642:	f8b7 3011 	ldrh.w	r3, [r7, #17]
 8008646:	b29a      	uxth	r2, r3
 8008648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800864a:	801a      	strh	r2, [r3, #0]
  
  return 0;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3730      	adds	r7, #48	@ 0x30
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}

08008656 <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b08e      	sub	sp, #56	@ 0x38
 800865a:	af00      	add	r7, sp, #0
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
 8008662:	4603      	mov	r3, r0
 8008664:	73fb      	strb	r3, [r7, #15]
  struct hci_request rq;
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
 8008666:	7bfb      	ldrb	r3, [r7, #15]
 8008668:	773b      	strb	r3, [r7, #28]
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800866a:	f107 0314 	add.w	r3, r7, #20
 800866e:	2207      	movs	r2, #7
 8008670:	2100      	movs	r1, #0
 8008672:	4618      	mov	r0, r3
 8008674:	f004 f930 	bl	800c8d8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008678:	f107 0320 	add.w	r3, r7, #32
 800867c:	2218      	movs	r2, #24
 800867e:	2100      	movs	r1, #0
 8008680:	4618      	mov	r0, r3
 8008682:	f004 f929 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008686:	233f      	movs	r3, #63	@ 0x3f
 8008688:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_GAP_INIT;
 800868a:	238a      	movs	r3, #138	@ 0x8a
 800868c:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = &cp;
 800868e:	f107 031c 	add.w	r3, r7, #28
 8008692:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = sizeof(cp);
 8008694:	2301      	movs	r3, #1
 8008696:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8008698:	f107 0314 	add.w	r3, r7, #20
 800869c:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = GAP_INIT_RP_SIZE;
 800869e:	2307      	movs	r3, #7
 80086a0:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 80086a2:	f107 0320 	add.w	r3, r7, #32
 80086a6:	2100      	movs	r1, #0
 80086a8:	4618      	mov	r0, r3
 80086aa:	f000 fe99 	bl	80093e0 <hci_send_req>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da01      	bge.n	80086b8 <aci_gap_init_IDB04A1+0x62>
    return BLE_STATUS_TIMEOUT;
 80086b4:	23ff      	movs	r3, #255	@ 0xff
 80086b6:	e014      	b.n	80086e2 <aci_gap_init_IDB04A1+0x8c>
  
  if (resp.status) {
 80086b8:	7d3b      	ldrb	r3, [r7, #20]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <aci_gap_init_IDB04A1+0x6c>
    return resp.status;
 80086be:	7d3b      	ldrb	r3, [r7, #20]
 80086c0:	e00f      	b.n	80086e2 <aci_gap_init_IDB04A1+0x8c>
  }
  
  *service_handle = btohs(resp.service_handle);
 80086c2:	f8b7 3015 	ldrh.w	r3, [r7, #21]
 80086c6:	b29a      	uxth	r2, r3
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	801a      	strh	r2, [r3, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80086cc:	f8b7 3017 	ldrh.w	r3, [r7, #23]
 80086d0:	b29a      	uxth	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	801a      	strh	r2, [r3, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80086d6:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80086da:	b29a      	uxth	r2, r3
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3738      	adds	r7, #56	@ 0x38
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 80086ea:	b590      	push	{r4, r7, lr}
 80086ec:	b095      	sub	sp, #84	@ 0x54
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	4604      	mov	r4, r0
 80086f2:	4608      	mov	r0, r1
 80086f4:	4611      	mov	r1, r2
 80086f6:	461a      	mov	r2, r3
 80086f8:	4623      	mov	r3, r4
 80086fa:	71fb      	strb	r3, [r7, #7]
 80086fc:	4603      	mov	r3, r0
 80086fe:	80bb      	strh	r3, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	807b      	strh	r3, [r7, #2]
 8008704:	4613      	mov	r3, r2
 8008706:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 800870e:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 8008712:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 8008716:	4413      	add	r3, r2
 8008718:	330e      	adds	r3, #14
 800871a:	2b28      	cmp	r3, #40	@ 0x28
 800871c:	d901      	bls.n	8008722 <aci_gap_set_discoverable+0x38>
    return BLE_STATUS_INVALID_PARAMS;
 800871e:	2342      	movs	r3, #66	@ 0x42
 8008720:	e0c9      	b.n	80088b6 <aci_gap_set_discoverable+0x1cc>

  buffer[indx] = AdvType;
 8008722:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008726:	3350      	adds	r3, #80	@ 0x50
 8008728:	443b      	add	r3, r7
 800872a:	79fa      	ldrb	r2, [r7, #7]
 800872c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008730:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008734:	3301      	adds	r3, #1
 8008736:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  AdvIntervMin = htobs(AdvIntervMin);
 800873a:	88bb      	ldrh	r3, [r7, #4]
 800873c:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800873e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008742:	f107 0208 	add.w	r2, r7, #8
 8008746:	4413      	add	r3, r2
 8008748:	88ba      	ldrh	r2, [r7, #4]
 800874a:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 800874c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008750:	3302      	adds	r3, #2
 8008752:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  AdvIntervMax = htobs(AdvIntervMax);
 8008756:	887b      	ldrh	r3, [r7, #2]
 8008758:	807b      	strh	r3, [r7, #2]
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 800875a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800875e:	f107 0208 	add.w	r2, r7, #8
 8008762:	4413      	add	r3, r2
 8008764:	887a      	ldrh	r2, [r7, #2]
 8008766:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008768:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800876c:	3302      	adds	r3, #2
 800876e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = OwnAddrType;
 8008772:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008776:	3350      	adds	r3, #80	@ 0x50
 8008778:	443b      	add	r3, r7
 800877a:	79ba      	ldrb	r2, [r7, #6]
 800877c:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 8008780:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008784:	3301      	adds	r3, #1
 8008786:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = AdvFilterPolicy;
 800878a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800878e:	3350      	adds	r3, #80	@ 0x50
 8008790:	443b      	add	r3, r7
 8008792:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008796:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 800879a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800879e:	3301      	adds	r3, #1
 80087a0:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  buffer[indx] = LocalNameLen;
 80087a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80087a8:	3350      	adds	r3, #80	@ 0x50
 80087aa:	443b      	add	r3, r7
 80087ac:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80087b0:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80087b4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80087b8:	3301      	adds	r3, #1
 80087ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80087be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80087c2:	f107 0208 	add.w	r2, r7, #8
 80087c6:	4413      	add	r3, r2
 80087c8:	f897 2064 	ldrb.w	r2, [r7, #100]	@ 0x64
 80087cc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80087ce:	4618      	mov	r0, r3
 80087d0:	f004 f8b7 	bl	800c942 <memcpy>
  indx +=  LocalNameLen;
 80087d4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80087d8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80087dc:	4413      	add	r3, r2
 80087de:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  buffer[indx] = ServiceUUIDLen;
 80087e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80087e6:	3350      	adds	r3, #80	@ 0x50
 80087e8:	443b      	add	r3, r7
 80087ea:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 80087ee:	f803 2c48 	strb.w	r2, [r3, #-72]
  indx++;
 80087f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80087f6:	3301      	adds	r3, #1
 80087f8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80087fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008800:	f107 0208 	add.w	r2, r7, #8
 8008804:	4413      	add	r3, r2
 8008806:	f897 206c 	ldrb.w	r2, [r7, #108]	@ 0x6c
 800880a:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800880c:	4618      	mov	r0, r3
 800880e:	f004 f898 	bl	800c942 <memcpy>
  indx +=  ServiceUUIDLen;  
 8008812:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8008816:	f897 306c 	ldrb.w	r3, [r7, #108]	@ 0x6c
 800881a:	4413      	add	r3, r2
 800881c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
 8008820:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8008824:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8008828:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800882c:	f107 0208 	add.w	r2, r7, #8
 8008830:	4413      	add	r3, r2
 8008832:	f8b7 2074 	ldrh.w	r2, [r7, #116]	@ 0x74
 8008836:	801a      	strh	r2, [r3, #0]
  indx +=  2;
 8008838:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800883c:	3302      	adds	r3, #2
 800883e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
 8008842:	f8b7 3078 	ldrh.w	r3, [r7, #120]	@ 0x78
 8008846:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 800884a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800884e:	f107 0208 	add.w	r2, r7, #8
 8008852:	4413      	add	r3, r2
 8008854:	f8b7 2078 	ldrh.w	r2, [r7, #120]	@ 0x78
 8008858:	801a      	strh	r2, [r3, #0]
  indx +=  2;    
 800885a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800885e:	3302      	adds	r3, #2
 8008860:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008864:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008868:	2218      	movs	r2, #24
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f004 f833 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008872:	233f      	movs	r3, #63	@ 0x3f
 8008874:	86bb      	strh	r3, [r7, #52]	@ 0x34
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8008876:	2383      	movs	r3, #131	@ 0x83
 8008878:	86fb      	strh	r3, [r7, #54]	@ 0x36
  rq.cparam = (void *)buffer;
 800887a:	f107 0308 	add.w	r3, r7, #8
 800887e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.clen = indx;
 8008880:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8008884:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rparam = &status;
 8008886:	f107 0333 	add.w	r3, r7, #51	@ 0x33
 800888a:	647b      	str	r3, [r7, #68]	@ 0x44
  rq.rlen = 1;
 800888c:	2301      	movs	r3, #1
 800888e:	64bb      	str	r3, [r7, #72]	@ 0x48

  if (hci_send_req(&rq, FALSE) < 0)
 8008890:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008894:	2100      	movs	r1, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fda2 	bl	80093e0 <hci_send_req>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	da01      	bge.n	80088a6 <aci_gap_set_discoverable+0x1bc>
    return BLE_STATUS_TIMEOUT;
 80088a2:	23ff      	movs	r3, #255	@ 0xff
 80088a4:	e007      	b.n	80088b6 <aci_gap_set_discoverable+0x1cc>

  if (status) {
 80088a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d002      	beq.n	80088b4 <aci_gap_set_discoverable+0x1ca>
    return status;
 80088ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80088b2:	e000      	b.n	80088b6 <aci_gap_set_discoverable+0x1cc>
  }

  return 0;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3754      	adds	r7, #84	@ 0x54
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd90      	pop	{r4, r7, pc}

080088be <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 80088be:	b590      	push	{r4, r7, lr}
 80088c0:	b091      	sub	sp, #68	@ 0x44
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	603a      	str	r2, [r7, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	4603      	mov	r3, r0
 80088ca:	71fb      	strb	r3, [r7, #7]
 80088cc:	460b      	mov	r3, r1
 80088ce:	71bb      	strb	r3, [r7, #6]
 80088d0:	4613      	mov	r3, r2
 80088d2:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 80088d4:	79fb      	ldrb	r3, [r7, #7]
 80088d6:	733b      	strb	r3, [r7, #12]
  cp.oob_enable = oob_enable;
 80088d8:	79bb      	ldrb	r3, [r7, #6]
 80088da:	737b      	strb	r3, [r7, #13]
  /* FIX: check on oob_enable introduced to fix issue in projects for Cortex-M33 */
  if (oob_enable) {
 80088dc:	79bb      	ldrb	r3, [r7, #6]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00a      	beq.n	80088f8 <aci_gap_set_auth_requirement+0x3a>
    BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	f107 030e 	add.w	r3, r7, #14
 80088e8:	6814      	ldr	r4, [r2, #0]
 80088ea:	6850      	ldr	r0, [r2, #4]
 80088ec:	6891      	ldr	r1, [r2, #8]
 80088ee:	68d2      	ldr	r2, [r2, #12]
 80088f0:	601c      	str	r4, [r3, #0]
 80088f2:	6058      	str	r0, [r3, #4]
 80088f4:	6099      	str	r1, [r3, #8]
 80088f6:	60da      	str	r2, [r3, #12]
  }
  cp.min_encryption_key_size = min_encryption_key_size;
 80088f8:	797b      	ldrb	r3, [r7, #5]
 80088fa:	77bb      	strb	r3, [r7, #30]
  cp.max_encryption_key_size = max_encryption_key_size;
 80088fc:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8008900:	77fb      	strb	r3, [r7, #31]
  cp.use_fixed_pin = use_fixed_pin;
 8008902:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8008906:	f887 3020 	strb.w	r3, [r7, #32]
  cp.fixed_pin = htobl(fixed_pin);
 800890a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800890c:	f8c7 3021 	str.w	r3, [r7, #33]	@ 0x21
  cp.bonding_mode = bonding_mode;
 8008910:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8008914:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008918:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800891c:	2218      	movs	r2, #24
 800891e:	2100      	movs	r1, #0
 8008920:	4618      	mov	r0, r3
 8008922:	f003 ffd9 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008926:	233f      	movs	r3, #63	@ 0x3f
 8008928:	853b      	strh	r3, [r7, #40]	@ 0x28
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 800892a:	2386      	movs	r3, #134	@ 0x86
 800892c:	857b      	strh	r3, [r7, #42]	@ 0x2a
  rq.cparam = &cp;
 800892e:	f107 030c 	add.w	r3, r7, #12
 8008932:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.clen = sizeof(cp);
 8008934:	231a      	movs	r3, #26
 8008936:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rparam = &status;
 8008938:	f107 030b 	add.w	r3, r7, #11
 800893c:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rlen = 1;
 800893e:	2301      	movs	r3, #1
 8008940:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (hci_send_req(&rq, FALSE) < 0)
 8008942:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f000 fd49 	bl	80093e0 <hci_send_req>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	da01      	bge.n	8008958 <aci_gap_set_auth_requirement+0x9a>
    return BLE_STATUS_TIMEOUT;
 8008954:	23ff      	movs	r3, #255	@ 0xff
 8008956:	e005      	b.n	8008964 <aci_gap_set_auth_requirement+0xa6>

  if (status) {
 8008958:	7afb      	ldrb	r3, [r7, #11]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <aci_gap_set_auth_requirement+0xa4>
    return status;
 800895e:	7afb      	ldrb	r3, [r7, #11]
 8008960:	e000      	b.n	8008964 <aci_gap_set_auth_requirement+0xa6>
  }
    
  return 0;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3744      	adds	r7, #68	@ 0x44
 8008968:	46bd      	mov	sp, r7
 800896a:	bd90      	pop	{r4, r7, pc}

0800896c <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b092      	sub	sp, #72	@ 0x48
 8008970:	af00      	add	r7, sp, #0
 8008972:	4603      	mov	r3, r0
 8008974:	6039      	str	r1, [r7, #0]
 8008976:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
 8008978:	2300      	movs	r3, #0
 800897a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  if (AdvLen > (sizeof(buffer)-1))
 800897e:	79fb      	ldrb	r3, [r7, #7]
 8008980:	2b1f      	cmp	r3, #31
 8008982:	d901      	bls.n	8008988 <aci_gap_update_adv_data+0x1c>
    return BLE_STATUS_INVALID_PARAMS;
 8008984:	2342      	movs	r3, #66	@ 0x42
 8008986:	e03e      	b.n	8008a06 <aci_gap_update_adv_data+0x9a>

  buffer[indx] = AdvLen;
 8008988:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800898c:	3348      	adds	r3, #72	@ 0x48
 800898e:	443b      	add	r3, r7
 8008990:	79fa      	ldrb	r2, [r7, #7]
 8008992:	f803 2c40 	strb.w	r2, [r3, #-64]
  indx++;
 8008996:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800899a:	3301      	adds	r3, #1
 800899c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80089a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80089a4:	f107 0208 	add.w	r2, r7, #8
 80089a8:	4413      	add	r3, r2
 80089aa:	79fa      	ldrb	r2, [r7, #7]
 80089ac:	6839      	ldr	r1, [r7, #0]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f003 ffc7 	bl	800c942 <memcpy>
  indx +=  AdvLen;
 80089b4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80089b8:	79fb      	ldrb	r3, [r7, #7]
 80089ba:	4413      	add	r3, r2
 80089bc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80089c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80089c4:	2218      	movs	r2, #24
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f003 ff85 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80089ce:	233f      	movs	r3, #63	@ 0x3f
 80089d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 80089d2:	238e      	movs	r3, #142	@ 0x8e
 80089d4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 80089d6:	f107 0308 	add.w	r3, r7, #8
 80089da:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 80089dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80089e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &status;
 80089e2:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 80089e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = 1;
 80089e8:	2301      	movs	r3, #1
 80089ea:	643b      	str	r3, [r7, #64]	@ 0x40
    
  if (hci_send_req(&rq, FALSE) < 0)
 80089ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80089f0:	2100      	movs	r1, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fcf4 	bl	80093e0 <hci_send_req>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	da01      	bge.n	8008a02 <aci_gap_update_adv_data+0x96>
    return BLE_STATUS_TIMEOUT;
 80089fe:	23ff      	movs	r3, #255	@ 0xff
 8008a00:	e001      	b.n	8008a06 <aci_gap_update_adv_data+0x9a>
    
  return status;
 8008a02:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3748      	adds	r7, #72	@ 0x48
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b088      	sub	sp, #32
 8008a12:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008a14:	f107 0308 	add.w	r3, r7, #8
 8008a18:	2218      	movs	r2, #24
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f003 ff5b 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008a22:	233f      	movs	r3, #63	@ 0x3f
 8008a24:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_GATT_INIT;
 8008a26:	f240 1301 	movw	r3, #257	@ 0x101
 8008a2a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008a2c:	1dfb      	adds	r3, r7, #7
 8008a2e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008a30:	2301      	movs	r3, #1
 8008a32:	61fb      	str	r3, [r7, #28]

  if (hci_send_req(&rq, FALSE) < 0)
 8008a34:	f107 0308 	add.w	r3, r7, #8
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 fcd0 	bl	80093e0 <hci_send_req>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	da01      	bge.n	8008a4a <aci_gatt_init+0x3c>
    return BLE_STATUS_TIMEOUT;
 8008a46:	23ff      	movs	r3, #255	@ 0xff
 8008a48:	e000      	b.n	8008a4c <aci_gatt_init+0x3e>

  return status;
 8008a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	3720      	adds	r7, #32
 8008a50:	46bd      	mov	sp, r7
 8008a52:	bd80      	pop	{r7, pc}

08008a54 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b090      	sub	sp, #64	@ 0x40
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6039      	str	r1, [r7, #0]
 8008a5c:	4611      	mov	r1, r2
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4603      	mov	r3, r0
 8008a62:	71fb      	strb	r3, [r7, #7]
 8008a64:	460b      	mov	r3, r1
 8008a66:	71bb      	strb	r3, [r7, #6]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	717b      	strb	r3, [r7, #5]
  struct hci_request rq;
  gatt_add_serv_rp resp;    
  uint8_t buffer[19];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_uuid_type;
 8008a72:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008a76:	3340      	adds	r3, #64	@ 0x40
 8008a78:	443b      	add	r3, r7
 8008a7a:	79fa      	ldrb	r2, [r7, #7]
 8008a7c:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008a80:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008a84:	3301      	adds	r3, #1
 8008a86:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  if(service_uuid_type == UUID_TYPE_16){
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d103      	bne.n	8008a98 <aci_gatt_add_serv+0x44>
    uuid_len = 2;
 8008a90:	2302      	movs	r3, #2
 8008a92:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008a96:	e002      	b.n	8008a9e <aci_gatt_add_serv+0x4a>
  }
  else {
    uuid_len = 16;
 8008a98:	2310      	movs	r3, #16
 8008a9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8008a9e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008aa2:	f107 020c 	add.w	r2, r7, #12
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f003 ff47 	bl	800c942 <memcpy>
  indx +=  uuid_len;
 8008ab4:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 8008ab8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008abc:	4413      	add	r3, r2
 8008abe:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = service_type;
 8008ac2:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008ac6:	3340      	adds	r3, #64	@ 0x40
 8008ac8:	443b      	add	r3, r7
 8008aca:	79ba      	ldrb	r2, [r7, #6]
 8008acc:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008ad0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
  buffer[indx] = max_attr_records;
 8008ada:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008ade:	3340      	adds	r3, #64	@ 0x40
 8008ae0:	443b      	add	r3, r7
 8008ae2:	797a      	ldrb	r2, [r7, #5]
 8008ae4:	f803 2c34 	strb.w	r2, [r3, #-52]
  indx++;
 8008ae8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008aec:	3301      	adds	r3, #1
 8008aee:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008af2:	f107 0320 	add.w	r3, r7, #32
 8008af6:	2203      	movs	r2, #3
 8008af8:	2100      	movs	r1, #0
 8008afa:	4618      	mov	r0, r3
 8008afc:	f003 feec 	bl	800c8d8 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b04:	2218      	movs	r2, #24
 8008b06:	2100      	movs	r1, #0
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f003 fee5 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008b0e:	233f      	movs	r3, #63	@ 0x3f
 8008b10:	84bb      	strh	r3, [r7, #36]	@ 0x24
  rq.ocf = OCF_GATT_ADD_SERV;
 8008b12:	f44f 7381 	mov.w	r3, #258	@ 0x102
 8008b16:	84fb      	strh	r3, [r7, #38]	@ 0x26
  rq.cparam = (void *)buffer;
 8008b18:	f107 030c 	add.w	r3, r7, #12
 8008b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.clen = indx;
 8008b1e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008b22:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rparam = &resp;
 8008b24:	f107 0320 	add.w	r3, r7, #32
 8008b28:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8008b2a:	2303      	movs	r3, #3
 8008b2c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (hci_send_req(&rq, FALSE) < 0)
 8008b2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008b32:	2100      	movs	r1, #0
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fc53 	bl	80093e0 <hci_send_req>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	da01      	bge.n	8008b44 <aci_gatt_add_serv+0xf0>
    return BLE_STATUS_TIMEOUT;
 8008b40:	23ff      	movs	r3, #255	@ 0xff
 8008b42:	e00c      	b.n	8008b5e <aci_gatt_add_serv+0x10a>

  if (resp.status) {
 8008b44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <aci_gatt_add_serv+0xfe>
    return resp.status;
 8008b4c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008b50:	e005      	b.n	8008b5e <aci_gatt_add_serv+0x10a>
  }
    
  *serviceHandle = btohs(resp.handle);
 8008b52:	f8b7 3021 	ldrh.w	r3, [r7, #33]	@ 0x21
 8008b56:	b29a      	uxth	r2, r3
 8008b58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b5a:	801a      	strh	r2, [r3, #0]

  return 0;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3740      	adds	r7, #64	@ 0x40
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b092      	sub	sp, #72	@ 0x48
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	603a      	str	r2, [r7, #0]
 8008b6e:	461a      	mov	r2, r3
 8008b70:	4603      	mov	r3, r0
 8008b72:	80fb      	strh	r3, [r7, #6]
 8008b74:	460b      	mov	r3, r1
 8008b76:	717b      	strb	r3, [r7, #5]
 8008b78:	4613      	mov	r3, r2
 8008b7a:	713b      	strb	r3, [r7, #4]
  struct hci_request rq;
  gatt_add_serv_rp resp;
  uint8_t buffer[25];
  uint8_t uuid_len;
  uint8_t indx = 0;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  serviceHandle = htobs(serviceHandle);
 8008b82:	88fb      	ldrh	r3, [r7, #6]
 8008b84:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8008b86:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b8a:	f107 020c 	add.w	r2, r7, #12
 8008b8e:	4413      	add	r3, r2
 8008b90:	88fa      	ldrh	r2, [r7, #6]
 8008b92:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008b94:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008b98:	3302      	adds	r3, #2
 8008b9a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charUuidType;
 8008b9e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008ba2:	3348      	adds	r3, #72	@ 0x48
 8008ba4:	443b      	add	r3, r7
 8008ba6:	797a      	ldrb	r2, [r7, #5]
 8008ba8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008bac:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  if(charUuidType == UUID_TYPE_16){
 8008bb6:	797b      	ldrb	r3, [r7, #5]
 8008bb8:	2b01      	cmp	r3, #1
 8008bba:	d103      	bne.n	8008bc4 <aci_gatt_add_char+0x5e>
    uuid_len = 2;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008bc2:	e002      	b.n	8008bca <aci_gatt_add_char+0x64>
  }
  else {
    uuid_len = 16;
 8008bc4:	2310      	movs	r3, #16
 8008bc6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8008bca:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008bce:	f107 020c 	add.w	r2, r7, #12
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f003 feb1 	bl	800c942 <memcpy>
  indx +=  uuid_len;
 8008be0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8008be4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008be8:	4413      	add	r3, r2
 8008bea:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charValueLen;
 8008bee:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008bf2:	3348      	adds	r3, #72	@ 0x48
 8008bf4:	443b      	add	r3, r7
 8008bf6:	793a      	ldrb	r2, [r7, #4]
 8008bf8:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008bfc:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c00:	3301      	adds	r3, #1
 8008c02:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = charProperties;
 8008c06:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c0a:	3348      	adds	r3, #72	@ 0x48
 8008c0c:	443b      	add	r3, r7
 8008c0e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8008c12:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008c16:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = secPermissions;
 8008c20:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c24:	3348      	adds	r3, #72	@ 0x48
 8008c26:	443b      	add	r3, r7
 8008c28:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 8008c2c:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008c30:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c34:	3301      	adds	r3, #1
 8008c36:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = gattEvtMask;
 8008c3a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c3e:	3348      	adds	r3, #72	@ 0x48
 8008c40:	443b      	add	r3, r7
 8008c42:	f897 2058 	ldrb.w	r2, [r7, #88]	@ 0x58
 8008c46:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008c4a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c4e:	3301      	adds	r3, #1
 8008c50:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = encryKeySize;
 8008c54:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c58:	3348      	adds	r3, #72	@ 0x48
 8008c5a:	443b      	add	r3, r7
 8008c5c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 8008c60:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008c64:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c68:	3301      	adds	r3, #1
 8008c6a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  buffer[indx] = isVariable;
 8008c6e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c72:	3348      	adds	r3, #72	@ 0x48
 8008c74:	443b      	add	r3, r7
 8008c76:	f897 2060 	ldrb.w	r2, [r7, #96]	@ 0x60
 8008c7a:	f803 2c3c 	strb.w	r2, [r3, #-60]
  indx++;
 8008c7e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008c82:	3301      	adds	r3, #1
 8008c84:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8008c88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008c8c:	2203      	movs	r2, #3
 8008c8e:	2100      	movs	r1, #0
 8008c90:	4618      	mov	r0, r3
 8008c92:	f003 fe21 	bl	800c8d8 <memset>

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008c96:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008c9a:	2218      	movs	r2, #24
 8008c9c:	2100      	movs	r1, #0
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f003 fe1a 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008ca4:	233f      	movs	r3, #63	@ 0x3f
 8008ca6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  rq.ocf = OCF_GATT_ADD_CHAR;
 8008ca8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008cac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  rq.cparam = (void *)buffer;
 8008cae:	f107 030c 	add.w	r3, r7, #12
 8008cb2:	637b      	str	r3, [r7, #52]	@ 0x34
  rq.clen = indx;
 8008cb4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.rparam = &resp;
 8008cba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	643b      	str	r3, [r7, #64]	@ 0x40

  if (hci_send_req(&rq, FALSE) < 0)
 8008cc4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fb88 	bl	80093e0 <hci_send_req>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	da01      	bge.n	8008cda <aci_gatt_add_char+0x174>
    return BLE_STATUS_TIMEOUT;
 8008cd6:	23ff      	movs	r3, #255	@ 0xff
 8008cd8:	e00c      	b.n	8008cf4 <aci_gatt_add_char+0x18e>

  if (resp.status) {
 8008cda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d002      	beq.n	8008ce8 <aci_gatt_add_char+0x182>
    return resp.status;
 8008ce2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008ce6:	e005      	b.n	8008cf4 <aci_gatt_add_char+0x18e>
  }
    
  *charHandle = btohs(resp.handle);
 8008ce8:	f8b7 3029 	ldrh.w	r3, [r7, #41]	@ 0x29
 8008cec:	b29a      	uxth	r2, r3
 8008cee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008cf0:	801a      	strh	r2, [r3, #0]

  return 0;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3748      	adds	r7, #72	@ 0x48
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8008cfc:	b590      	push	{r4, r7, lr}
 8008cfe:	b0ab      	sub	sp, #172	@ 0xac
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	4604      	mov	r4, r0
 8008d04:	4608      	mov	r0, r1
 8008d06:	4611      	mov	r1, r2
 8008d08:	461a      	mov	r2, r3
 8008d0a:	4623      	mov	r3, r4
 8008d0c:	80fb      	strh	r3, [r7, #6]
 8008d0e:	4603      	mov	r3, r0
 8008d10:	80bb      	strh	r3, [r7, #4]
 8008d12:	460b      	mov	r3, r1
 8008d14:	70fb      	strb	r3, [r7, #3]
 8008d16:	4613      	mov	r3, r2
 8008d18:	70bb      	strb	r3, [r7, #2]
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8008d20:	78bb      	ldrb	r3, [r7, #2]
 8008d22:	2b7a      	cmp	r3, #122	@ 0x7a
 8008d24:	d901      	bls.n	8008d2a <aci_gatt_update_char_value+0x2e>
    return BLE_STATUS_INVALID_PARAMS;
 8008d26:	2342      	movs	r3, #66	@ 0x42
 8008d28:	e074      	b.n	8008e14 <aci_gatt_update_char_value+0x118>

  servHandle = htobs(servHandle);
 8008d2a:	88fb      	ldrh	r3, [r7, #6]
 8008d2c:	80fb      	strh	r3, [r7, #6]
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8008d2e:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d32:	f107 0208 	add.w	r2, r7, #8
 8008d36:	4413      	add	r3, r2
 8008d38:	88fa      	ldrh	r2, [r7, #6]
 8008d3a:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008d3c:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d40:	3302      	adds	r3, #2
 8008d42:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  charHandle = htobs(charHandle);
 8008d46:	88bb      	ldrh	r3, [r7, #4]
 8008d48:	80bb      	strh	r3, [r7, #4]
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8008d4a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d4e:	f107 0208 	add.w	r2, r7, #8
 8008d52:	4413      	add	r3, r2
 8008d54:	88ba      	ldrh	r2, [r7, #4]
 8008d56:	801a      	strh	r2, [r3, #0]
  indx += 2;
 8008d58:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d5c:	3302      	adds	r3, #2
 8008d5e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValOffset;
 8008d62:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d66:	33a8      	adds	r3, #168	@ 0xa8
 8008d68:	443b      	add	r3, r7
 8008d6a:	78fa      	ldrb	r2, [r7, #3]
 8008d6c:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008d70:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d74:	3301      	adds	r3, #1
 8008d76:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
    
  buffer[indx] = charValueLen;
 8008d7a:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d7e:	33a8      	adds	r3, #168	@ 0xa8
 8008d80:	443b      	add	r3, r7
 8008d82:	78ba      	ldrb	r2, [r7, #2]
 8008d84:	f803 2ca0 	strb.w	r2, [r3, #-160]
  indx++;
 8008d88:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d8c:	3301      	adds	r3, #1
 8008d8e:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8008d92:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008d96:	f107 0208 	add.w	r2, r7, #8
 8008d9a:	4413      	add	r3, r2
 8008d9c:	78ba      	ldrb	r2, [r7, #2]
 8008d9e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 8008da2:	4618      	mov	r0, r3
 8008da4:	f003 fdcd 	bl	800c942 <memcpy>
  indx +=  charValueLen;
 8008da8:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 8008dac:	78bb      	ldrb	r3, [r7, #2]
 8008dae:	4413      	add	r3, r2
 8008db0:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008db4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008db8:	2218      	movs	r2, #24
 8008dba:	2100      	movs	r1, #0
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f003 fd8b 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008dc2:	233f      	movs	r3, #63	@ 0x3f
 8008dc4:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8008dc8:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8008dcc:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
  rq.cparam = (void *)buffer;
 8008dd0:	f107 0308 	add.w	r3, r7, #8
 8008dd4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  rq.clen = indx;
 8008dd8:	f897 30a7 	ldrb.w	r3, [r7, #167]	@ 0xa7
 8008ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  rq.rparam = &status;
 8008de0:	f107 038b 	add.w	r3, r7, #139	@ 0x8b
 8008de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  rq.rlen = 1;
 8008de8:	2301      	movs	r3, #1
 8008dea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  if (hci_send_req(&rq, FALSE) < 0)
 8008dee:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f000 faf3 	bl	80093e0 <hci_send_req>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da01      	bge.n	8008e04 <aci_gatt_update_char_value+0x108>
    return BLE_STATUS_TIMEOUT;
 8008e00:	23ff      	movs	r3, #255	@ 0xff
 8008e02:	e007      	b.n	8008e14 <aci_gatt_update_char_value+0x118>

  if (status) {
 8008e04:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <aci_gatt_update_char_value+0x116>
    return status;
 8008e0c:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 8008e10:	e000      	b.n	8008e14 <aci_gatt_update_char_value+0x118>
  }

  return 0;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	37ac      	adds	r7, #172	@ 0xac
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd90      	pop	{r4, r7, pc}

08008e1c <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b08a      	sub	sp, #40	@ 0x28
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	4603      	mov	r3, r0
 8008e24:	80fb      	strh	r3, [r7, #6]
    struct hci_request rq;
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	81bb      	strh	r3, [r7, #12]

    BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e2a:	f107 0310 	add.w	r3, r7, #16
 8008e2e:	2218      	movs	r2, #24
 8008e30:	2100      	movs	r1, #0
 8008e32:	4618      	mov	r0, r3
 8008e34:	f003 fd50 	bl	800c8d8 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 8008e38:	233f      	movs	r3, #63	@ 0x3f
 8008e3a:	823b      	strh	r3, [r7, #16]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8008e3c:	f240 1327 	movw	r3, #295	@ 0x127
 8008e40:	827b      	strh	r3, [r7, #18]
    rq.cparam = &cp;
 8008e42:	f107 030c 	add.w	r3, r7, #12
 8008e46:	61bb      	str	r3, [r7, #24]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8008e48:	2302      	movs	r3, #2
 8008e4a:	61fb      	str	r3, [r7, #28]
    rq.rparam = &status;
 8008e4c:	f107 030b 	add.w	r3, r7, #11
 8008e50:	623b      	str	r3, [r7, #32]
    rq.rlen = 1;
 8008e52:	2301      	movs	r3, #1
 8008e54:	627b      	str	r3, [r7, #36]	@ 0x24

    if (hci_send_req(&rq, FALSE) < 0)
 8008e56:	f107 0310 	add.w	r3, r7, #16
 8008e5a:	2100      	movs	r1, #0
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f000 fabf 	bl	80093e0 <hci_send_req>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	da01      	bge.n	8008e6c <aci_gatt_allow_read+0x50>
      return BLE_STATUS_TIMEOUT;
 8008e68:	23ff      	movs	r3, #255	@ 0xff
 8008e6a:	e000      	b.n	8008e6e <aci_gatt_allow_read+0x52>

    return status;
 8008e6c:	7afb      	ldrb	r3, [r7, #11]
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3728      	adds	r7, #40	@ 0x28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <aci_hal_read_config_data>:

  return status;
}

tBleStatus aci_hal_read_config_data(uint8_t offset, uint16_t data_len, uint8_t *data_len_out_p, uint8_t *data)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b0ac      	sub	sp, #176	@ 0xb0
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60ba      	str	r2, [r7, #8]
 8008e7e:	607b      	str	r3, [r7, #4]
 8008e80:	4603      	mov	r3, r0
 8008e82:	73fb      	strb	r3, [r7, #15]
 8008e84:	460b      	mov	r3, r1
 8008e86:	81bb      	strh	r3, [r7, #12]
  struct hci_request rq;
  hal_read_config_data_cp cp;
  hal_read_config_data_rp rp;
  
  cp.offset = offset;
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008e8e:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008e92:	2218      	movs	r2, #24
 8008e94:	2100      	movs	r1, #0
 8008e96:	4618      	mov	r0, r3
 8008e98:	f003 fd1e 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008e9c:	233f      	movs	r3, #63	@ 0x3f
 8008e9e:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
  rq.ocf = OCF_HAL_READ_CONFIG_DATA;
 8008ea2:	230d      	movs	r3, #13
 8008ea4:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  rq.cparam = &cp;
 8008ea8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8008eac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  rq.clen = sizeof(cp);
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  rq.rparam = &rp;
 8008eb6:	f107 0314 	add.w	r3, r7, #20
 8008eba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  rq.rlen = sizeof(rp);
 8008ebe:	2380      	movs	r3, #128	@ 0x80
 8008ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  
  if (hci_send_req(&rq, FALSE) < 0)
 8008ec4:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f000 fa88 	bl	80093e0 <hci_send_req>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	da01      	bge.n	8008eda <aci_hal_read_config_data+0x64>
    return BLE_STATUS_TIMEOUT;
 8008ed6:	23ff      	movs	r3, #255	@ 0xff
 8008ed8:	e01e      	b.n	8008f18 <aci_hal_read_config_data+0xa2>
  
  if(rp.status)
 8008eda:	7d3b      	ldrb	r3, [r7, #20]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d001      	beq.n	8008ee4 <aci_hal_read_config_data+0x6e>
    return rp.status;
 8008ee0:	7d3b      	ldrb	r3, [r7, #20]
 8008ee2:	e019      	b.n	8008f18 <aci_hal_read_config_data+0xa2>
  
  *data_len_out_p = rq.rlen-1;
 8008ee4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	3b01      	subs	r3, #1
 8008eec:	b2da      	uxtb	r2, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	701a      	strb	r2, [r3, #0]
  
  BLUENRG_memcpy(data, rp.data, MIN(data_len, *data_len_out_p));
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	89bb      	ldrh	r3, [r7, #12]
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d201      	bcs.n	8008f02 <aci_hal_read_config_data+0x8c>
 8008efe:	89ba      	ldrh	r2, [r7, #12]
 8008f00:	e002      	b.n	8008f08 <aci_hal_read_config_data+0x92>
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	f107 0314 	add.w	r3, r7, #20
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f003 fd16 	bl	800c942 <memcpy>
  
  return 0;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	37b0      	adds	r7, #176	@ 0xb0
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b08a      	sub	sp, #40	@ 0x28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	460a      	mov	r2, r1
 8008f2a:	71fb      	strb	r3, [r7, #7]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	71bb      	strb	r3, [r7, #6]
  struct hci_request rq;
  hal_set_tx_power_level_cp cp;    
  uint8_t status;
    
  cp.en_high_power = en_high_power;
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	733b      	strb	r3, [r7, #12]
  cp.pa_level = pa_level;
 8008f34:	79bb      	ldrb	r3, [r7, #6]
 8008f36:	737b      	strb	r3, [r7, #13]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8008f38:	f107 0310 	add.w	r3, r7, #16
 8008f3c:	2218      	movs	r2, #24
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f003 fcc9 	bl	800c8d8 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8008f46:	233f      	movs	r3, #63	@ 0x3f
 8008f48:	823b      	strh	r3, [r7, #16]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 8008f4a:	230f      	movs	r3, #15
 8008f4c:	827b      	strh	r3, [r7, #18]
  rq.cparam = &cp;
 8008f4e:	f107 030c 	add.w	r3, r7, #12
 8008f52:	61bb      	str	r3, [r7, #24]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8008f54:	2302      	movs	r3, #2
 8008f56:	61fb      	str	r3, [r7, #28]
  rq.rparam = &status;
 8008f58:	f107 030b 	add.w	r3, r7, #11
 8008f5c:	623b      	str	r3, [r7, #32]
  rq.rlen = 1;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	627b      	str	r3, [r7, #36]	@ 0x24

  if (hci_send_req(&rq, FALSE) < 0)
 8008f62:	f107 0310 	add.w	r3, r7, #16
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fa39 	bl	80093e0 <hci_send_req>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	da01      	bge.n	8008f78 <aci_hal_set_tx_power_level+0x58>
    return BLE_STATUS_TIMEOUT;
 8008f74:	23ff      	movs	r3, #255	@ 0xff
 8008f76:	e000      	b.n	8008f7a <aci_hal_set_tx_power_level+0x5a>

  return status;
 8008f78:	7afb      	ldrb	r3, [r7, #11]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3728      	adds	r7, #40	@ 0x28
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}

08008f82 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 8008f82:	b590      	push	{r4, r7, lr}
 8008f84:	b089      	sub	sp, #36	@ 0x24
 8008f86:	af02      	add	r7, sp, #8
 8008f88:	6078      	str	r0, [r7, #4]
 8008f8a:	6039      	str	r1, [r7, #0]
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8008f8c:	f107 0410 	add.w	r4, r7, #16
 8008f90:	f107 0215 	add.w	r2, r7, #21
 8008f94:	f107 0112 	add.w	r1, r7, #18
 8008f98:	f107 0016 	add.w	r0, r7, #22
 8008f9c:	f107 030e 	add.w	r3, r7, #14
 8008fa0:	9300      	str	r3, [sp, #0]
 8008fa2:	4623      	mov	r3, r4
 8008fa4:	f000 f853 	bl	800904e <hci_le_read_local_version>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	75fb      	strb	r3, [r7, #23]
                                     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d126      	bne.n	8009000 <getBlueNRGVersion+0x7e>
    *hwVersion = hci_revision >> 8;
 8008fb2:	8a7b      	ldrh	r3, [r7, #18]
 8008fb4:	0a1b      	lsrs	r3, r3, #8
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	b2da      	uxtb	r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	701a      	strb	r2, [r3, #0]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
 8008fbe:	8a7b      	ldrh	r3, [r7, #18]
 8008fc0:	021b      	lsls	r3, r3, #8
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	801a      	strh	r2, [r3, #0]
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	b21a      	sxth	r2, r3
 8008fce:	89fb      	ldrh	r3, [r7, #14]
 8008fd0:	091b      	lsrs	r3, r3, #4
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	011b      	lsls	r3, r3, #4
 8008fd6:	b21b      	sxth	r3, r3
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	b21b      	sxth	r3, r3
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	b21b      	sxth	r3, r3
 8008fe0:	b29a      	uxth	r2, r3
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	801a      	strh	r2, [r3, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	881b      	ldrh	r3, [r3, #0]
 8008fea:	b21a      	sxth	r2, r3
 8008fec:	89fb      	ldrh	r3, [r7, #14]
 8008fee:	b21b      	sxth	r3, r3
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	b21b      	sxth	r3, r3
 8008ff6:	4313      	orrs	r3, r2
 8008ff8:	b21b      	sxth	r3, r3
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	801a      	strh	r2, [r3, #0]
  }
  return status;
 8009000:	7dfb      	ldrb	r3, [r7, #23]
}
 8009002:	4618      	mov	r0, r3
 8009004:	371c      	adds	r7, #28
 8009006:	46bd      	mov	sp, r7
 8009008:	bd90      	pop	{r4, r7, pc}

0800900a <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b088      	sub	sp, #32
 800900e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8009010:	f107 0308 	add.w	r3, r7, #8
 8009014:	2218      	movs	r2, #24
 8009016:	2100      	movs	r1, #0
 8009018:	4618      	mov	r0, r3
 800901a:	f003 fc5d 	bl	800c8d8 <memset>
  rq.ogf = OGF_HOST_CTL;
 800901e:	2303      	movs	r3, #3
 8009020:	813b      	strh	r3, [r7, #8]
  rq.ocf = OCF_RESET;
 8009022:	2303      	movs	r3, #3
 8009024:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8009026:	1dfb      	adds	r3, r7, #7
 8009028:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800902a:	2301      	movs	r3, #1
 800902c:	61fb      	str	r3, [r7, #28]
  
  if (hci_send_req(&rq, FALSE) < 0)
 800902e:	f107 0308 	add.w	r3, r7, #8
 8009032:	2100      	movs	r1, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f9d3 	bl	80093e0 <hci_send_req>
 800903a:	4603      	mov	r3, r0
 800903c:	2b00      	cmp	r3, #0
 800903e:	da01      	bge.n	8009044 <hci_reset+0x3a>
    return BLE_STATUS_TIMEOUT;
 8009040:	23ff      	movs	r3, #255	@ 0xff
 8009042:	e000      	b.n	8009046 <hci_reset+0x3c>
  
  return status;  
 8009044:	79fb      	ldrb	r3, [r7, #7]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3720      	adds	r7, #32
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}

0800904e <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 800904e:	b580      	push	{r7, lr}
 8009050:	b08e      	sub	sp, #56	@ 0x38
 8009052:	af00      	add	r7, sp, #0
 8009054:	60f8      	str	r0, [r7, #12]
 8009056:	60b9      	str	r1, [r7, #8]
 8009058:	607a      	str	r2, [r7, #4]
 800905a:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800905c:	f107 0314 	add.w	r3, r7, #20
 8009060:	2209      	movs	r2, #9
 8009062:	2100      	movs	r1, #0
 8009064:	4618      	mov	r0, r3
 8009066:	f003 fc37 	bl	800c8d8 <memset>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800906a:	f107 0320 	add.w	r3, r7, #32
 800906e:	2218      	movs	r2, #24
 8009070:	2100      	movs	r1, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f003 fc30 	bl	800c8d8 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8009078:	2304      	movs	r3, #4
 800907a:	843b      	strh	r3, [r7, #32]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800907c:	2301      	movs	r3, #1
 800907e:	847b      	strh	r3, [r7, #34]	@ 0x22
  rq.cparam = NULL;
 8009080:	2300      	movs	r3, #0
 8009082:	62bb      	str	r3, [r7, #40]	@ 0x28
  rq.clen = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	62fb      	str	r3, [r7, #44]	@ 0x2c
  rq.rparam = &resp;
 8009088:	f107 0314 	add.w	r3, r7, #20
 800908c:	633b      	str	r3, [r7, #48]	@ 0x30
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800908e:	2309      	movs	r3, #9
 8009090:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009092:	f107 0320 	add.w	r3, r7, #32
 8009096:	2100      	movs	r1, #0
 8009098:	4618      	mov	r0, r3
 800909a:	f000 f9a1 	bl	80093e0 <hci_send_req>
 800909e:	4603      	mov	r3, r0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	da01      	bge.n	80090a8 <hci_le_read_local_version+0x5a>
    return BLE_STATUS_TIMEOUT;
 80090a4:	23ff      	movs	r3, #255	@ 0xff
 80090a6:	e018      	b.n	80090da <hci_le_read_local_version+0x8c>
  
  if (resp.status) {
 80090a8:	7d3b      	ldrb	r3, [r7, #20]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d001      	beq.n	80090b2 <hci_le_read_local_version+0x64>
    return resp.status;
 80090ae:	7d3b      	ldrb	r3, [r7, #20]
 80090b0:	e013      	b.n	80090da <hci_le_read_local_version+0x8c>
  }
  
  
  *hci_version = resp.hci_version;
 80090b2:	7d7a      	ldrb	r2, [r7, #21]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	701a      	strb	r2, [r3, #0]
  *hci_revision =  btohs(resp.hci_revision);
 80090b8:	8afa      	ldrh	r2, [r7, #22]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	801a      	strh	r2, [r3, #0]
  *lmp_pal_version = resp.lmp_pal_version;
 80090be:	7e3a      	ldrb	r2, [r7, #24]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	701a      	strb	r2, [r3, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80090c4:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80090c8:	b29a      	uxth	r2, r3
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	801a      	strh	r2, [r3, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80090ce:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090d6:	801a      	strh	r2, [r3, #0]
  
  return 0;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3738      	adds	r7, #56	@ 0x38
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <hci_le_set_advertising_data>:
  
  return status;
}

int hci_le_set_advertising_data(uint8_t length, const uint8_t data[])
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b092      	sub	sp, #72	@ 0x48
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	4603      	mov	r3, r0
 80090ea:	6039      	str	r1, [r7, #0]
 80090ec:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_adv_data_cp adv_cp;
  uint8_t status;
  
  BLUENRG_memset(&adv_cp, 0, sizeof(adv_cp));
 80090ee:	f107 0310 	add.w	r3, r7, #16
 80090f2:	2220      	movs	r2, #32
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f003 fbee 	bl	800c8d8 <memset>
  adv_cp.length = length;
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(adv_cp.data, data, MIN(31,length));
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	2b1f      	cmp	r3, #31
 8009104:	bf28      	it	cs
 8009106:	231f      	movcs	r3, #31
 8009108:	b2db      	uxtb	r3, r3
 800910a:	461a      	mov	r2, r3
 800910c:	f107 0310 	add.w	r3, r7, #16
 8009110:	3301      	adds	r3, #1
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	4618      	mov	r0, r3
 8009116:	f003 fc14 	bl	800c942 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800911a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800911e:	2218      	movs	r2, #24
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f003 fbd8 	bl	800c8d8 <memset>
  rq.ogf = OGF_LE_CTL;
 8009128:	2308      	movs	r3, #8
 800912a:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_ADV_DATA;
 800912c:	2308      	movs	r3, #8
 800912e:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &adv_cp;
 8009130:	f107 0310 	add.w	r3, r7, #16
 8009134:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_ADV_DATA_CP_SIZE;
 8009136:	2320      	movs	r3, #32
 8009138:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 800913a:	f107 030f 	add.w	r3, r7, #15
 800913e:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 8009140:	2301      	movs	r3, #1
 8009142:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 8009144:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8009148:	2100      	movs	r1, #0
 800914a:	4618      	mov	r0, r3
 800914c:	f000 f948 	bl	80093e0 <hci_send_req>
 8009150:	4603      	mov	r3, r0
 8009152:	2b00      	cmp	r3, #0
 8009154:	da01      	bge.n	800915a <hci_le_set_advertising_data+0x78>
    return BLE_STATUS_TIMEOUT;
 8009156:	23ff      	movs	r3, #255	@ 0xff
 8009158:	e000      	b.n	800915c <hci_le_set_advertising_data+0x7a>
  
  return status;
 800915a:	7bfb      	ldrb	r3, [r7, #15]
}
 800915c:	4618      	mov	r0, r3
 800915e:	3748      	adds	r7, #72	@ 0x48
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b092      	sub	sp, #72	@ 0x48
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	71fb      	strb	r3, [r7, #7]
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 8009170:	f107 0310 	add.w	r3, r7, #16
 8009174:	2220      	movs	r2, #32
 8009176:	2100      	movs	r1, #0
 8009178:	4618      	mov	r0, r3
 800917a:	f003 fbad 	bl	800c8d8 <memset>
  scan_resp_cp.length = length;
 800917e:	79fb      	ldrb	r3, [r7, #7]
 8009180:	743b      	strb	r3, [r7, #16]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 8009182:	79fb      	ldrb	r3, [r7, #7]
 8009184:	2b1f      	cmp	r3, #31
 8009186:	bf28      	it	cs
 8009188:	231f      	movcs	r3, #31
 800918a:	b2db      	uxtb	r3, r3
 800918c:	461a      	mov	r2, r3
 800918e:	f107 0310 	add.w	r3, r7, #16
 8009192:	3301      	adds	r3, #1
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	4618      	mov	r0, r3
 8009198:	f003 fbd3 	bl	800c942 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800919c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80091a0:	2218      	movs	r2, #24
 80091a2:	2100      	movs	r1, #0
 80091a4:	4618      	mov	r0, r3
 80091a6:	f003 fb97 	bl	800c8d8 <memset>
  rq.ogf = OGF_LE_CTL;
 80091aa:	2308      	movs	r3, #8
 80091ac:	863b      	strh	r3, [r7, #48]	@ 0x30
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 80091ae:	2309      	movs	r3, #9
 80091b0:	867b      	strh	r3, [r7, #50]	@ 0x32
  rq.cparam = &scan_resp_cp;
 80091b2:	f107 0310 	add.w	r3, r7, #16
 80091b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 80091b8:	2320      	movs	r3, #32
 80091ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  rq.rparam = &status;
 80091bc:	f107 030f 	add.w	r3, r7, #15
 80091c0:	643b      	str	r3, [r7, #64]	@ 0x40
  rq.rlen = 1;
 80091c2:	2301      	movs	r3, #1
 80091c4:	647b      	str	r3, [r7, #68]	@ 0x44
  
  if (hci_send_req(&rq, FALSE) < 0)
 80091c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80091ca:	2100      	movs	r1, #0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f000 f907 	bl	80093e0 <hci_send_req>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	da01      	bge.n	80091dc <hci_le_set_scan_resp_data+0x78>
    return BLE_STATUS_TIMEOUT;
 80091d8:	23ff      	movs	r3, #255	@ 0xff
 80091da:	e000      	b.n	80091de <hci_le_set_scan_resp_data+0x7a>
  
  return status;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3748      	adds	r7, #72	@ 0x48
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	3308      	adds	r3, #8
 80091f2:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b04      	cmp	r3, #4
 80091fa:	d001      	beq.n	8009200 <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80091fc:	2301      	movs	r3, #1
 80091fe:	e00c      	b.n	800921a <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3302      	adds	r3, #2
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	461a      	mov	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800920e:	3b03      	subs	r3, #3
 8009210:	429a      	cmp	r2, r3
 8009212:	d001      	beq.n	8009218 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8009214:	2302      	movs	r3, #2
 8009216:	e000      	b.n	800921a <verify_packet+0x34>
  
  return 0;      
 8009218:	2300      	movs	r3, #0
}
 800921a:	4618      	mov	r0, r3
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
	...

08009228 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b0a6      	sub	sp, #152	@ 0x98
 800922c:	af00      	add	r7, sp, #0
 800922e:	607b      	str	r3, [r7, #4]
 8009230:	4603      	mov	r3, r0
 8009232:	81fb      	strh	r3, [r7, #14]
 8009234:	460b      	mov	r3, r1
 8009236:	81bb      	strh	r3, [r7, #12]
 8009238:	4613      	mov	r3, r2
 800923a:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800923c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009244:	b21a      	sxth	r2, r3
 8009246:	89fb      	ldrh	r3, [r7, #14]
 8009248:	029b      	lsls	r3, r3, #10
 800924a:	b21b      	sxth	r3, r3
 800924c:	4313      	orrs	r3, r2
 800924e:	b21b      	sxth	r3, r3
 8009250:	b29b      	uxth	r3, r3
 8009252:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8009254:	7afb      	ldrb	r3, [r7, #11]
 8009256:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8009258:	2301      	movs	r3, #1
 800925a:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800925c:	f107 0318 	add.w	r3, r7, #24
 8009260:	3301      	adds	r3, #1
 8009262:	461a      	mov	r2, r3
 8009264:	f107 0314 	add.w	r3, r7, #20
 8009268:	8819      	ldrh	r1, [r3, #0]
 800926a:	789b      	ldrb	r3, [r3, #2]
 800926c:	8011      	strh	r1, [r2, #0]
 800926e:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8009270:	f107 0318 	add.w	r3, r7, #24
 8009274:	3304      	adds	r3, #4
 8009276:	7afa      	ldrb	r2, [r7, #11]
 8009278:	6879      	ldr	r1, [r7, #4]
 800927a:	4618      	mov	r0, r3
 800927c:	f003 fb61 	bl	800c942 <memcpy>
  
  if (hciContext.io.Send)
 8009280:	4b08      	ldr	r3, [pc, #32]	@ (80092a4 <send_cmd+0x7c>)
 8009282:	691b      	ldr	r3, [r3, #16]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d009      	beq.n	800929c <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8009288:	4b06      	ldr	r3, [pc, #24]	@ (80092a4 <send_cmd+0x7c>)
 800928a:	691b      	ldr	r3, [r3, #16]
 800928c:	7afa      	ldrb	r2, [r7, #11]
 800928e:	b292      	uxth	r2, r2
 8009290:	3204      	adds	r2, #4
 8009292:	b291      	uxth	r1, r2
 8009294:	f107 0218 	add.w	r2, r7, #24
 8009298:	4610      	mov	r0, r2
 800929a:	4798      	blx	r3
  }
}
 800929c:	bf00      	nop
 800929e:	3798      	adds	r7, #152	@ 0x98
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	20001178 	.word	0x20001178

080092a8 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 80092b2:	e00a      	b.n	80092ca <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80092b4:	f107 030c 	add.w	r3, r7, #12
 80092b8:	4619      	mov	r1, r3
 80092ba:	6838      	ldr	r0, [r7, #0]
 80092bc:	f000 fae8 	bl	8009890 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	4619      	mov	r1, r3
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 fa4f 	bl	8009768 <list_insert_head>
  while (!list_is_empty(src_list))
 80092ca:	6838      	ldr	r0, [r7, #0]
 80092cc:	f000 fa2a 	bl	8009724 <list_is_empty>
 80092d0:	4603      	mov	r3, r0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0ee      	beq.n	80092b4 <move_list+0xc>
  }
}
 80092d6:	bf00      	nop
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80092e6:	e009      	b.n	80092fc <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80092e8:	1d3b      	adds	r3, r7, #4
 80092ea:	4619      	mov	r1, r3
 80092ec:	4809      	ldr	r0, [pc, #36]	@ (8009314 <free_event_list+0x34>)
 80092ee:	f000 faa8 	bl	8009842 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4619      	mov	r1, r3
 80092f6:	4808      	ldr	r0, [pc, #32]	@ (8009318 <free_event_list+0x38>)
 80092f8:	f000 fa5c 	bl	80097b4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80092fc:	4806      	ldr	r0, [pc, #24]	@ (8009318 <free_event_list+0x38>)
 80092fe:	f000 faee 	bl	80098de <list_get_size>
 8009302:	4603      	mov	r3, r0
 8009304:	2b01      	cmp	r3, #1
 8009306:	ddef      	ble.n	80092e8 <free_event_list+0x8>
  }
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20000eb4 	.word	0x20000eb4
 8009318:	20000eac 	.word	0x20000eac

0800931c <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 800932c:	4a18      	ldr	r2, [pc, #96]	@ (8009390 <hci_init+0x74>)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8009332:	4818      	ldr	r0, [pc, #96]	@ (8009394 <hci_init+0x78>)
 8009334:	f000 f9e6 	bl	8009704 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8009338:	4817      	ldr	r0, [pc, #92]	@ (8009398 <hci_init+0x7c>)
 800933a:	f000 f9e3 	bl	8009704 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800933e:	f7f7 ff6d 	bl	800121c <hci_tl_lowlevel_init>
    
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8009342:	2300      	movs	r3, #0
 8009344:	73fb      	strb	r3, [r7, #15]
 8009346:	e00c      	b.n	8009362 <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	228c      	movs	r2, #140	@ 0x8c
 800934c:	fb02 f303 	mul.w	r3, r2, r3
 8009350:	4a12      	ldr	r2, [pc, #72]	@ (800939c <hci_init+0x80>)
 8009352:	4413      	add	r3, r2
 8009354:	4619      	mov	r1, r3
 8009356:	480f      	ldr	r0, [pc, #60]	@ (8009394 <hci_init+0x78>)
 8009358:	f000 fa2c 	bl	80097b4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800935c:	7bfb      	ldrb	r3, [r7, #15]
 800935e:	3301      	adds	r3, #1
 8009360:	73fb      	strb	r3, [r7, #15]
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	2b04      	cmp	r3, #4
 8009366:	d9ef      	bls.n	8009348 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8009368:	4b09      	ldr	r3, [pc, #36]	@ (8009390 <hci_init+0x74>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <hci_init+0x5c>
 8009370:	4b07      	ldr	r3, [pc, #28]	@ (8009390 <hci_init+0x74>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2000      	movs	r0, #0
 8009376:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8009378:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <hci_init+0x74>)
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <hci_init+0x6a>
 8009380:	4b03      	ldr	r3, [pc, #12]	@ (8009390 <hci_init+0x74>)
 8009382:	689b      	ldr	r3, [r3, #8]
 8009384:	4798      	blx	r3
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	20001178 	.word	0x20001178
 8009394:	20000eac 	.word	0x20000eac
 8009398:	20000eb4 	.word	0x20000eb4
 800939c:	20000ebc 	.word	0x20000ebc

080093a0 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	4a0b      	ldr	r2, [pc, #44]	@ (80093dc <hci_register_io_bus+0x3c>)
 80093ae:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	4a09      	ldr	r2, [pc, #36]	@ (80093dc <hci_register_io_bus+0x3c>)
 80093b6:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	4a07      	ldr	r2, [pc, #28]	@ (80093dc <hci_register_io_bus+0x3c>)
 80093be:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	4a05      	ldr	r2, [pc, #20]	@ (80093dc <hci_register_io_bus+0x3c>)
 80093c6:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	689b      	ldr	r3, [r3, #8]
 80093cc:	4a03      	ldr	r2, [pc, #12]	@ (80093dc <hci_register_io_bus+0x3c>)
 80093ce:	6093      	str	r3, [r2, #8]
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr
 80093dc:	20001178 	.word	0x20001178

080093e0 <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b08e      	sub	sp, #56	@ 0x38
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
 80093e8:	460b      	mov	r3, r1
 80093ea:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	885b      	ldrh	r3, [r3, #2]
 80093f0:	b21b      	sxth	r3, r3
 80093f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093f6:	b21a      	sxth	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	881b      	ldrh	r3, [r3, #0]
 80093fc:	029b      	lsls	r3, r3, #10
 80093fe:	b21b      	sxth	r3, r3
 8009400:	4313      	orrs	r3, r2
 8009402:	b21b      	sxth	r3, r3
 8009404:	86fb      	strh	r3, [r7, #54]	@ 0x36
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 8009406:	2300      	movs	r3, #0
 8009408:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 800940a:	f107 0308 	add.w	r3, r7, #8
 800940e:	4618      	mov	r0, r3
 8009410:	f000 f978 	bl	8009704 <list_init_head>

  free_event_list();
 8009414:	f7ff ff64 	bl	80092e0 <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	8818      	ldrh	r0, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	8859      	ldrh	r1, [r3, #2]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	b2da      	uxtb	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	f7ff fefd 	bl	8009228 <send_cmd>
  
  if (async)
 800942e:	78fb      	ldrb	r3, [r7, #3]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d001      	beq.n	8009438 <hci_send_req+0x58>
  {
    return 0;
 8009434:	2300      	movs	r3, #0
 8009436:	e0e2      	b.n	80095fe <hci_send_req+0x21e>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8009438:	f7fa fabe 	bl	80039b8 <HAL_GetTick>
 800943c:	6338      	str	r0, [r7, #48]	@ 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800943e:	f7fa fabb 	bl	80039b8 <HAL_GetTick>
 8009442:	4602      	mov	r2, r0
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	1ad3      	subs	r3, r2, r3
 8009448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800944c:	f200 80b3 	bhi.w	80095b6 <hci_send_req+0x1d6>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8009450:	486d      	ldr	r0, [pc, #436]	@ (8009608 <hci_send_req+0x228>)
 8009452:	f000 f967 	bl	8009724 <list_is_empty>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d000      	beq.n	800945e <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800945c:	e7ef      	b.n	800943e <hci_send_req+0x5e>
      {
        break;
 800945e:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8009460:	f107 0310 	add.w	r3, r7, #16
 8009464:	4619      	mov	r1, r3
 8009466:	4868      	ldr	r0, [pc, #416]	@ (8009608 <hci_send_req+0x228>)
 8009468:	f000 f9eb 	bl	8009842 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	3308      	adds	r3, #8
 8009470:	62fb      	str	r3, [r7, #44]	@ 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 8009472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	2b04      	cmp	r3, #4
 8009478:	d17f      	bne.n	800957a <hci_send_req+0x19a>
    {
      event_pckt = (void *)(hci_hdr->data);
 800947a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800947c:	3301      	adds	r3, #1
 800947e:	62bb      	str	r3, [r7, #40]	@ 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	3308      	adds	r3, #8
 8009484:	3303      	adds	r3, #3
 8009486:	627b      	str	r3, [r7, #36]	@ 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 800948e:	3b03      	subs	r3, #3
 8009490:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 8009492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	2b3e      	cmp	r3, #62	@ 0x3e
 8009498:	d04c      	beq.n	8009534 <hci_send_req+0x154>
 800949a:	2b3e      	cmp	r3, #62	@ 0x3e
 800949c:	dc68      	bgt.n	8009570 <hci_send_req+0x190>
 800949e:	2b10      	cmp	r3, #16
 80094a0:	f000 808b 	beq.w	80095ba <hci_send_req+0x1da>
 80094a4:	2b10      	cmp	r3, #16
 80094a6:	dc63      	bgt.n	8009570 <hci_send_req+0x190>
 80094a8:	2b0e      	cmp	r3, #14
 80094aa:	d023      	beq.n	80094f4 <hci_send_req+0x114>
 80094ac:	2b0f      	cmp	r3, #15
 80094ae:	d15f      	bne.n	8009570 <hci_send_req+0x190>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 80094b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094b2:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	885b      	ldrh	r3, [r3, #2]
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80094bc:	429a      	cmp	r2, r3
 80094be:	d17e      	bne.n	80095be <hci_send_req+0x1de>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	2b0f      	cmp	r3, #15
 80094c6:	d004      	beq.n	80094d2 <hci_send_req+0xf2>
          if (cs->status) {
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d051      	beq.n	8009574 <hci_send_req+0x194>
            goto failed;
 80094d0:	e078      	b.n	80095c4 <hci_send_req+0x1e4>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695a      	ldr	r2, [r3, #20]
 80094d6:	6a3b      	ldr	r3, [r7, #32]
 80094d8:	429a      	cmp	r2, r3
 80094da:	bf28      	it	cs
 80094dc:	461a      	movcs	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6918      	ldr	r0, [r3, #16]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	695b      	ldr	r3, [r3, #20]
 80094ea:	461a      	mov	r2, r3
 80094ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80094ee:	f003 fa28 	bl	800c942 <memcpy>
        goto done;
 80094f2:	e078      	b.n	80095e6 <hci_send_req+0x206>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80094f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094f6:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80094f8:	697b      	ldr	r3, [r7, #20]
 80094fa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80094fe:	b29b      	uxth	r3, r3
 8009500:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009502:	429a      	cmp	r2, r3
 8009504:	d15d      	bne.n	80095c2 <hci_send_req+0x1e2>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	3303      	adds	r3, #3
 800950a:	627b      	str	r3, [r7, #36]	@ 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 800950c:	6a3b      	ldr	r3, [r7, #32]
 800950e:	3b03      	subs	r3, #3
 8009510:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	429a      	cmp	r2, r3
 800951a:	bf28      	it	cs
 800951c:	461a      	movcs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6918      	ldr	r0, [r3, #16]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	695b      	ldr	r3, [r3, #20]
 800952a:	461a      	mov	r2, r3
 800952c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800952e:	f003 fa08 	bl	800c942 <memcpy>
        goto done;
 8009532:	e058      	b.n	80095e6 <hci_send_req+0x206>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8009534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009536:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8009538:	69fb      	ldr	r3, [r7, #28]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	461a      	mov	r2, r3
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	429a      	cmp	r2, r3
 8009544:	d118      	bne.n	8009578 <hci_send_req+0x198>
          break;
      
        len -= 1;
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	3b01      	subs	r3, #1
 800954a:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	695a      	ldr	r2, [r3, #20]
 8009550:	6a3b      	ldr	r3, [r7, #32]
 8009552:	429a      	cmp	r2, r3
 8009554:	bf28      	it	cs
 8009556:	461a      	movcs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6918      	ldr	r0, [r3, #16]
 8009560:	69fb      	ldr	r3, [r7, #28]
 8009562:	1c59      	adds	r1, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	461a      	mov	r2, r3
 800956a:	f003 f9ea 	bl	800c942 <memcpy>
        goto done;
 800956e:	e03a      	b.n	80095e6 <hci_send_req+0x206>
      
      case EVT_HARDWARE_ERROR:            
        goto failed;
      
      default:      
        break;
 8009570:	bf00      	nop
 8009572:	e002      	b.n	800957a <hci_send_req+0x19a>
          break;
 8009574:	bf00      	nop
 8009576:	e000      	b.n	800957a <hci_send_req+0x19a>
          break;
 8009578:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800957a:	4824      	ldr	r0, [pc, #144]	@ (800960c <hci_send_req+0x22c>)
 800957c:	f000 f8d2 	bl	8009724 <list_is_empty>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00d      	beq.n	80095a2 <hci_send_req+0x1c2>
 8009586:	4820      	ldr	r0, [pc, #128]	@ (8009608 <hci_send_req+0x228>)
 8009588:	f000 f8cc 	bl	8009724 <list_is_empty>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d007      	beq.n	80095a2 <hci_send_req+0x1c2>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	4619      	mov	r1, r3
 8009596:	481d      	ldr	r0, [pc, #116]	@ (800960c <hci_send_req+0x22c>)
 8009598:	f000 f90c 	bl	80097b4 <list_insert_tail>
      hciReadPacket=NULL;
 800959c:	2300      	movs	r3, #0
 800959e:	613b      	str	r3, [r7, #16]
 80095a0:	e008      	b.n	80095b4 <hci_send_req+0x1d4>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80095a2:	693a      	ldr	r2, [r7, #16]
 80095a4:	f107 0308 	add.w	r3, r7, #8
 80095a8:	4611      	mov	r1, r2
 80095aa:	4618      	mov	r0, r3
 80095ac:	f000 f902 	bl	80097b4 <list_insert_tail>
      hciReadPacket=NULL;
 80095b0:	2300      	movs	r3, #0
 80095b2:	613b      	str	r3, [r7, #16]
  {
 80095b4:	e740      	b.n	8009438 <hci_send_req+0x58>
        goto failed;
 80095b6:	bf00      	nop
 80095b8:	e004      	b.n	80095c4 <hci_send_req+0x1e4>
        goto failed;
 80095ba:	bf00      	nop
 80095bc:	e002      	b.n	80095c4 <hci_send_req+0x1e4>
          goto failed;
 80095be:	bf00      	nop
 80095c0:	e000      	b.n	80095c4 <hci_send_req+0x1e4>
          goto failed;
 80095c2:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d004      	beq.n	80095d4 <hci_send_req+0x1f4>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	4619      	mov	r1, r3
 80095ce:	480f      	ldr	r0, [pc, #60]	@ (800960c <hci_send_req+0x22c>)
 80095d0:	f000 f8ca 	bl	8009768 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80095d4:	f107 0308 	add.w	r3, r7, #8
 80095d8:	4619      	mov	r1, r3
 80095da:	480b      	ldr	r0, [pc, #44]	@ (8009608 <hci_send_req+0x228>)
 80095dc:	f7ff fe64 	bl	80092a8 <move_list>

  return -1;
 80095e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80095e4:	e00b      	b.n	80095fe <hci_send_req+0x21e>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	4619      	mov	r1, r3
 80095ea:	4808      	ldr	r0, [pc, #32]	@ (800960c <hci_send_req+0x22c>)
 80095ec:	f000 f8bc 	bl	8009768 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80095f0:	f107 0308 	add.w	r3, r7, #8
 80095f4:	4619      	mov	r1, r3
 80095f6:	4804      	ldr	r0, [pc, #16]	@ (8009608 <hci_send_req+0x228>)
 80095f8:	f7ff fe56 	bl	80092a8 <move_list>

  return 0;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3738      	adds	r7, #56	@ 0x38
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop
 8009608:	20000eb4 	.word	0x20000eb4
 800960c:	20000eac 	.word	0x20000eac

08009610 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8009616:	2300      	movs	r3, #0
 8009618:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800961a:	e013      	b.n	8009644 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800961c:	1d3b      	adds	r3, r7, #4
 800961e:	4619      	mov	r1, r3
 8009620:	480e      	ldr	r0, [pc, #56]	@ (800965c <hci_user_evt_proc+0x4c>)
 8009622:	f000 f90e 	bl	8009842 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8009626:	4b0e      	ldr	r3, [pc, #56]	@ (8009660 <hci_user_evt_proc+0x50>)
 8009628:	69db      	ldr	r3, [r3, #28]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d005      	beq.n	800963a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800962e:	4b0c      	ldr	r3, [pc, #48]	@ (8009660 <hci_user_evt_proc+0x50>)
 8009630:	69db      	ldr	r3, [r3, #28]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	3208      	adds	r2, #8
 8009636:	4610      	mov	r0, r2
 8009638:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4619      	mov	r1, r3
 800963e:	4809      	ldr	r0, [pc, #36]	@ (8009664 <hci_user_evt_proc+0x54>)
 8009640:	f000 f8b8 	bl	80097b4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8009644:	4805      	ldr	r0, [pc, #20]	@ (800965c <hci_user_evt_proc+0x4c>)
 8009646:	f000 f86d 	bl	8009724 <list_is_empty>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d0e5      	beq.n	800961c <hci_user_evt_proc+0xc>
  }
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	3708      	adds	r7, #8
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20000eb4 	.word	0x20000eb4
 8009660:	20001178 	.word	0x20001178
 8009664:	20000eac 	.word	0x20000eac

08009668 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8009670:	2300      	movs	r3, #0
 8009672:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8009674:	2300      	movs	r3, #0
 8009676:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8009678:	481f      	ldr	r0, [pc, #124]	@ (80096f8 <hci_notify_asynch_evt+0x90>)
 800967a:	f000 f853 	bl	8009724 <list_is_empty>
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d132      	bne.n	80096ea <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8009684:	f107 030c 	add.w	r3, r7, #12
 8009688:	4619      	mov	r1, r3
 800968a:	481b      	ldr	r0, [pc, #108]	@ (80096f8 <hci_notify_asynch_evt+0x90>)
 800968c:	f000 f8d9 	bl	8009842 <list_remove_head>
    
    if (hciContext.io.Receive)
 8009690:	4b1a      	ldr	r3, [pc, #104]	@ (80096fc <hci_notify_asynch_evt+0x94>)
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	2b00      	cmp	r3, #0
 8009696:	d02a      	beq.n	80096ee <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8009698:	4b18      	ldr	r3, [pc, #96]	@ (80096fc <hci_notify_asynch_evt+0x94>)
 800969a:	68db      	ldr	r3, [r3, #12]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	3208      	adds	r2, #8
 80096a0:	2180      	movs	r1, #128	@ 0x80
 80096a2:	4610      	mov	r0, r2
 80096a4:	4798      	blx	r3
 80096a6:	4603      	mov	r3, r0
 80096a8:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 80096aa:	7cfb      	ldrb	r3, [r7, #19]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d016      	beq.n	80096de <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	7cfa      	ldrb	r2, [r7, #19]
 80096b4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
        if (verify_packet(hciReadPacket) == 0)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7ff fd93 	bl	80091e6 <verify_packet>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d105      	bne.n	80096d2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	4619      	mov	r1, r3
 80096ca:	480d      	ldr	r0, [pc, #52]	@ (8009700 <hci_notify_asynch_evt+0x98>)
 80096cc:	f000 f872 	bl	80097b4 <list_insert_tail>
 80096d0:	e00d      	b.n	80096ee <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	4619      	mov	r1, r3
 80096d6:	4808      	ldr	r0, [pc, #32]	@ (80096f8 <hci_notify_asynch_evt+0x90>)
 80096d8:	f000 f846 	bl	8009768 <list_insert_head>
 80096dc:	e007      	b.n	80096ee <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	4619      	mov	r1, r3
 80096e2:	4805      	ldr	r0, [pc, #20]	@ (80096f8 <hci_notify_asynch_evt+0x90>)
 80096e4:	f000 f840 	bl	8009768 <list_insert_head>
 80096e8:	e001      	b.n	80096ee <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80096ea:	2301      	movs	r3, #1
 80096ec:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80096ee:	697b      	ldr	r3, [r7, #20]

}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3718      	adds	r7, #24
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}
 80096f8:	20000eac 	.word	0x20000eac
 80096fc:	20001178 	.word	0x20001178
 8009700:	20000eb4 	.word	0x20000eb4

08009704 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 8009704:	b480      	push	{r7}
 8009706:	b083      	sub	sp, #12
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	687a      	ldr	r2, [r7, #4]
 8009710:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	605a      	str	r2, [r3, #4]
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8009724:	b480      	push	{r7}
 8009726:	b087      	sub	sp, #28
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800972c:	f3ef 8310 	mrs	r3, PRIMASK
 8009730:	60fb      	str	r3, [r7, #12]
  return(result);
 8009732:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009734:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8009736:	b672      	cpsid	i
}
 8009738:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	429a      	cmp	r2, r3
 8009742:	d102      	bne.n	800974a <list_is_empty+0x26>
  {
    return_value = 1;
 8009744:	2301      	movs	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]
 8009748:	e001      	b.n	800974e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	f383 8810 	msr	PRIMASK, r3
}
 8009758:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800975a:	7dfb      	ldrb	r3, [r7, #23]
}
 800975c:	4618      	mov	r0, r3
 800975e:	371c      	adds	r7, #28
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8009768:	b480      	push	{r7}
 800976a:	b087      	sub	sp, #28
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009772:	f3ef 8310 	mrs	r3, PRIMASK
 8009776:	60fb      	str	r3, [r7, #12]
  return(result);
 8009778:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800977a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800977c:	b672      	cpsid	i
}
 800977e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681a      	ldr	r2, [r3, #0]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	683a      	ldr	r2, [r7, #0]
 8009792:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	683a      	ldr	r2, [r7, #0]
 800979a:	605a      	str	r2, [r3, #4]
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	f383 8810 	msr	PRIMASK, r3
}
 80097a6:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80097a8:	bf00      	nop
 80097aa:	371c      	adds	r7, #28
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr

080097b4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b087      	sub	sp, #28
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
 80097bc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097be:	f3ef 8310 	mrs	r3, PRIMASK
 80097c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80097c4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80097c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80097c8:	b672      	cpsid	i
}
 80097ca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	687a      	ldr	r2, [r7, #4]
 80097d0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	685a      	ldr	r2, [r3, #4]
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	601a      	str	r2, [r3, #0]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	f383 8810 	msr	PRIMASK, r3
}
 80097f2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80097f4:	bf00      	nop
 80097f6:	371c      	adds	r7, #28
 80097f8:	46bd      	mov	sp, r7
 80097fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fe:	4770      	bx	lr

08009800 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009808:	f3ef 8310 	mrs	r3, PRIMASK
 800980c:	60fb      	str	r3, [r7, #12]
  return(result);
 800980e:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009810:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009812:	b672      	cpsid	i
}
 8009814:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	687a      	ldr	r2, [r7, #4]
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6852      	ldr	r2, [r2, #4]
 8009828:	605a      	str	r2, [r3, #4]
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	f383 8810 	msr	PRIMASK, r3
}
 8009834:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009836:	bf00      	nop
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b086      	sub	sp, #24
 8009846:	af00      	add	r7, sp, #0
 8009848:	6078      	str	r0, [r7, #4]
 800984a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800984c:	f3ef 8310 	mrs	r3, PRIMASK
 8009850:	60fb      	str	r3, [r7, #12]
  return(result);
 8009852:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009854:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009856:	b672      	cpsid	i
}
 8009858:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4618      	mov	r0, r3
 8009868:	f7ff ffca 	bl	8009800 <list_remove_node>
  (*node)->next = NULL;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2200      	movs	r2, #0
 8009872:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2200      	movs	r2, #0
 800987a:	605a      	str	r2, [r3, #4]
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	f383 8810 	msr	PRIMASK, r3
}
 8009886:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8009888:	bf00      	nop
 800988a:	3718      	adds	r7, #24
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
 8009898:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800989a:	f3ef 8310 	mrs	r3, PRIMASK
 800989e:	60fb      	str	r3, [r7, #12]
  return(result);
 80098a0:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80098a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098a4:	b672      	cpsid	i
}
 80098a6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ffa3 	bl	8009800 <list_remove_node>
  (*node)->next = NULL;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	2200      	movs	r2, #0
 80098c0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	2200      	movs	r2, #0
 80098c8:	605a      	str	r2, [r3, #4]
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	f383 8810 	msr	PRIMASK, r3
}
 80098d4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80098d6:	bf00      	nop
 80098d8:	3718      	adds	r7, #24
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 80098de:	b480      	push	{r7}
 80098e0:	b089      	sub	sp, #36	@ 0x24
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  int size = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098ea:	f3ef 8310 	mrs	r3, PRIMASK
 80098ee:	613b      	str	r3, [r7, #16]
  return(result);
 80098f0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80098f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80098f4:	b672      	cpsid	i
}
 80098f6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 80098fe:	e005      	b.n	800990c <list_get_size+0x2e>
  {
    size++;
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	3301      	adds	r3, #1
 8009904:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	429a      	cmp	r2, r3
 8009912:	d1f5      	bne.n	8009900 <list_get_size+0x22>
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f383 8810 	msr	PRIMASK, r3
}
 800991e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8009920:	69fb      	ldr	r3, [r7, #28]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3724      	adds	r7, #36	@ 0x24
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
	...

08009930 <__NVIC_SetPriority>:
{
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 8009936:	4603      	mov	r3, r0
 8009938:	6039      	str	r1, [r7, #0]
 800993a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800993c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009940:	2b00      	cmp	r3, #0
 8009942:	db0a      	blt.n	800995a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	b2da      	uxtb	r2, r3
 8009948:	490c      	ldr	r1, [pc, #48]	@ (800997c <__NVIC_SetPriority+0x4c>)
 800994a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800994e:	0112      	lsls	r2, r2, #4
 8009950:	b2d2      	uxtb	r2, r2
 8009952:	440b      	add	r3, r1
 8009954:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009958:	e00a      	b.n	8009970 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	b2da      	uxtb	r2, r3
 800995e:	4908      	ldr	r1, [pc, #32]	@ (8009980 <__NVIC_SetPriority+0x50>)
 8009960:	79fb      	ldrb	r3, [r7, #7]
 8009962:	f003 030f 	and.w	r3, r3, #15
 8009966:	3b04      	subs	r3, #4
 8009968:	0112      	lsls	r2, r2, #4
 800996a:	b2d2      	uxtb	r2, r2
 800996c:	440b      	add	r3, r1
 800996e:	761a      	strb	r2, [r3, #24]
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	e000e100 	.word	0xe000e100
 8009980:	e000ed00 	.word	0xe000ed00

08009984 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009984:	b580      	push	{r7, lr}
 8009986:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009988:	2100      	movs	r1, #0
 800998a:	f06f 0004 	mvn.w	r0, #4
 800998e:	f7ff ffcf 	bl	8009930 <__NVIC_SetPriority>
#endif
}
 8009992:	bf00      	nop
 8009994:	bd80      	pop	{r7, pc}
	...

08009998 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800999e:	f3ef 8305 	mrs	r3, IPSR
 80099a2:	603b      	str	r3, [r7, #0]
  return(result);
 80099a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80099aa:	f06f 0305 	mvn.w	r3, #5
 80099ae:	607b      	str	r3, [r7, #4]
 80099b0:	e00c      	b.n	80099cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80099b2:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <osKernelInitialize+0x44>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d105      	bne.n	80099c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80099ba:	4b08      	ldr	r3, [pc, #32]	@ (80099dc <osKernelInitialize+0x44>)
 80099bc:	2201      	movs	r2, #1
 80099be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80099c0:	2300      	movs	r3, #0
 80099c2:	607b      	str	r3, [r7, #4]
 80099c4:	e002      	b.n	80099cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80099c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099cc:	687b      	ldr	r3, [r7, #4]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	370c      	adds	r7, #12
 80099d2:	46bd      	mov	sp, r7
 80099d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d8:	4770      	bx	lr
 80099da:	bf00      	nop
 80099dc:	20001198 	.word	0x20001198

080099e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099e6:	f3ef 8305 	mrs	r3, IPSR
 80099ea:	603b      	str	r3, [r7, #0]
  return(result);
 80099ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80099f2:	f06f 0305 	mvn.w	r3, #5
 80099f6:	607b      	str	r3, [r7, #4]
 80099f8:	e010      	b.n	8009a1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80099fa:	4b0b      	ldr	r3, [pc, #44]	@ (8009a28 <osKernelStart+0x48>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d109      	bne.n	8009a16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009a02:	f7ff ffbf 	bl	8009984 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009a06:	4b08      	ldr	r3, [pc, #32]	@ (8009a28 <osKernelStart+0x48>)
 8009a08:	2202      	movs	r2, #2
 8009a0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009a0c:	f001 f9a8 	bl	800ad60 <vTaskStartScheduler>
      stat = osOK;
 8009a10:	2300      	movs	r3, #0
 8009a12:	607b      	str	r3, [r7, #4]
 8009a14:	e002      	b.n	8009a1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009a1c:	687b      	ldr	r3, [r7, #4]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20001198 	.word	0x20001198

08009a2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b08e      	sub	sp, #56	@ 0x38
 8009a30:	af04      	add	r7, sp, #16
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a3c:	f3ef 8305 	mrs	r3, IPSR
 8009a40:	617b      	str	r3, [r7, #20]
  return(result);
 8009a42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d17e      	bne.n	8009b46 <osThreadNew+0x11a>
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d07b      	beq.n	8009b46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009a4e:	2380      	movs	r3, #128	@ 0x80
 8009a50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009a52:	2318      	movs	r3, #24
 8009a54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009a5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d045      	beq.n	8009af2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d002      	beq.n	8009a74 <osThreadNew+0x48>
        name = attr->name;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	699b      	ldr	r3, [r3, #24]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d002      	beq.n	8009a82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d008      	beq.n	8009a9a <osThreadNew+0x6e>
 8009a88:	69fb      	ldr	r3, [r7, #28]
 8009a8a:	2b38      	cmp	r3, #56	@ 0x38
 8009a8c:	d805      	bhi.n	8009a9a <osThreadNew+0x6e>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f003 0301 	and.w	r3, r3, #1
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <osThreadNew+0x72>
        return (NULL);
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	e054      	b.n	8009b48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	695b      	ldr	r3, [r3, #20]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	089b      	lsrs	r3, r3, #2
 8009aac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00e      	beq.n	8009ad4 <osThreadNew+0xa8>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	2b5b      	cmp	r3, #91	@ 0x5b
 8009abc:	d90a      	bls.n	8009ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d006      	beq.n	8009ad4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d002      	beq.n	8009ad4 <osThreadNew+0xa8>
        mem = 1;
 8009ace:	2301      	movs	r3, #1
 8009ad0:	61bb      	str	r3, [r7, #24]
 8009ad2:	e010      	b.n	8009af6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d10c      	bne.n	8009af6 <osThreadNew+0xca>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d108      	bne.n	8009af6 <osThreadNew+0xca>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d104      	bne.n	8009af6 <osThreadNew+0xca>
          mem = 0;
 8009aec:	2300      	movs	r3, #0
 8009aee:	61bb      	str	r3, [r7, #24]
 8009af0:	e001      	b.n	8009af6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d110      	bne.n	8009b1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009b04:	9202      	str	r2, [sp, #8]
 8009b06:	9301      	str	r3, [sp, #4]
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	6a3a      	ldr	r2, [r7, #32]
 8009b10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f000 ff48 	bl	800a9a8 <xTaskCreateStatic>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	613b      	str	r3, [r7, #16]
 8009b1c:	e013      	b.n	8009b46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d110      	bne.n	8009b46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	f107 0310 	add.w	r3, r7, #16
 8009b2c:	9301      	str	r3, [sp, #4]
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009b36:	68f8      	ldr	r0, [r7, #12]
 8009b38:	f000 ff96 	bl	800aa68 <xTaskCreate>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b01      	cmp	r3, #1
 8009b40:	d001      	beq.n	8009b46 <osThreadNew+0x11a>
            hTask = NULL;
 8009b42:	2300      	movs	r3, #0
 8009b44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009b46:	693b      	ldr	r3, [r7, #16]
}
 8009b48:	4618      	mov	r0, r3
 8009b4a:	3728      	adds	r7, #40	@ 0x28
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b56:	f3ef 8305 	mrs	r3, IPSR
 8009b5a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d003      	beq.n	8009b6a <osThreadYield+0x1a>
    stat = osErrorISR;
 8009b62:	f06f 0305 	mvn.w	r3, #5
 8009b66:	607b      	str	r3, [r7, #4]
 8009b68:	e009      	b.n	8009b7e <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8009b6e:	4b07      	ldr	r3, [pc, #28]	@ (8009b8c <osThreadYield+0x3c>)
 8009b70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8009b7e:	687b      	ldr	r3, [r7, #4]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	370c      	adds	r7, #12
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr
 8009b8c:	e000ed04 	.word	0xe000ed04

08009b90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b98:	f3ef 8305 	mrs	r3, IPSR
 8009b9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <osDelay+0x1c>
    stat = osErrorISR;
 8009ba4:	f06f 0305 	mvn.w	r3, #5
 8009ba8:	60fb      	str	r3, [r7, #12]
 8009baa:	e007      	b.n	8009bbc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <osDelay+0x2c>
      vTaskDelay(ticks);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f001 f89c 	bl	800acf4 <vTaskDelay>
    }
  }

  return (stat);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b088      	sub	sp, #32
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009bd2:	f3ef 8305 	mrs	r3, IPSR
 8009bd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8009bd8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d174      	bne.n	8009cc8 <osMutexNew+0x102>
    if (attr != NULL) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d003      	beq.n	8009bec <osMutexNew+0x26>
      type = attr->attr_bits;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	61bb      	str	r3, [r7, #24]
 8009bea:	e001      	b.n	8009bf0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	f003 0301 	and.w	r3, r3, #1
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d002      	beq.n	8009c00 <osMutexNew+0x3a>
      rmtx = 1U;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	617b      	str	r3, [r7, #20]
 8009bfe:	e001      	b.n	8009c04 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009c00:	2300      	movs	r3, #0
 8009c02:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009c04:	69bb      	ldr	r3, [r7, #24]
 8009c06:	f003 0308 	and.w	r3, r3, #8
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d15c      	bne.n	8009cc8 <osMutexNew+0x102>
      mem = -1;
 8009c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009c12:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d015      	beq.n	8009c46 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d006      	beq.n	8009c30 <osMutexNew+0x6a>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	68db      	ldr	r3, [r3, #12]
 8009c26:	2b4f      	cmp	r3, #79	@ 0x4f
 8009c28:	d902      	bls.n	8009c30 <osMutexNew+0x6a>
          mem = 1;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	e00c      	b.n	8009c4a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	689b      	ldr	r3, [r3, #8]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d108      	bne.n	8009c4a <osMutexNew+0x84>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	68db      	ldr	r3, [r3, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d104      	bne.n	8009c4a <osMutexNew+0x84>
            mem = 0;
 8009c40:	2300      	movs	r3, #0
 8009c42:	613b      	str	r3, [r7, #16]
 8009c44:	e001      	b.n	8009c4a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d112      	bne.n	8009c76 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d007      	beq.n	8009c66 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	2004      	movs	r0, #4
 8009c5e:	f000 fa98 	bl	800a192 <xQueueCreateMutexStatic>
 8009c62:	61f8      	str	r0, [r7, #28]
 8009c64:	e016      	b.n	8009c94 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	2001      	movs	r0, #1
 8009c6e:	f000 fa90 	bl	800a192 <xQueueCreateMutexStatic>
 8009c72:	61f8      	str	r0, [r7, #28]
 8009c74:	e00e      	b.n	8009c94 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d10b      	bne.n	8009c94 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d004      	beq.n	8009c8c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009c82:	2004      	movs	r0, #4
 8009c84:	f000 fa6d 	bl	800a162 <xQueueCreateMutex>
 8009c88:	61f8      	str	r0, [r7, #28]
 8009c8a:	e003      	b.n	8009c94 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	f000 fa68 	bl	800a162 <xQueueCreateMutex>
 8009c92:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00c      	beq.n	8009cb4 <osMutexNew+0xee>
        if (attr != NULL) {
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d003      	beq.n	8009ca8 <osMutexNew+0xe2>
          name = attr->name;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	60fb      	str	r3, [r7, #12]
 8009ca6:	e001      	b.n	8009cac <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009cac:	68f9      	ldr	r1, [r7, #12]
 8009cae:	69f8      	ldr	r0, [r7, #28]
 8009cb0:	f000 fe1c 	bl	800a8ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d006      	beq.n	8009cc8 <osMutexNew+0x102>
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d003      	beq.n	8009cc8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	f043 0301 	orr.w	r3, r3, #1
 8009cc6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009cc8:	69fb      	ldr	r3, [r7, #28]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3720      	adds	r7, #32
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
	...

08009cd4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009cd4:	b480      	push	{r7}
 8009cd6:	b085      	sub	sp, #20
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	60f8      	str	r0, [r7, #12]
 8009cdc:	60b9      	str	r1, [r7, #8]
 8009cde:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	4a07      	ldr	r2, [pc, #28]	@ (8009d00 <vApplicationGetIdleTaskMemory+0x2c>)
 8009ce4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	4a06      	ldr	r2, [pc, #24]	@ (8009d04 <vApplicationGetIdleTaskMemory+0x30>)
 8009cea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2280      	movs	r2, #128	@ 0x80
 8009cf0:	601a      	str	r2, [r3, #0]
}
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	2000119c 	.word	0x2000119c
 8009d04:	200011f8 	.word	0x200011f8

08009d08 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4a07      	ldr	r2, [pc, #28]	@ (8009d34 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d18:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	4a06      	ldr	r2, [pc, #24]	@ (8009d38 <vApplicationGetTimerTaskMemory+0x30>)
 8009d1e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009d26:	601a      	str	r2, [r3, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr
 8009d34:	200013f8 	.word	0x200013f8
 8009d38:	20001454 	.word	0x20001454

08009d3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f103 0208 	add.w	r2, r3, #8
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f103 0208 	add.w	r2, r3, #8
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f103 0208 	add.w	r2, r3, #8
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009d70:	bf00      	nop
 8009d72:	370c      	adds	r7, #12
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2200      	movs	r2, #0
 8009d88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d96:	b480      	push	{r7}
 8009d98:	b085      	sub	sp, #20
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	68fa      	ldr	r2, [r7, #12]
 8009daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	689a      	ldr	r2, [r3, #8]
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	683a      	ldr	r2, [r7, #0]
 8009dba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	1c5a      	adds	r2, r3, #1
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	601a      	str	r2, [r3, #0]
}
 8009dd2:	bf00      	nop
 8009dd4:	3714      	adds	r7, #20
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ddc:	4770      	bx	lr

08009dde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dde:	b480      	push	{r7}
 8009de0:	b085      	sub	sp, #20
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009df4:	d103      	bne.n	8009dfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	e00c      	b.n	8009e18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3308      	adds	r3, #8
 8009e02:	60fb      	str	r3, [r7, #12]
 8009e04:	e002      	b.n	8009e0c <vListInsert+0x2e>
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	685b      	ldr	r3, [r3, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d2f6      	bcs.n	8009e06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	683a      	ldr	r2, [r7, #0]
 8009e26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	683a      	ldr	r2, [r7, #0]
 8009e32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	601a      	str	r2, [r3, #0]
}
 8009e44:	bf00      	nop
 8009e46:	3714      	adds	r7, #20
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	691b      	ldr	r3, [r3, #16]
 8009e5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	685b      	ldr	r3, [r3, #4]
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	6892      	ldr	r2, [r2, #8]
 8009e66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	689b      	ldr	r3, [r3, #8]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	6852      	ldr	r2, [r2, #4]
 8009e70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	687a      	ldr	r2, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d103      	bne.n	8009e84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	689a      	ldr	r2, [r3, #8]
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	1e5a      	subs	r2, r3, #1
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3714      	adds	r7, #20
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b084      	sub	sp, #16
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10b      	bne.n	8009ed0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ebc:	f383 8811 	msr	BASEPRI, r3
 8009ec0:	f3bf 8f6f 	isb	sy
 8009ec4:	f3bf 8f4f 	dsb	sy
 8009ec8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009eca:	bf00      	nop
 8009ecc:	bf00      	nop
 8009ece:	e7fd      	b.n	8009ecc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009ed0:	f002 f902 	bl	800c0d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009edc:	68f9      	ldr	r1, [r7, #12]
 8009ede:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009ee0:	fb01 f303 	mul.w	r3, r1, r3
 8009ee4:	441a      	add	r2, r3
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2200      	movs	r2, #0
 8009eee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f00:	3b01      	subs	r3, #1
 8009f02:	68f9      	ldr	r1, [r7, #12]
 8009f04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f06:	fb01 f303 	mul.w	r3, r1, r3
 8009f0a:	441a      	add	r2, r3
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	22ff      	movs	r2, #255	@ 0xff
 8009f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	22ff      	movs	r2, #255	@ 0xff
 8009f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d114      	bne.n	8009f50 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d01a      	beq.n	8009f64 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3310      	adds	r3, #16
 8009f32:	4618      	mov	r0, r3
 8009f34:	f001 f9a2 	bl	800b27c <xTaskRemoveFromEventList>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d012      	beq.n	8009f64 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009f74 <xQueueGenericReset+0xd0>)
 8009f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f44:	601a      	str	r2, [r3, #0]
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	e009      	b.n	8009f64 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3310      	adds	r3, #16
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7ff fef1 	bl	8009d3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	3324      	adds	r3, #36	@ 0x24
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7ff feec 	bl	8009d3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f64:	f002 f8ea 	bl	800c13c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f68:	2301      	movs	r3, #1
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	e000ed04 	.word	0xe000ed04

08009f78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b08e      	sub	sp, #56	@ 0x38
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	60f8      	str	r0, [r7, #12]
 8009f80:	60b9      	str	r1, [r7, #8]
 8009f82:	607a      	str	r2, [r7, #4]
 8009f84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d10b      	bne.n	8009fa4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f9e:	bf00      	nop
 8009fa0:	bf00      	nop
 8009fa2:	e7fd      	b.n	8009fa0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d10b      	bne.n	8009fc2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fae:	f383 8811 	msr	BASEPRI, r3
 8009fb2:	f3bf 8f6f 	isb	sy
 8009fb6:	f3bf 8f4f 	dsb	sy
 8009fba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009fbc:	bf00      	nop
 8009fbe:	bf00      	nop
 8009fc0:	e7fd      	b.n	8009fbe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d002      	beq.n	8009fce <xQueueGenericCreateStatic+0x56>
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d001      	beq.n	8009fd2 <xQueueGenericCreateStatic+0x5a>
 8009fce:	2301      	movs	r3, #1
 8009fd0:	e000      	b.n	8009fd4 <xQueueGenericCreateStatic+0x5c>
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d10b      	bne.n	8009ff0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	623b      	str	r3, [r7, #32]
}
 8009fea:	bf00      	nop
 8009fec:	bf00      	nop
 8009fee:	e7fd      	b.n	8009fec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d102      	bne.n	8009ffc <xQueueGenericCreateStatic+0x84>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d101      	bne.n	800a000 <xQueueGenericCreateStatic+0x88>
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <xQueueGenericCreateStatic+0x8a>
 800a000:	2300      	movs	r3, #0
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10b      	bne.n	800a01e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a00a:	f383 8811 	msr	BASEPRI, r3
 800a00e:	f3bf 8f6f 	isb	sy
 800a012:	f3bf 8f4f 	dsb	sy
 800a016:	61fb      	str	r3, [r7, #28]
}
 800a018:	bf00      	nop
 800a01a:	bf00      	nop
 800a01c:	e7fd      	b.n	800a01a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a01e:	2350      	movs	r3, #80	@ 0x50
 800a020:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2b50      	cmp	r3, #80	@ 0x50
 800a026:	d00b      	beq.n	800a040 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	61bb      	str	r3, [r7, #24]
}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	e7fd      	b.n	800a03c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a040:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00d      	beq.n	800a068 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a04c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a054:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a05a:	9300      	str	r3, [sp, #0]
 800a05c:	4613      	mov	r3, r2
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	68f8      	ldr	r0, [r7, #12]
 800a064:	f000 f840 	bl	800a0e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3730      	adds	r7, #48	@ 0x30
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a072:	b580      	push	{r7, lr}
 800a074:	b08a      	sub	sp, #40	@ 0x28
 800a076:	af02      	add	r7, sp, #8
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	4613      	mov	r3, r2
 800a07e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10b      	bne.n	800a09e <xQueueGenericCreate+0x2c>
	__asm volatile
 800a086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a08a:	f383 8811 	msr	BASEPRI, r3
 800a08e:	f3bf 8f6f 	isb	sy
 800a092:	f3bf 8f4f 	dsb	sy
 800a096:	613b      	str	r3, [r7, #16]
}
 800a098:	bf00      	nop
 800a09a:	bf00      	nop
 800a09c:	e7fd      	b.n	800a09a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	68ba      	ldr	r2, [r7, #8]
 800a0a2:	fb02 f303 	mul.w	r3, r2, r3
 800a0a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	3350      	adds	r3, #80	@ 0x50
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f002 f935 	bl	800c31c <pvPortMalloc>
 800a0b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d011      	beq.n	800a0de <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	3350      	adds	r3, #80	@ 0x50
 800a0c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0cc:	79fa      	ldrb	r2, [r7, #7]
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	697a      	ldr	r2, [r7, #20]
 800a0d6:	68b9      	ldr	r1, [r7, #8]
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f805 	bl	800a0e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0de:	69bb      	ldr	r3, [r7, #24]
	}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3720      	adds	r7, #32
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b084      	sub	sp, #16
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	60f8      	str	r0, [r7, #12]
 800a0f0:	60b9      	str	r1, [r7, #8]
 800a0f2:	607a      	str	r2, [r7, #4]
 800a0f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d103      	bne.n	800a104 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	69ba      	ldr	r2, [r7, #24]
 800a100:	601a      	str	r2, [r3, #0]
 800a102:	e002      	b.n	800a10a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a104:	69bb      	ldr	r3, [r7, #24]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	68ba      	ldr	r2, [r7, #8]
 800a114:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a116:	2101      	movs	r1, #1
 800a118:	69b8      	ldr	r0, [r7, #24]
 800a11a:	f7ff fec3 	bl	8009ea4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a11e:	69bb      	ldr	r3, [r7, #24]
 800a120:	78fa      	ldrb	r2, [r7, #3]
 800a122:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a126:	bf00      	nop
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a12e:	b580      	push	{r7, lr}
 800a130:	b082      	sub	sp, #8
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d00e      	beq.n	800a15a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2200      	movs	r2, #0
 800a140:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2200      	movs	r2, #0
 800a14c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a14e:	2300      	movs	r3, #0
 800a150:	2200      	movs	r2, #0
 800a152:	2100      	movs	r1, #0
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 f837 	bl	800a1c8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a15a:	bf00      	nop
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a162:	b580      	push	{r7, lr}
 800a164:	b086      	sub	sp, #24
 800a166:	af00      	add	r7, sp, #0
 800a168:	4603      	mov	r3, r0
 800a16a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a16c:	2301      	movs	r3, #1
 800a16e:	617b      	str	r3, [r7, #20]
 800a170:	2300      	movs	r3, #0
 800a172:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a174:	79fb      	ldrb	r3, [r7, #7]
 800a176:	461a      	mov	r2, r3
 800a178:	6939      	ldr	r1, [r7, #16]
 800a17a:	6978      	ldr	r0, [r7, #20]
 800a17c:	f7ff ff79 	bl	800a072 <xQueueGenericCreate>
 800a180:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f7ff ffd3 	bl	800a12e <prvInitialiseMutex>

		return xNewQueue;
 800a188:	68fb      	ldr	r3, [r7, #12]
	}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3718      	adds	r7, #24
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}

0800a192 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a192:	b580      	push	{r7, lr}
 800a194:	b088      	sub	sp, #32
 800a196:	af02      	add	r7, sp, #8
 800a198:	4603      	mov	r3, r0
 800a19a:	6039      	str	r1, [r7, #0]
 800a19c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	617b      	str	r3, [r7, #20]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	9300      	str	r3, [sp, #0]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	6939      	ldr	r1, [r7, #16]
 800a1b0:	6978      	ldr	r0, [r7, #20]
 800a1b2:	f7ff fee1 	bl	8009f78 <xQueueGenericCreateStatic>
 800a1b6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1b8:	68f8      	ldr	r0, [r7, #12]
 800a1ba:	f7ff ffb8 	bl	800a12e <prvInitialiseMutex>

		return xNewQueue;
 800a1be:	68fb      	ldr	r3, [r7, #12]
	}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3718      	adds	r7, #24
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	bd80      	pop	{r7, pc}

0800a1c8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08e      	sub	sp, #56	@ 0x38
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
 800a1d4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d10b      	bne.n	800a1fc <xQueueGenericSend+0x34>
	__asm volatile
 800a1e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e8:	f383 8811 	msr	BASEPRI, r3
 800a1ec:	f3bf 8f6f 	isb	sy
 800a1f0:	f3bf 8f4f 	dsb	sy
 800a1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a1f6:	bf00      	nop
 800a1f8:	bf00      	nop
 800a1fa:	e7fd      	b.n	800a1f8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d103      	bne.n	800a20a <xQueueGenericSend+0x42>
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a206:	2b00      	cmp	r3, #0
 800a208:	d101      	bne.n	800a20e <xQueueGenericSend+0x46>
 800a20a:	2301      	movs	r3, #1
 800a20c:	e000      	b.n	800a210 <xQueueGenericSend+0x48>
 800a20e:	2300      	movs	r3, #0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <xQueueGenericSend+0x64>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a226:	bf00      	nop
 800a228:	bf00      	nop
 800a22a:	e7fd      	b.n	800a228 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	d103      	bne.n	800a23a <xQueueGenericSend+0x72>
 800a232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a234:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a236:	2b01      	cmp	r3, #1
 800a238:	d101      	bne.n	800a23e <xQueueGenericSend+0x76>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e000      	b.n	800a240 <xQueueGenericSend+0x78>
 800a23e:	2300      	movs	r3, #0
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10b      	bne.n	800a25c <xQueueGenericSend+0x94>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	623b      	str	r3, [r7, #32]
}
 800a256:	bf00      	nop
 800a258:	bf00      	nop
 800a25a:	e7fd      	b.n	800a258 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a25c:	f001 f9ce 	bl	800b5fc <xTaskGetSchedulerState>
 800a260:	4603      	mov	r3, r0
 800a262:	2b00      	cmp	r3, #0
 800a264:	d102      	bne.n	800a26c <xQueueGenericSend+0xa4>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d101      	bne.n	800a270 <xQueueGenericSend+0xa8>
 800a26c:	2301      	movs	r3, #1
 800a26e:	e000      	b.n	800a272 <xQueueGenericSend+0xaa>
 800a270:	2300      	movs	r3, #0
 800a272:	2b00      	cmp	r3, #0
 800a274:	d10b      	bne.n	800a28e <xQueueGenericSend+0xc6>
	__asm volatile
 800a276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a27a:	f383 8811 	msr	BASEPRI, r3
 800a27e:	f3bf 8f6f 	isb	sy
 800a282:	f3bf 8f4f 	dsb	sy
 800a286:	61fb      	str	r3, [r7, #28]
}
 800a288:	bf00      	nop
 800a28a:	bf00      	nop
 800a28c:	e7fd      	b.n	800a28a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a28e:	f001 ff23 	bl	800c0d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a29a:	429a      	cmp	r2, r3
 800a29c:	d302      	bcc.n	800a2a4 <xQueueGenericSend+0xdc>
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d129      	bne.n	800a2f8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a2a4:	683a      	ldr	r2, [r7, #0]
 800a2a6:	68b9      	ldr	r1, [r7, #8]
 800a2a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2aa:	f000 fa0f 	bl	800a6cc <prvCopyDataToQueue>
 800a2ae:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d010      	beq.n	800a2da <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ba:	3324      	adds	r3, #36	@ 0x24
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 ffdd 	bl	800b27c <xTaskRemoveFromEventList>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d013      	beq.n	800a2f0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a2c8:	4b3f      	ldr	r3, [pc, #252]	@ (800a3c8 <xQueueGenericSend+0x200>)
 800a2ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	e00a      	b.n	800a2f0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a2da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d007      	beq.n	800a2f0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a2e0:	4b39      	ldr	r3, [pc, #228]	@ (800a3c8 <xQueueGenericSend+0x200>)
 800a2e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2e6:	601a      	str	r2, [r3, #0]
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a2f0:	f001 ff24 	bl	800c13c <vPortExitCritical>
				return pdPASS;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e063      	b.n	800a3c0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d103      	bne.n	800a306 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a2fe:	f001 ff1d 	bl	800c13c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a302:	2300      	movs	r3, #0
 800a304:	e05c      	b.n	800a3c0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d106      	bne.n	800a31a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a30c:	f107 0314 	add.w	r3, r7, #20
 800a310:	4618      	mov	r0, r3
 800a312:	f001 f817 	bl	800b344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a316:	2301      	movs	r3, #1
 800a318:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a31a:	f001 ff0f 	bl	800c13c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a31e:	f000 fd87 	bl	800ae30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a322:	f001 fed9 	bl	800c0d8 <vPortEnterCritical>
 800a326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a32c:	b25b      	sxtb	r3, r3
 800a32e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a332:	d103      	bne.n	800a33c <xQueueGenericSend+0x174>
 800a334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a336:	2200      	movs	r2, #0
 800a338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a342:	b25b      	sxtb	r3, r3
 800a344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a348:	d103      	bne.n	800a352 <xQueueGenericSend+0x18a>
 800a34a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a352:	f001 fef3 	bl	800c13c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a356:	1d3a      	adds	r2, r7, #4
 800a358:	f107 0314 	add.w	r3, r7, #20
 800a35c:	4611      	mov	r1, r2
 800a35e:	4618      	mov	r0, r3
 800a360:	f001 f806 	bl	800b370 <xTaskCheckForTimeOut>
 800a364:	4603      	mov	r3, r0
 800a366:	2b00      	cmp	r3, #0
 800a368:	d124      	bne.n	800a3b4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a36a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a36c:	f000 faa6 	bl	800a8bc <prvIsQueueFull>
 800a370:	4603      	mov	r3, r0
 800a372:	2b00      	cmp	r3, #0
 800a374:	d018      	beq.n	800a3a8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a378:	3310      	adds	r3, #16
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	4611      	mov	r1, r2
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 ff2a 	bl	800b1d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a386:	f000 fa31 	bl	800a7ec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a38a:	f000 fd5f 	bl	800ae4c <xTaskResumeAll>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	f47f af7c 	bne.w	800a28e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a396:	4b0c      	ldr	r3, [pc, #48]	@ (800a3c8 <xQueueGenericSend+0x200>)
 800a398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	f3bf 8f4f 	dsb	sy
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	e772      	b.n	800a28e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a3a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3aa:	f000 fa1f 	bl	800a7ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3ae:	f000 fd4d 	bl	800ae4c <xTaskResumeAll>
 800a3b2:	e76c      	b.n	800a28e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a3b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3b6:	f000 fa19 	bl	800a7ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3ba:	f000 fd47 	bl	800ae4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a3be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3738      	adds	r7, #56	@ 0x38
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}
 800a3c8:	e000ed04 	.word	0xe000ed04

0800a3cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b090      	sub	sp, #64	@ 0x40
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	60f8      	str	r0, [r7, #12]
 800a3d4:	60b9      	str	r1, [r7, #8]
 800a3d6:	607a      	str	r2, [r7, #4]
 800a3d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d10b      	bne.n	800a3fc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a3e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3e8:	f383 8811 	msr	BASEPRI, r3
 800a3ec:	f3bf 8f6f 	isb	sy
 800a3f0:	f3bf 8f4f 	dsb	sy
 800a3f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a3f6:	bf00      	nop
 800a3f8:	bf00      	nop
 800a3fa:	e7fd      	b.n	800a3f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d103      	bne.n	800a40a <xQueueGenericSendFromISR+0x3e>
 800a402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a406:	2b00      	cmp	r3, #0
 800a408:	d101      	bne.n	800a40e <xQueueGenericSendFromISR+0x42>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <xQueueGenericSendFromISR+0x44>
 800a40e:	2300      	movs	r3, #0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10b      	bne.n	800a42c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a418:	f383 8811 	msr	BASEPRI, r3
 800a41c:	f3bf 8f6f 	isb	sy
 800a420:	f3bf 8f4f 	dsb	sy
 800a424:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a426:	bf00      	nop
 800a428:	bf00      	nop
 800a42a:	e7fd      	b.n	800a428 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d103      	bne.n	800a43a <xQueueGenericSendFromISR+0x6e>
 800a432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a436:	2b01      	cmp	r3, #1
 800a438:	d101      	bne.n	800a43e <xQueueGenericSendFromISR+0x72>
 800a43a:	2301      	movs	r3, #1
 800a43c:	e000      	b.n	800a440 <xQueueGenericSendFromISR+0x74>
 800a43e:	2300      	movs	r3, #0
 800a440:	2b00      	cmp	r3, #0
 800a442:	d10b      	bne.n	800a45c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	623b      	str	r3, [r7, #32]
}
 800a456:	bf00      	nop
 800a458:	bf00      	nop
 800a45a:	e7fd      	b.n	800a458 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a45c:	f001 ff1c 	bl	800c298 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a460:	f3ef 8211 	mrs	r2, BASEPRI
 800a464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	61fa      	str	r2, [r7, #28]
 800a476:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a478:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a47a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a484:	429a      	cmp	r2, r3
 800a486:	d302      	bcc.n	800a48e <xQueueGenericSendFromISR+0xc2>
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d12f      	bne.n	800a4ee <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a490:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a494:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a49a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a49c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a49e:	683a      	ldr	r2, [r7, #0]
 800a4a0:	68b9      	ldr	r1, [r7, #8]
 800a4a2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a4a4:	f000 f912 	bl	800a6cc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a4a8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a4ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4b0:	d112      	bne.n	800a4d8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d016      	beq.n	800a4e8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4bc:	3324      	adds	r3, #36	@ 0x24
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f000 fedc 	bl	800b27c <xTaskRemoveFromEventList>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d00e      	beq.n	800a4e8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d00b      	beq.n	800a4e8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	601a      	str	r2, [r3, #0]
 800a4d6:	e007      	b.n	800a4e8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a4d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a4dc:	3301      	adds	r3, #1
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	b25a      	sxtb	r2, r3
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a4ec:	e001      	b.n	800a4f2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a4f6:	697b      	ldr	r3, [r7, #20]
 800a4f8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a4fc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a4fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a500:	4618      	mov	r0, r3
 800a502:	3740      	adds	r7, #64	@ 0x40
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08c      	sub	sp, #48	@ 0x30
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a514:	2300      	movs	r3, #0
 800a516:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d10b      	bne.n	800a53a <xQueueReceive+0x32>
	__asm volatile
 800a522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a526:	f383 8811 	msr	BASEPRI, r3
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	f3bf 8f4f 	dsb	sy
 800a532:	623b      	str	r3, [r7, #32]
}
 800a534:	bf00      	nop
 800a536:	bf00      	nop
 800a538:	e7fd      	b.n	800a536 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d103      	bne.n	800a548 <xQueueReceive+0x40>
 800a540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a544:	2b00      	cmp	r3, #0
 800a546:	d101      	bne.n	800a54c <xQueueReceive+0x44>
 800a548:	2301      	movs	r3, #1
 800a54a:	e000      	b.n	800a54e <xQueueReceive+0x46>
 800a54c:	2300      	movs	r3, #0
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10b      	bne.n	800a56a <xQueueReceive+0x62>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	61fb      	str	r3, [r7, #28]
}
 800a564:	bf00      	nop
 800a566:	bf00      	nop
 800a568:	e7fd      	b.n	800a566 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a56a:	f001 f847 	bl	800b5fc <xTaskGetSchedulerState>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b00      	cmp	r3, #0
 800a572:	d102      	bne.n	800a57a <xQueueReceive+0x72>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d101      	bne.n	800a57e <xQueueReceive+0x76>
 800a57a:	2301      	movs	r3, #1
 800a57c:	e000      	b.n	800a580 <xQueueReceive+0x78>
 800a57e:	2300      	movs	r3, #0
 800a580:	2b00      	cmp	r3, #0
 800a582:	d10b      	bne.n	800a59c <xQueueReceive+0x94>
	__asm volatile
 800a584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a588:	f383 8811 	msr	BASEPRI, r3
 800a58c:	f3bf 8f6f 	isb	sy
 800a590:	f3bf 8f4f 	dsb	sy
 800a594:	61bb      	str	r3, [r7, #24]
}
 800a596:	bf00      	nop
 800a598:	bf00      	nop
 800a59a:	e7fd      	b.n	800a598 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a59c:	f001 fd9c 	bl	800c0d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5a4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d01f      	beq.n	800a5ec <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5ac:	68b9      	ldr	r1, [r7, #8]
 800a5ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a5b0:	f000 f8f6 	bl	800a7a0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b6:	1e5a      	subs	r2, r3, #1
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00f      	beq.n	800a5e4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5c6:	3310      	adds	r3, #16
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f000 fe57 	bl	800b27c <xTaskRemoveFromEventList>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d007      	beq.n	800a5e4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a5d4:	4b3c      	ldr	r3, [pc, #240]	@ (800a6c8 <xQueueReceive+0x1c0>)
 800a5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	f3bf 8f4f 	dsb	sy
 800a5e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a5e4:	f001 fdaa 	bl	800c13c <vPortExitCritical>
				return pdPASS;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	e069      	b.n	800a6c0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d103      	bne.n	800a5fa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a5f2:	f001 fda3 	bl	800c13c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	e062      	b.n	800a6c0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d106      	bne.n	800a60e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a600:	f107 0310 	add.w	r3, r7, #16
 800a604:	4618      	mov	r0, r3
 800a606:	f000 fe9d 	bl	800b344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a60a:	2301      	movs	r3, #1
 800a60c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a60e:	f001 fd95 	bl	800c13c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a612:	f000 fc0d 	bl	800ae30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a616:	f001 fd5f 	bl	800c0d8 <vPortEnterCritical>
 800a61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a620:	b25b      	sxtb	r3, r3
 800a622:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a626:	d103      	bne.n	800a630 <xQueueReceive+0x128>
 800a628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a632:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a636:	b25b      	sxtb	r3, r3
 800a638:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a63c:	d103      	bne.n	800a646 <xQueueReceive+0x13e>
 800a63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a640:	2200      	movs	r2, #0
 800a642:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a646:	f001 fd79 	bl	800c13c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a64a:	1d3a      	adds	r2, r7, #4
 800a64c:	f107 0310 	add.w	r3, r7, #16
 800a650:	4611      	mov	r1, r2
 800a652:	4618      	mov	r0, r3
 800a654:	f000 fe8c 	bl	800b370 <xTaskCheckForTimeOut>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d123      	bne.n	800a6a6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a65e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a660:	f000 f916 	bl	800a890 <prvIsQueueEmpty>
 800a664:	4603      	mov	r3, r0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d017      	beq.n	800a69a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a66a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a66c:	3324      	adds	r3, #36	@ 0x24
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	4611      	mov	r1, r2
 800a672:	4618      	mov	r0, r3
 800a674:	f000 fdb0 	bl	800b1d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a678:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a67a:	f000 f8b7 	bl	800a7ec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a67e:	f000 fbe5 	bl	800ae4c <xTaskResumeAll>
 800a682:	4603      	mov	r3, r0
 800a684:	2b00      	cmp	r3, #0
 800a686:	d189      	bne.n	800a59c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a688:	4b0f      	ldr	r3, [pc, #60]	@ (800a6c8 <xQueueReceive+0x1c0>)
 800a68a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a68e:	601a      	str	r2, [r3, #0]
 800a690:	f3bf 8f4f 	dsb	sy
 800a694:	f3bf 8f6f 	isb	sy
 800a698:	e780      	b.n	800a59c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a69a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a69c:	f000 f8a6 	bl	800a7ec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a6a0:	f000 fbd4 	bl	800ae4c <xTaskResumeAll>
 800a6a4:	e77a      	b.n	800a59c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a6a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6a8:	f000 f8a0 	bl	800a7ec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a6ac:	f000 fbce 	bl	800ae4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6b2:	f000 f8ed 	bl	800a890 <prvIsQueueEmpty>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f43f af6f 	beq.w	800a59c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a6be:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	3730      	adds	r7, #48	@ 0x30
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}
 800a6c8:	e000ed04 	.word	0xe000ed04

0800a6cc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b086      	sub	sp, #24
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6e0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10d      	bne.n	800a706 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d14d      	bne.n	800a78e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	689b      	ldr	r3, [r3, #8]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f000 ff9e 	bl	800b638 <xTaskPriorityDisinherit>
 800a6fc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2200      	movs	r2, #0
 800a702:	609a      	str	r2, [r3, #8]
 800a704:	e043      	b.n	800a78e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d119      	bne.n	800a740 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	6858      	ldr	r0, [r3, #4]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a714:	461a      	mov	r2, r3
 800a716:	68b9      	ldr	r1, [r7, #8]
 800a718:	f002 f913 	bl	800c942 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	685a      	ldr	r2, [r3, #4]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a724:	441a      	add	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	685a      	ldr	r2, [r3, #4]
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	429a      	cmp	r2, r3
 800a734:	d32b      	bcc.n	800a78e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	605a      	str	r2, [r3, #4]
 800a73e:	e026      	b.n	800a78e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	68d8      	ldr	r0, [r3, #12]
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a748:	461a      	mov	r2, r3
 800a74a:	68b9      	ldr	r1, [r7, #8]
 800a74c:	f002 f8f9 	bl	800c942 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	68da      	ldr	r2, [r3, #12]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a758:	425b      	negs	r3, r3
 800a75a:	441a      	add	r2, r3
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	68da      	ldr	r2, [r3, #12]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d207      	bcs.n	800a77c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	689a      	ldr	r2, [r3, #8]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a774:	425b      	negs	r3, r3
 800a776:	441a      	add	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d105      	bne.n	800a78e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d002      	beq.n	800a78e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a796:	697b      	ldr	r3, [r7, #20]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3718      	adds	r7, #24
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b082      	sub	sp, #8
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d018      	beq.n	800a7e4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	68da      	ldr	r2, [r3, #12]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7ba:	441a      	add	r2, r3
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	68da      	ldr	r2, [r3, #12]
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d303      	bcc.n	800a7d4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	68d9      	ldr	r1, [r3, #12]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a7dc:	461a      	mov	r2, r3
 800a7de:	6838      	ldr	r0, [r7, #0]
 800a7e0:	f002 f8af 	bl	800c942 <memcpy>
	}
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7f4:	f001 fc70 	bl	800c0d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7fe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a800:	e011      	b.n	800a826 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a806:	2b00      	cmp	r3, #0
 800a808:	d012      	beq.n	800a830 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	3324      	adds	r3, #36	@ 0x24
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 fd34 	bl	800b27c <xTaskRemoveFromEventList>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d001      	beq.n	800a81e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a81a:	f000 fe0d 	bl	800b438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	3b01      	subs	r3, #1
 800a822:	b2db      	uxtb	r3, r3
 800a824:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	dce9      	bgt.n	800a802 <prvUnlockQueue+0x16>
 800a82e:	e000      	b.n	800a832 <prvUnlockQueue+0x46>
					break;
 800a830:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	22ff      	movs	r2, #255	@ 0xff
 800a836:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a83a:	f001 fc7f 	bl	800c13c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a83e:	f001 fc4b 	bl	800c0d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a848:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a84a:	e011      	b.n	800a870 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d012      	beq.n	800a87a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	3310      	adds	r3, #16
 800a858:	4618      	mov	r0, r3
 800a85a:	f000 fd0f 	bl	800b27c <xTaskRemoveFromEventList>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d001      	beq.n	800a868 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a864:	f000 fde8 	bl	800b438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a868:	7bbb      	ldrb	r3, [r7, #14]
 800a86a:	3b01      	subs	r3, #1
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a870:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a874:	2b00      	cmp	r3, #0
 800a876:	dce9      	bgt.n	800a84c <prvUnlockQueue+0x60>
 800a878:	e000      	b.n	800a87c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a87a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	22ff      	movs	r2, #255	@ 0xff
 800a880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a884:	f001 fc5a 	bl	800c13c <vPortExitCritical>
}
 800a888:	bf00      	nop
 800a88a:	3710      	adds	r7, #16
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a898:	f001 fc1e 	bl	800c0d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d102      	bne.n	800a8aa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	e001      	b.n	800a8ae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8ae:	f001 fc45 	bl	800c13c <vPortExitCritical>

	return xReturn;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3710      	adds	r7, #16
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	bd80      	pop	{r7, pc}

0800a8bc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8c4:	f001 fc08 	bl	800c0d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d102      	bne.n	800a8da <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	60fb      	str	r3, [r7, #12]
 800a8d8:	e001      	b.n	800a8de <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8de:	f001 fc2d 	bl	800c13c <vPortExitCritical>

	return xReturn;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3710      	adds	r7, #16
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b085      	sub	sp, #20
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	60fb      	str	r3, [r7, #12]
 800a8fa:	e014      	b.n	800a926 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8fc:	4a0f      	ldr	r2, [pc, #60]	@ (800a93c <vQueueAddToRegistry+0x50>)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10b      	bne.n	800a920 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a908:	490c      	ldr	r1, [pc, #48]	@ (800a93c <vQueueAddToRegistry+0x50>)
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	683a      	ldr	r2, [r7, #0]
 800a90e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a912:	4a0a      	ldr	r2, [pc, #40]	@ (800a93c <vQueueAddToRegistry+0x50>)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	00db      	lsls	r3, r3, #3
 800a918:	4413      	add	r3, r2
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a91e:	e006      	b.n	800a92e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	3301      	adds	r3, #1
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2b07      	cmp	r3, #7
 800a92a:	d9e7      	bls.n	800a8fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a92c:	bf00      	nop
 800a92e:	bf00      	nop
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	20001854 	.word	0x20001854

0800a940 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	60f8      	str	r0, [r7, #12]
 800a948:	60b9      	str	r1, [r7, #8]
 800a94a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a950:	f001 fbc2 	bl	800c0d8 <vPortEnterCritical>
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a95a:	b25b      	sxtb	r3, r3
 800a95c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a960:	d103      	bne.n	800a96a <vQueueWaitForMessageRestricted+0x2a>
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	2200      	movs	r2, #0
 800a966:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a970:	b25b      	sxtb	r3, r3
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a976:	d103      	bne.n	800a980 <vQueueWaitForMessageRestricted+0x40>
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a980:	f001 fbdc 	bl	800c13c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d106      	bne.n	800a99a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	3324      	adds	r3, #36	@ 0x24
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	68b9      	ldr	r1, [r7, #8]
 800a994:	4618      	mov	r0, r3
 800a996:	f000 fc45 	bl	800b224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a99a:	6978      	ldr	r0, [r7, #20]
 800a99c:	f7ff ff26 	bl	800a7ec <prvUnlockQueue>
	}
 800a9a0:	bf00      	nop
 800a9a2:	3718      	adds	r7, #24
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	bd80      	pop	{r7, pc}

0800a9a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b08e      	sub	sp, #56	@ 0x38
 800a9ac:	af04      	add	r7, sp, #16
 800a9ae:	60f8      	str	r0, [r7, #12]
 800a9b0:	60b9      	str	r1, [r7, #8]
 800a9b2:	607a      	str	r2, [r7, #4]
 800a9b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10b      	bne.n	800a9d4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	623b      	str	r3, [r7, #32]
}
 800a9ce:	bf00      	nop
 800a9d0:	bf00      	nop
 800a9d2:	e7fd      	b.n	800a9d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10b      	bne.n	800a9f2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	61fb      	str	r3, [r7, #28]
}
 800a9ec:	bf00      	nop
 800a9ee:	bf00      	nop
 800a9f0:	e7fd      	b.n	800a9ee <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a9f2:	235c      	movs	r3, #92	@ 0x5c
 800a9f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a9f6:	693b      	ldr	r3, [r7, #16]
 800a9f8:	2b5c      	cmp	r3, #92	@ 0x5c
 800a9fa:	d00b      	beq.n	800aa14 <xTaskCreateStatic+0x6c>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	61bb      	str	r3, [r7, #24]
}
 800aa0e:	bf00      	nop
 800aa10:	bf00      	nop
 800aa12:	e7fd      	b.n	800aa10 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa14:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d01e      	beq.n	800aa5a <xTaskCreateStatic+0xb2>
 800aa1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d01b      	beq.n	800aa5a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa24:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aa2a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2e:	2202      	movs	r2, #2
 800aa30:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa34:	2300      	movs	r3, #0
 800aa36:	9303      	str	r3, [sp, #12]
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	9302      	str	r3, [sp, #8]
 800aa3c:	f107 0314 	add.w	r3, r7, #20
 800aa40:	9301      	str	r3, [sp, #4]
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	687a      	ldr	r2, [r7, #4]
 800aa4a:	68b9      	ldr	r1, [r7, #8]
 800aa4c:	68f8      	ldr	r0, [r7, #12]
 800aa4e:	f000 f850 	bl	800aaf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aa54:	f000 f8de 	bl	800ac14 <prvAddNewTaskToReadyList>
 800aa58:	e001      	b.n	800aa5e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa5e:	697b      	ldr	r3, [r7, #20]
	}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3728      	adds	r7, #40	@ 0x28
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b08c      	sub	sp, #48	@ 0x30
 800aa6c:	af04      	add	r7, sp, #16
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	4613      	mov	r3, r2
 800aa76:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa78:	88fb      	ldrh	r3, [r7, #6]
 800aa7a:	009b      	lsls	r3, r3, #2
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	f001 fc4d 	bl	800c31c <pvPortMalloc>
 800aa82:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d00e      	beq.n	800aaa8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa8a:	205c      	movs	r0, #92	@ 0x5c
 800aa8c:	f001 fc46 	bl	800c31c <pvPortMalloc>
 800aa90:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa92:	69fb      	ldr	r3, [r7, #28]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d003      	beq.n	800aaa0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa98:	69fb      	ldr	r3, [r7, #28]
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa9e:	e005      	b.n	800aaac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aaa0:	6978      	ldr	r0, [r7, #20]
 800aaa2:	f001 fd09 	bl	800c4b8 <vPortFree>
 800aaa6:	e001      	b.n	800aaac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d017      	beq.n	800aae2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aaba:	88fa      	ldrh	r2, [r7, #6]
 800aabc:	2300      	movs	r3, #0
 800aabe:	9303      	str	r3, [sp, #12]
 800aac0:	69fb      	ldr	r3, [r7, #28]
 800aac2:	9302      	str	r3, [sp, #8]
 800aac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aac6:	9301      	str	r3, [sp, #4]
 800aac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	68b9      	ldr	r1, [r7, #8]
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 f80e 	bl	800aaf2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aad6:	69f8      	ldr	r0, [r7, #28]
 800aad8:	f000 f89c 	bl	800ac14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aadc:	2301      	movs	r3, #1
 800aade:	61bb      	str	r3, [r7, #24]
 800aae0:	e002      	b.n	800aae8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aae6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aae8:	69bb      	ldr	r3, [r7, #24]
	}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3720      	adds	r7, #32
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}

0800aaf2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aaf2:	b580      	push	{r7, lr}
 800aaf4:	b088      	sub	sp, #32
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	60f8      	str	r0, [r7, #12]
 800aafa:	60b9      	str	r1, [r7, #8]
 800aafc:	607a      	str	r2, [r7, #4]
 800aafe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab02:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	461a      	mov	r2, r3
 800ab0a:	21a5      	movs	r1, #165	@ 0xa5
 800ab0c:	f001 fee4 	bl	800c8d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ab1a:	3b01      	subs	r3, #1
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	f023 0307 	bic.w	r3, r3, #7
 800ab28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	f003 0307 	and.w	r3, r3, #7
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d00b      	beq.n	800ab4c <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	617b      	str	r3, [r7, #20]
}
 800ab46:	bf00      	nop
 800ab48:	bf00      	nop
 800ab4a:	e7fd      	b.n	800ab48 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d01f      	beq.n	800ab92 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab52:	2300      	movs	r3, #0
 800ab54:	61fb      	str	r3, [r7, #28]
 800ab56:	e012      	b.n	800ab7e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab58:	68ba      	ldr	r2, [r7, #8]
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	4413      	add	r3, r2
 800ab5e:	7819      	ldrb	r1, [r3, #0]
 800ab60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	4413      	add	r3, r2
 800ab66:	3334      	adds	r3, #52	@ 0x34
 800ab68:	460a      	mov	r2, r1
 800ab6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	69fb      	ldr	r3, [r7, #28]
 800ab70:	4413      	add	r3, r2
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d006      	beq.n	800ab86 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab78:	69fb      	ldr	r3, [r7, #28]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	61fb      	str	r3, [r7, #28]
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	2b0f      	cmp	r3, #15
 800ab82:	d9e9      	bls.n	800ab58 <prvInitialiseNewTask+0x66>
 800ab84:	e000      	b.n	800ab88 <prvInitialiseNewTask+0x96>
			{
				break;
 800ab86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab90:	e003      	b.n	800ab9a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab9c:	2b37      	cmp	r3, #55	@ 0x37
 800ab9e:	d901      	bls.n	800aba4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aba0:	2337      	movs	r3, #55	@ 0x37
 800aba2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aba8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abae:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800abb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb2:	2200      	movs	r2, #0
 800abb4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb8:	3304      	adds	r3, #4
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff f8de 	bl	8009d7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abc2:	3318      	adds	r3, #24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff f8d9 	bl	8009d7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800abd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800abd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abde:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800abe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe2:	2200      	movs	r2, #0
 800abe4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800abe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800abee:	683a      	ldr	r2, [r7, #0]
 800abf0:	68f9      	ldr	r1, [r7, #12]
 800abf2:	69b8      	ldr	r0, [r7, #24]
 800abf4:	f001 f93e 	bl	800be74 <pxPortInitialiseStack>
 800abf8:	4602      	mov	r2, r0
 800abfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abfc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ac08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac0a:	bf00      	nop
 800ac0c:	3720      	adds	r7, #32
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}
	...

0800ac14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac1c:	f001 fa5c 	bl	800c0d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac20:	4b2d      	ldr	r3, [pc, #180]	@ (800acd8 <prvAddNewTaskToReadyList+0xc4>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	3301      	adds	r3, #1
 800ac26:	4a2c      	ldr	r2, [pc, #176]	@ (800acd8 <prvAddNewTaskToReadyList+0xc4>)
 800ac28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac2a:	4b2c      	ldr	r3, [pc, #176]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d109      	bne.n	800ac46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac32:	4a2a      	ldr	r2, [pc, #168]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac38:	4b27      	ldr	r3, [pc, #156]	@ (800acd8 <prvAddNewTaskToReadyList+0xc4>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	d110      	bne.n	800ac62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ac40:	f000 fc1e 	bl	800b480 <prvInitialiseTaskLists>
 800ac44:	e00d      	b.n	800ac62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac46:	4b26      	ldr	r3, [pc, #152]	@ (800ace0 <prvAddNewTaskToReadyList+0xcc>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d109      	bne.n	800ac62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac4e:	4b23      	ldr	r3, [pc, #140]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac58:	429a      	cmp	r2, r3
 800ac5a:	d802      	bhi.n	800ac62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac5c:	4a1f      	ldr	r2, [pc, #124]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac62:	4b20      	ldr	r3, [pc, #128]	@ (800ace4 <prvAddNewTaskToReadyList+0xd0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	3301      	adds	r3, #1
 800ac68:	4a1e      	ldr	r2, [pc, #120]	@ (800ace4 <prvAddNewTaskToReadyList+0xd0>)
 800ac6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac6c:	4b1d      	ldr	r3, [pc, #116]	@ (800ace4 <prvAddNewTaskToReadyList+0xd0>)
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac78:	4b1b      	ldr	r3, [pc, #108]	@ (800ace8 <prvAddNewTaskToReadyList+0xd4>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	429a      	cmp	r2, r3
 800ac7e:	d903      	bls.n	800ac88 <prvAddNewTaskToReadyList+0x74>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac84:	4a18      	ldr	r2, [pc, #96]	@ (800ace8 <prvAddNewTaskToReadyList+0xd4>)
 800ac86:	6013      	str	r3, [r2, #0]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac8c:	4613      	mov	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	4413      	add	r3, r2
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4a15      	ldr	r2, [pc, #84]	@ (800acec <prvAddNewTaskToReadyList+0xd8>)
 800ac96:	441a      	add	r2, r3
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	3304      	adds	r3, #4
 800ac9c:	4619      	mov	r1, r3
 800ac9e:	4610      	mov	r0, r2
 800aca0:	f7ff f879 	bl	8009d96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800aca4:	f001 fa4a 	bl	800c13c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800aca8:	4b0d      	ldr	r3, [pc, #52]	@ (800ace0 <prvAddNewTaskToReadyList+0xcc>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00e      	beq.n	800acce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800acb0:	4b0a      	ldr	r3, [pc, #40]	@ (800acdc <prvAddNewTaskToReadyList+0xc8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acba:	429a      	cmp	r2, r3
 800acbc:	d207      	bcs.n	800acce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800acbe:	4b0c      	ldr	r3, [pc, #48]	@ (800acf0 <prvAddNewTaskToReadyList+0xdc>)
 800acc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acc4:	601a      	str	r2, [r3, #0]
 800acc6:	f3bf 8f4f 	dsb	sy
 800acca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acce:	bf00      	nop
 800acd0:	3708      	adds	r7, #8
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	20001d68 	.word	0x20001d68
 800acdc:	20001894 	.word	0x20001894
 800ace0:	20001d74 	.word	0x20001d74
 800ace4:	20001d84 	.word	0x20001d84
 800ace8:	20001d70 	.word	0x20001d70
 800acec:	20001898 	.word	0x20001898
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800acfc:	2300      	movs	r3, #0
 800acfe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d018      	beq.n	800ad38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad06:	4b14      	ldr	r3, [pc, #80]	@ (800ad58 <vTaskDelay+0x64>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00b      	beq.n	800ad26 <vTaskDelay+0x32>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	60bb      	str	r3, [r7, #8]
}
 800ad20:	bf00      	nop
 800ad22:	bf00      	nop
 800ad24:	e7fd      	b.n	800ad22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad26:	f000 f883 	bl	800ae30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad2a:	2100      	movs	r1, #0
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fcf3 	bl	800b718 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad32:	f000 f88b 	bl	800ae4c <xTaskResumeAll>
 800ad36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d107      	bne.n	800ad4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800ad3e:	4b07      	ldr	r3, [pc, #28]	@ (800ad5c <vTaskDelay+0x68>)
 800ad40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad4e:	bf00      	nop
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	20001d90 	.word	0x20001d90
 800ad5c:	e000ed04 	.word	0xe000ed04

0800ad60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b08a      	sub	sp, #40	@ 0x28
 800ad64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad6e:	463a      	mov	r2, r7
 800ad70:	1d39      	adds	r1, r7, #4
 800ad72:	f107 0308 	add.w	r3, r7, #8
 800ad76:	4618      	mov	r0, r3
 800ad78:	f7fe ffac 	bl	8009cd4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad7c:	6839      	ldr	r1, [r7, #0]
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	9202      	str	r2, [sp, #8]
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	2300      	movs	r3, #0
 800ad88:	9300      	str	r3, [sp, #0]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	460a      	mov	r2, r1
 800ad8e:	4922      	ldr	r1, [pc, #136]	@ (800ae18 <vTaskStartScheduler+0xb8>)
 800ad90:	4822      	ldr	r0, [pc, #136]	@ (800ae1c <vTaskStartScheduler+0xbc>)
 800ad92:	f7ff fe09 	bl	800a9a8 <xTaskCreateStatic>
 800ad96:	4603      	mov	r3, r0
 800ad98:	4a21      	ldr	r2, [pc, #132]	@ (800ae20 <vTaskStartScheduler+0xc0>)
 800ad9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ad9c:	4b20      	ldr	r3, [pc, #128]	@ (800ae20 <vTaskStartScheduler+0xc0>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d002      	beq.n	800adaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ada4:	2301      	movs	r3, #1
 800ada6:	617b      	str	r3, [r7, #20]
 800ada8:	e001      	b.n	800adae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adaa:	2300      	movs	r3, #0
 800adac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d102      	bne.n	800adba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800adb4:	f000 fd04 	bl	800b7c0 <xTimerCreateTimerTask>
 800adb8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d116      	bne.n	800adee <vTaskStartScheduler+0x8e>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	613b      	str	r3, [r7, #16]
}
 800add2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800add4:	4b13      	ldr	r3, [pc, #76]	@ (800ae24 <vTaskStartScheduler+0xc4>)
 800add6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800adda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800addc:	4b12      	ldr	r3, [pc, #72]	@ (800ae28 <vTaskStartScheduler+0xc8>)
 800adde:	2201      	movs	r2, #1
 800ade0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ade2:	4b12      	ldr	r3, [pc, #72]	@ (800ae2c <vTaskStartScheduler+0xcc>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ade8:	f001 f8d2 	bl	800bf90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800adec:	e00f      	b.n	800ae0e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adf4:	d10b      	bne.n	800ae0e <vTaskStartScheduler+0xae>
	__asm volatile
 800adf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adfa:	f383 8811 	msr	BASEPRI, r3
 800adfe:	f3bf 8f6f 	isb	sy
 800ae02:	f3bf 8f4f 	dsb	sy
 800ae06:	60fb      	str	r3, [r7, #12]
}
 800ae08:	bf00      	nop
 800ae0a:	bf00      	nop
 800ae0c:	e7fd      	b.n	800ae0a <vTaskStartScheduler+0xaa>
}
 800ae0e:	bf00      	nop
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	0800d724 	.word	0x0800d724
 800ae1c:	0800b451 	.word	0x0800b451
 800ae20:	20001d8c 	.word	0x20001d8c
 800ae24:	20001d88 	.word	0x20001d88
 800ae28:	20001d74 	.word	0x20001d74
 800ae2c:	20001d6c 	.word	0x20001d6c

0800ae30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae34:	4b04      	ldr	r3, [pc, #16]	@ (800ae48 <vTaskSuspendAll+0x18>)
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	4a03      	ldr	r2, [pc, #12]	@ (800ae48 <vTaskSuspendAll+0x18>)
 800ae3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae3e:	bf00      	nop
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr
 800ae48:	20001d90 	.word	0x20001d90

0800ae4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b084      	sub	sp, #16
 800ae50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae56:	2300      	movs	r3, #0
 800ae58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae5a:	4b42      	ldr	r3, [pc, #264]	@ (800af64 <xTaskResumeAll+0x118>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d10b      	bne.n	800ae7a <xTaskResumeAll+0x2e>
	__asm volatile
 800ae62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae66:	f383 8811 	msr	BASEPRI, r3
 800ae6a:	f3bf 8f6f 	isb	sy
 800ae6e:	f3bf 8f4f 	dsb	sy
 800ae72:	603b      	str	r3, [r7, #0]
}
 800ae74:	bf00      	nop
 800ae76:	bf00      	nop
 800ae78:	e7fd      	b.n	800ae76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae7a:	f001 f92d 	bl	800c0d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae7e:	4b39      	ldr	r3, [pc, #228]	@ (800af64 <xTaskResumeAll+0x118>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	4a37      	ldr	r2, [pc, #220]	@ (800af64 <xTaskResumeAll+0x118>)
 800ae86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ae88:	4b36      	ldr	r3, [pc, #216]	@ (800af64 <xTaskResumeAll+0x118>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d162      	bne.n	800af56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ae90:	4b35      	ldr	r3, [pc, #212]	@ (800af68 <xTaskResumeAll+0x11c>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d05e      	beq.n	800af56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ae98:	e02f      	b.n	800aefa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae9a:	4b34      	ldr	r3, [pc, #208]	@ (800af6c <xTaskResumeAll+0x120>)
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3318      	adds	r3, #24
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fe ffd2 	bl	8009e50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f7fe ffcd 	bl	8009e50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeba:	4b2d      	ldr	r3, [pc, #180]	@ (800af70 <xTaskResumeAll+0x124>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d903      	bls.n	800aeca <xTaskResumeAll+0x7e>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec6:	4a2a      	ldr	r2, [pc, #168]	@ (800af70 <xTaskResumeAll+0x124>)
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aece:	4613      	mov	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	4413      	add	r3, r2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4a27      	ldr	r2, [pc, #156]	@ (800af74 <xTaskResumeAll+0x128>)
 800aed8:	441a      	add	r2, r3
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	3304      	adds	r3, #4
 800aede:	4619      	mov	r1, r3
 800aee0:	4610      	mov	r0, r2
 800aee2:	f7fe ff58 	bl	8009d96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aeea:	4b23      	ldr	r3, [pc, #140]	@ (800af78 <xTaskResumeAll+0x12c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d302      	bcc.n	800aefa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aef4:	4b21      	ldr	r3, [pc, #132]	@ (800af7c <xTaskResumeAll+0x130>)
 800aef6:	2201      	movs	r2, #1
 800aef8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aefa:	4b1c      	ldr	r3, [pc, #112]	@ (800af6c <xTaskResumeAll+0x120>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d1cb      	bne.n	800ae9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af08:	f000 fb58 	bl	800b5bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af0c:	4b1c      	ldr	r3, [pc, #112]	@ (800af80 <xTaskResumeAll+0x134>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d010      	beq.n	800af3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af18:	f000 f846 	bl	800afa8 <xTaskIncrementTick>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d002      	beq.n	800af28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800af22:	4b16      	ldr	r3, [pc, #88]	@ (800af7c <xTaskResumeAll+0x130>)
 800af24:	2201      	movs	r2, #1
 800af26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d1f1      	bne.n	800af18 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800af34:	4b12      	ldr	r3, [pc, #72]	@ (800af80 <xTaskResumeAll+0x134>)
 800af36:	2200      	movs	r2, #0
 800af38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af3a:	4b10      	ldr	r3, [pc, #64]	@ (800af7c <xTaskResumeAll+0x130>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d009      	beq.n	800af56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af42:	2301      	movs	r3, #1
 800af44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af46:	4b0f      	ldr	r3, [pc, #60]	@ (800af84 <xTaskResumeAll+0x138>)
 800af48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af4c:	601a      	str	r2, [r3, #0]
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af56:	f001 f8f1 	bl	800c13c <vPortExitCritical>

	return xAlreadyYielded;
 800af5a:	68bb      	ldr	r3, [r7, #8]
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3710      	adds	r7, #16
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}
 800af64:	20001d90 	.word	0x20001d90
 800af68:	20001d68 	.word	0x20001d68
 800af6c:	20001d28 	.word	0x20001d28
 800af70:	20001d70 	.word	0x20001d70
 800af74:	20001898 	.word	0x20001898
 800af78:	20001894 	.word	0x20001894
 800af7c:	20001d7c 	.word	0x20001d7c
 800af80:	20001d78 	.word	0x20001d78
 800af84:	e000ed04 	.word	0xe000ed04

0800af88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800af88:	b480      	push	{r7}
 800af8a:	b083      	sub	sp, #12
 800af8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800af8e:	4b05      	ldr	r3, [pc, #20]	@ (800afa4 <xTaskGetTickCount+0x1c>)
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800af94:	687b      	ldr	r3, [r7, #4]
}
 800af96:	4618      	mov	r0, r3
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20001d6c 	.word	0x20001d6c

0800afa8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b086      	sub	sp, #24
 800afac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afae:	2300      	movs	r3, #0
 800afb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afb2:	4b4f      	ldr	r3, [pc, #316]	@ (800b0f0 <xTaskIncrementTick+0x148>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f040 8090 	bne.w	800b0dc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afbc:	4b4d      	ldr	r3, [pc, #308]	@ (800b0f4 <xTaskIncrementTick+0x14c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	3301      	adds	r3, #1
 800afc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afc4:	4a4b      	ldr	r2, [pc, #300]	@ (800b0f4 <xTaskIncrementTick+0x14c>)
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afca:	693b      	ldr	r3, [r7, #16]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d121      	bne.n	800b014 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800afd0:	4b49      	ldr	r3, [pc, #292]	@ (800b0f8 <xTaskIncrementTick+0x150>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00b      	beq.n	800aff2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800afda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afde:	f383 8811 	msr	BASEPRI, r3
 800afe2:	f3bf 8f6f 	isb	sy
 800afe6:	f3bf 8f4f 	dsb	sy
 800afea:	603b      	str	r3, [r7, #0]
}
 800afec:	bf00      	nop
 800afee:	bf00      	nop
 800aff0:	e7fd      	b.n	800afee <xTaskIncrementTick+0x46>
 800aff2:	4b41      	ldr	r3, [pc, #260]	@ (800b0f8 <xTaskIncrementTick+0x150>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	4b40      	ldr	r3, [pc, #256]	@ (800b0fc <xTaskIncrementTick+0x154>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a3e      	ldr	r2, [pc, #248]	@ (800b0f8 <xTaskIncrementTick+0x150>)
 800affe:	6013      	str	r3, [r2, #0]
 800b000:	4a3e      	ldr	r2, [pc, #248]	@ (800b0fc <xTaskIncrementTick+0x154>)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6013      	str	r3, [r2, #0]
 800b006:	4b3e      	ldr	r3, [pc, #248]	@ (800b100 <xTaskIncrementTick+0x158>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	3301      	adds	r3, #1
 800b00c:	4a3c      	ldr	r2, [pc, #240]	@ (800b100 <xTaskIncrementTick+0x158>)
 800b00e:	6013      	str	r3, [r2, #0]
 800b010:	f000 fad4 	bl	800b5bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b014:	4b3b      	ldr	r3, [pc, #236]	@ (800b104 <xTaskIncrementTick+0x15c>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	693a      	ldr	r2, [r7, #16]
 800b01a:	429a      	cmp	r2, r3
 800b01c:	d349      	bcc.n	800b0b2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b01e:	4b36      	ldr	r3, [pc, #216]	@ (800b0f8 <xTaskIncrementTick+0x150>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d104      	bne.n	800b032 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b028:	4b36      	ldr	r3, [pc, #216]	@ (800b104 <xTaskIncrementTick+0x15c>)
 800b02a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b02e:	601a      	str	r2, [r3, #0]
					break;
 800b030:	e03f      	b.n	800b0b2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b032:	4b31      	ldr	r3, [pc, #196]	@ (800b0f8 <xTaskIncrementTick+0x150>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	68db      	ldr	r3, [r3, #12]
 800b03a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b042:	693a      	ldr	r2, [r7, #16]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	429a      	cmp	r2, r3
 800b048:	d203      	bcs.n	800b052 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b04a:	4a2e      	ldr	r2, [pc, #184]	@ (800b104 <xTaskIncrementTick+0x15c>)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b050:	e02f      	b.n	800b0b2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	3304      	adds	r3, #4
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fefa 	bl	8009e50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b060:	2b00      	cmp	r3, #0
 800b062:	d004      	beq.n	800b06e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	3318      	adds	r3, #24
 800b068:	4618      	mov	r0, r3
 800b06a:	f7fe fef1 	bl	8009e50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b072:	4b25      	ldr	r3, [pc, #148]	@ (800b108 <xTaskIncrementTick+0x160>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	429a      	cmp	r2, r3
 800b078:	d903      	bls.n	800b082 <xTaskIncrementTick+0xda>
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b07e:	4a22      	ldr	r2, [pc, #136]	@ (800b108 <xTaskIncrementTick+0x160>)
 800b080:	6013      	str	r3, [r2, #0]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b086:	4613      	mov	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4413      	add	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4a1f      	ldr	r2, [pc, #124]	@ (800b10c <xTaskIncrementTick+0x164>)
 800b090:	441a      	add	r2, r3
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	3304      	adds	r3, #4
 800b096:	4619      	mov	r1, r3
 800b098:	4610      	mov	r0, r2
 800b09a:	f7fe fe7c 	bl	8009d96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800b110 <xTaskIncrementTick+0x168>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d3b8      	bcc.n	800b01e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0b0:	e7b5      	b.n	800b01e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0b2:	4b17      	ldr	r3, [pc, #92]	@ (800b110 <xTaskIncrementTick+0x168>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b8:	4914      	ldr	r1, [pc, #80]	@ (800b10c <xTaskIncrementTick+0x164>)
 800b0ba:	4613      	mov	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	4413      	add	r3, r2
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	440b      	add	r3, r1
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d901      	bls.n	800b0ce <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0ce:	4b11      	ldr	r3, [pc, #68]	@ (800b114 <xTaskIncrementTick+0x16c>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d007      	beq.n	800b0e6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	617b      	str	r3, [r7, #20]
 800b0da:	e004      	b.n	800b0e6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0dc:	4b0e      	ldr	r3, [pc, #56]	@ (800b118 <xTaskIncrementTick+0x170>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	4a0d      	ldr	r2, [pc, #52]	@ (800b118 <xTaskIncrementTick+0x170>)
 800b0e4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b0e6:	697b      	ldr	r3, [r7, #20]
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	3718      	adds	r7, #24
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	bd80      	pop	{r7, pc}
 800b0f0:	20001d90 	.word	0x20001d90
 800b0f4:	20001d6c 	.word	0x20001d6c
 800b0f8:	20001d20 	.word	0x20001d20
 800b0fc:	20001d24 	.word	0x20001d24
 800b100:	20001d80 	.word	0x20001d80
 800b104:	20001d88 	.word	0x20001d88
 800b108:	20001d70 	.word	0x20001d70
 800b10c:	20001898 	.word	0x20001898
 800b110:	20001894 	.word	0x20001894
 800b114:	20001d7c 	.word	0x20001d7c
 800b118:	20001d78 	.word	0x20001d78

0800b11c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b122:	4b28      	ldr	r3, [pc, #160]	@ (800b1c4 <vTaskSwitchContext+0xa8>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d003      	beq.n	800b132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b12a:	4b27      	ldr	r3, [pc, #156]	@ (800b1c8 <vTaskSwitchContext+0xac>)
 800b12c:	2201      	movs	r2, #1
 800b12e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b130:	e042      	b.n	800b1b8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b132:	4b25      	ldr	r3, [pc, #148]	@ (800b1c8 <vTaskSwitchContext+0xac>)
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b138:	4b24      	ldr	r3, [pc, #144]	@ (800b1cc <vTaskSwitchContext+0xb0>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	e011      	b.n	800b164 <vTaskSwitchContext+0x48>
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d10b      	bne.n	800b15e <vTaskSwitchContext+0x42>
	__asm volatile
 800b146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14a:	f383 8811 	msr	BASEPRI, r3
 800b14e:	f3bf 8f6f 	isb	sy
 800b152:	f3bf 8f4f 	dsb	sy
 800b156:	607b      	str	r3, [r7, #4]
}
 800b158:	bf00      	nop
 800b15a:	bf00      	nop
 800b15c:	e7fd      	b.n	800b15a <vTaskSwitchContext+0x3e>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	3b01      	subs	r3, #1
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	491a      	ldr	r1, [pc, #104]	@ (800b1d0 <vTaskSwitchContext+0xb4>)
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4613      	mov	r3, r2
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	440b      	add	r3, r1
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	2b00      	cmp	r3, #0
 800b176:	d0e3      	beq.n	800b140 <vTaskSwitchContext+0x24>
 800b178:	68fa      	ldr	r2, [r7, #12]
 800b17a:	4613      	mov	r3, r2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	4a13      	ldr	r2, [pc, #76]	@ (800b1d0 <vTaskSwitchContext+0xb4>)
 800b184:	4413      	add	r3, r2
 800b186:	60bb      	str	r3, [r7, #8]
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	685a      	ldr	r2, [r3, #4]
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	605a      	str	r2, [r3, #4]
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	3308      	adds	r3, #8
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d104      	bne.n	800b1a8 <vTaskSwitchContext+0x8c>
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	685a      	ldr	r2, [r3, #4]
 800b1a4:	68bb      	ldr	r3, [r7, #8]
 800b1a6:	605a      	str	r2, [r3, #4]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	4a09      	ldr	r2, [pc, #36]	@ (800b1d4 <vTaskSwitchContext+0xb8>)
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	4a06      	ldr	r2, [pc, #24]	@ (800b1cc <vTaskSwitchContext+0xb0>)
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6013      	str	r3, [r2, #0]
}
 800b1b8:	bf00      	nop
 800b1ba:	3714      	adds	r7, #20
 800b1bc:	46bd      	mov	sp, r7
 800b1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c2:	4770      	bx	lr
 800b1c4:	20001d90 	.word	0x20001d90
 800b1c8:	20001d7c 	.word	0x20001d7c
 800b1cc:	20001d70 	.word	0x20001d70
 800b1d0:	20001898 	.word	0x20001898
 800b1d4:	20001894 	.word	0x20001894

0800b1d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d10b      	bne.n	800b200 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b1e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1ec:	f383 8811 	msr	BASEPRI, r3
 800b1f0:	f3bf 8f6f 	isb	sy
 800b1f4:	f3bf 8f4f 	dsb	sy
 800b1f8:	60fb      	str	r3, [r7, #12]
}
 800b1fa:	bf00      	nop
 800b1fc:	bf00      	nop
 800b1fe:	e7fd      	b.n	800b1fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b200:	4b07      	ldr	r3, [pc, #28]	@ (800b220 <vTaskPlaceOnEventList+0x48>)
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3318      	adds	r3, #24
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f7fe fde8 	bl	8009dde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b20e:	2101      	movs	r1, #1
 800b210:	6838      	ldr	r0, [r7, #0]
 800b212:	f000 fa81 	bl	800b718 <prvAddCurrentTaskToDelayedList>
}
 800b216:	bf00      	nop
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	20001894 	.word	0x20001894

0800b224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b224:	b580      	push	{r7, lr}
 800b226:	b086      	sub	sp, #24
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d10b      	bne.n	800b24e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b23a:	f383 8811 	msr	BASEPRI, r3
 800b23e:	f3bf 8f6f 	isb	sy
 800b242:	f3bf 8f4f 	dsb	sy
 800b246:	617b      	str	r3, [r7, #20]
}
 800b248:	bf00      	nop
 800b24a:	bf00      	nop
 800b24c:	e7fd      	b.n	800b24a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b24e:	4b0a      	ldr	r3, [pc, #40]	@ (800b278 <vTaskPlaceOnEventListRestricted+0x54>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	3318      	adds	r3, #24
 800b254:	4619      	mov	r1, r3
 800b256:	68f8      	ldr	r0, [r7, #12]
 800b258:	f7fe fd9d 	bl	8009d96 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b262:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b268:	6879      	ldr	r1, [r7, #4]
 800b26a:	68b8      	ldr	r0, [r7, #8]
 800b26c:	f000 fa54 	bl	800b718 <prvAddCurrentTaskToDelayedList>
	}
 800b270:	bf00      	nop
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	20001894 	.word	0x20001894

0800b27c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b086      	sub	sp, #24
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	68db      	ldr	r3, [r3, #12]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10b      	bne.n	800b2aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b296:	f383 8811 	msr	BASEPRI, r3
 800b29a:	f3bf 8f6f 	isb	sy
 800b29e:	f3bf 8f4f 	dsb	sy
 800b2a2:	60fb      	str	r3, [r7, #12]
}
 800b2a4:	bf00      	nop
 800b2a6:	bf00      	nop
 800b2a8:	e7fd      	b.n	800b2a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	3318      	adds	r3, #24
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f7fe fdce 	bl	8009e50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b32c <xTaskRemoveFromEventList+0xb0>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d11d      	bne.n	800b2f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	3304      	adds	r3, #4
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe fdc5 	bl	8009e50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2c6:	693b      	ldr	r3, [r7, #16]
 800b2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2ca:	4b19      	ldr	r3, [pc, #100]	@ (800b330 <xTaskRemoveFromEventList+0xb4>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d903      	bls.n	800b2da <xTaskRemoveFromEventList+0x5e>
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d6:	4a16      	ldr	r2, [pc, #88]	@ (800b330 <xTaskRemoveFromEventList+0xb4>)
 800b2d8:	6013      	str	r3, [r2, #0]
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2de:	4613      	mov	r3, r2
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	4413      	add	r3, r2
 800b2e4:	009b      	lsls	r3, r3, #2
 800b2e6:	4a13      	ldr	r2, [pc, #76]	@ (800b334 <xTaskRemoveFromEventList+0xb8>)
 800b2e8:	441a      	add	r2, r3
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	3304      	adds	r3, #4
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	4610      	mov	r0, r2
 800b2f2:	f7fe fd50 	bl	8009d96 <vListInsertEnd>
 800b2f6:	e005      	b.n	800b304 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	3318      	adds	r3, #24
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	480e      	ldr	r0, [pc, #56]	@ (800b338 <xTaskRemoveFromEventList+0xbc>)
 800b300:	f7fe fd49 	bl	8009d96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b308:	4b0c      	ldr	r3, [pc, #48]	@ (800b33c <xTaskRemoveFromEventList+0xc0>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b30e:	429a      	cmp	r2, r3
 800b310:	d905      	bls.n	800b31e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b312:	2301      	movs	r3, #1
 800b314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b316:	4b0a      	ldr	r3, [pc, #40]	@ (800b340 <xTaskRemoveFromEventList+0xc4>)
 800b318:	2201      	movs	r2, #1
 800b31a:	601a      	str	r2, [r3, #0]
 800b31c:	e001      	b.n	800b322 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b31e:	2300      	movs	r3, #0
 800b320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b322:	697b      	ldr	r3, [r7, #20]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	20001d90 	.word	0x20001d90
 800b330:	20001d70 	.word	0x20001d70
 800b334:	20001898 	.word	0x20001898
 800b338:	20001d28 	.word	0x20001d28
 800b33c:	20001894 	.word	0x20001894
 800b340:	20001d7c 	.word	0x20001d7c

0800b344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b344:	b480      	push	{r7}
 800b346:	b083      	sub	sp, #12
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b34c:	4b06      	ldr	r3, [pc, #24]	@ (800b368 <vTaskInternalSetTimeOutState+0x24>)
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b354:	4b05      	ldr	r3, [pc, #20]	@ (800b36c <vTaskInternalSetTimeOutState+0x28>)
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	605a      	str	r2, [r3, #4]
}
 800b35c:	bf00      	nop
 800b35e:	370c      	adds	r7, #12
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	20001d80 	.word	0x20001d80
 800b36c:	20001d6c 	.word	0x20001d6c

0800b370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b088      	sub	sp, #32
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10b      	bne.n	800b398 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	613b      	str	r3, [r7, #16]
}
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	e7fd      	b.n	800b394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10b      	bne.n	800b3b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	60fb      	str	r3, [r7, #12]
}
 800b3b0:	bf00      	nop
 800b3b2:	bf00      	nop
 800b3b4:	e7fd      	b.n	800b3b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b3b6:	f000 fe8f 	bl	800c0d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b430 <xTaskCheckForTimeOut+0xc0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685b      	ldr	r3, [r3, #4]
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3d2:	d102      	bne.n	800b3da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	61fb      	str	r3, [r7, #28]
 800b3d8:	e023      	b.n	800b422 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681a      	ldr	r2, [r3, #0]
 800b3de:	4b15      	ldr	r3, [pc, #84]	@ (800b434 <xTaskCheckForTimeOut+0xc4>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d007      	beq.n	800b3f6 <xTaskCheckForTimeOut+0x86>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	685b      	ldr	r3, [r3, #4]
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d302      	bcc.n	800b3f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b3f0:	2301      	movs	r3, #1
 800b3f2:	61fb      	str	r3, [r7, #28]
 800b3f4:	e015      	b.n	800b422 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	697a      	ldr	r2, [r7, #20]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d20b      	bcs.n	800b418 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	1ad2      	subs	r2, r2, r3
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f7ff ff99 	bl	800b344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b412:	2300      	movs	r3, #0
 800b414:	61fb      	str	r3, [r7, #28]
 800b416:	e004      	b.n	800b422 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	2200      	movs	r2, #0
 800b41c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b41e:	2301      	movs	r3, #1
 800b420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b422:	f000 fe8b 	bl	800c13c <vPortExitCritical>

	return xReturn;
 800b426:	69fb      	ldr	r3, [r7, #28]
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3720      	adds	r7, #32
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}
 800b430:	20001d6c 	.word	0x20001d6c
 800b434:	20001d80 	.word	0x20001d80

0800b438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b438:	b480      	push	{r7}
 800b43a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b43c:	4b03      	ldr	r3, [pc, #12]	@ (800b44c <vTaskMissedYield+0x14>)
 800b43e:	2201      	movs	r2, #1
 800b440:	601a      	str	r2, [r3, #0]
}
 800b442:	bf00      	nop
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	20001d7c 	.word	0x20001d7c

0800b450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b458:	f000 f852 	bl	800b500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b45c:	4b06      	ldr	r3, [pc, #24]	@ (800b478 <prvIdleTask+0x28>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2b01      	cmp	r3, #1
 800b462:	d9f9      	bls.n	800b458 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b464:	4b05      	ldr	r3, [pc, #20]	@ (800b47c <prvIdleTask+0x2c>)
 800b466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b46a:	601a      	str	r2, [r3, #0]
 800b46c:	f3bf 8f4f 	dsb	sy
 800b470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b474:	e7f0      	b.n	800b458 <prvIdleTask+0x8>
 800b476:	bf00      	nop
 800b478:	20001898 	.word	0x20001898
 800b47c:	e000ed04 	.word	0xe000ed04

0800b480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b082      	sub	sp, #8
 800b484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b486:	2300      	movs	r3, #0
 800b488:	607b      	str	r3, [r7, #4]
 800b48a:	e00c      	b.n	800b4a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	4613      	mov	r3, r2
 800b490:	009b      	lsls	r3, r3, #2
 800b492:	4413      	add	r3, r2
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	4a12      	ldr	r2, [pc, #72]	@ (800b4e0 <prvInitialiseTaskLists+0x60>)
 800b498:	4413      	add	r3, r2
 800b49a:	4618      	mov	r0, r3
 800b49c:	f7fe fc4e 	bl	8009d3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	607b      	str	r3, [r7, #4]
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b37      	cmp	r3, #55	@ 0x37
 800b4aa:	d9ef      	bls.n	800b48c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4ac:	480d      	ldr	r0, [pc, #52]	@ (800b4e4 <prvInitialiseTaskLists+0x64>)
 800b4ae:	f7fe fc45 	bl	8009d3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4b2:	480d      	ldr	r0, [pc, #52]	@ (800b4e8 <prvInitialiseTaskLists+0x68>)
 800b4b4:	f7fe fc42 	bl	8009d3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4b8:	480c      	ldr	r0, [pc, #48]	@ (800b4ec <prvInitialiseTaskLists+0x6c>)
 800b4ba:	f7fe fc3f 	bl	8009d3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4be:	480c      	ldr	r0, [pc, #48]	@ (800b4f0 <prvInitialiseTaskLists+0x70>)
 800b4c0:	f7fe fc3c 	bl	8009d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4c4:	480b      	ldr	r0, [pc, #44]	@ (800b4f4 <prvInitialiseTaskLists+0x74>)
 800b4c6:	f7fe fc39 	bl	8009d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b4f8 <prvInitialiseTaskLists+0x78>)
 800b4cc:	4a05      	ldr	r2, [pc, #20]	@ (800b4e4 <prvInitialiseTaskLists+0x64>)
 800b4ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800b4fc <prvInitialiseTaskLists+0x7c>)
 800b4d2:	4a05      	ldr	r2, [pc, #20]	@ (800b4e8 <prvInitialiseTaskLists+0x68>)
 800b4d4:	601a      	str	r2, [r3, #0]
}
 800b4d6:	bf00      	nop
 800b4d8:	3708      	adds	r7, #8
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	20001898 	.word	0x20001898
 800b4e4:	20001cf8 	.word	0x20001cf8
 800b4e8:	20001d0c 	.word	0x20001d0c
 800b4ec:	20001d28 	.word	0x20001d28
 800b4f0:	20001d3c 	.word	0x20001d3c
 800b4f4:	20001d54 	.word	0x20001d54
 800b4f8:	20001d20 	.word	0x20001d20
 800b4fc:	20001d24 	.word	0x20001d24

0800b500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b500:	b580      	push	{r7, lr}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b506:	e019      	b.n	800b53c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b508:	f000 fde6 	bl	800c0d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b50c:	4b10      	ldr	r3, [pc, #64]	@ (800b550 <prvCheckTasksWaitingTermination+0x50>)
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	3304      	adds	r3, #4
 800b518:	4618      	mov	r0, r3
 800b51a:	f7fe fc99 	bl	8009e50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b51e:	4b0d      	ldr	r3, [pc, #52]	@ (800b554 <prvCheckTasksWaitingTermination+0x54>)
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	3b01      	subs	r3, #1
 800b524:	4a0b      	ldr	r2, [pc, #44]	@ (800b554 <prvCheckTasksWaitingTermination+0x54>)
 800b526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b528:	4b0b      	ldr	r3, [pc, #44]	@ (800b558 <prvCheckTasksWaitingTermination+0x58>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3b01      	subs	r3, #1
 800b52e:	4a0a      	ldr	r2, [pc, #40]	@ (800b558 <prvCheckTasksWaitingTermination+0x58>)
 800b530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b532:	f000 fe03 	bl	800c13c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f810 	bl	800b55c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b53c:	4b06      	ldr	r3, [pc, #24]	@ (800b558 <prvCheckTasksWaitingTermination+0x58>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d1e1      	bne.n	800b508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b544:	bf00      	nop
 800b546:	bf00      	nop
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20001d3c 	.word	0x20001d3c
 800b554:	20001d68 	.word	0x20001d68
 800b558:	20001d50 	.word	0x20001d50

0800b55c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d108      	bne.n	800b580 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b572:	4618      	mov	r0, r3
 800b574:	f000 ffa0 	bl	800c4b8 <vPortFree>
				vPortFree( pxTCB );
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f000 ff9d 	bl	800c4b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b57e:	e019      	b.n	800b5b4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b586:	2b01      	cmp	r3, #1
 800b588:	d103      	bne.n	800b592 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 ff94 	bl	800c4b8 <vPortFree>
	}
 800b590:	e010      	b.n	800b5b4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800b598:	2b02      	cmp	r3, #2
 800b59a:	d00b      	beq.n	800b5b4 <prvDeleteTCB+0x58>
	__asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a0:	f383 8811 	msr	BASEPRI, r3
 800b5a4:	f3bf 8f6f 	isb	sy
 800b5a8:	f3bf 8f4f 	dsb	sy
 800b5ac:	60fb      	str	r3, [r7, #12]
}
 800b5ae:	bf00      	nop
 800b5b0:	bf00      	nop
 800b5b2:	e7fd      	b.n	800b5b0 <prvDeleteTCB+0x54>
	}
 800b5b4:	bf00      	nop
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5c2:	4b0c      	ldr	r3, [pc, #48]	@ (800b5f4 <prvResetNextTaskUnblockTime+0x38>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5cc:	4b0a      	ldr	r3, [pc, #40]	@ (800b5f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b5ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5d4:	e008      	b.n	800b5e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5d6:	4b07      	ldr	r3, [pc, #28]	@ (800b5f4 <prvResetNextTaskUnblockTime+0x38>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	4a04      	ldr	r2, [pc, #16]	@ (800b5f8 <prvResetNextTaskUnblockTime+0x3c>)
 800b5e6:	6013      	str	r3, [r2, #0]
}
 800b5e8:	bf00      	nop
 800b5ea:	370c      	adds	r7, #12
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr
 800b5f4:	20001d20 	.word	0x20001d20
 800b5f8:	20001d88 	.word	0x20001d88

0800b5fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b602:	4b0b      	ldr	r3, [pc, #44]	@ (800b630 <xTaskGetSchedulerState+0x34>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d102      	bne.n	800b610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b60a:	2301      	movs	r3, #1
 800b60c:	607b      	str	r3, [r7, #4]
 800b60e:	e008      	b.n	800b622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b610:	4b08      	ldr	r3, [pc, #32]	@ (800b634 <xTaskGetSchedulerState+0x38>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d102      	bne.n	800b61e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b618:	2302      	movs	r3, #2
 800b61a:	607b      	str	r3, [r7, #4]
 800b61c:	e001      	b.n	800b622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b61e:	2300      	movs	r3, #0
 800b620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b622:	687b      	ldr	r3, [r7, #4]
	}
 800b624:	4618      	mov	r0, r3
 800b626:	370c      	adds	r7, #12
 800b628:	46bd      	mov	sp, r7
 800b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62e:	4770      	bx	lr
 800b630:	20001d74 	.word	0x20001d74
 800b634:	20001d90 	.word	0x20001d90

0800b638 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b086      	sub	sp, #24
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b644:	2300      	movs	r3, #0
 800b646:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d058      	beq.n	800b700 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b64e:	4b2f      	ldr	r3, [pc, #188]	@ (800b70c <xTaskPriorityDisinherit+0xd4>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	429a      	cmp	r2, r3
 800b656:	d00b      	beq.n	800b670 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b65c:	f383 8811 	msr	BASEPRI, r3
 800b660:	f3bf 8f6f 	isb	sy
 800b664:	f3bf 8f4f 	dsb	sy
 800b668:	60fb      	str	r3, [r7, #12]
}
 800b66a:	bf00      	nop
 800b66c:	bf00      	nop
 800b66e:	e7fd      	b.n	800b66c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b674:	2b00      	cmp	r3, #0
 800b676:	d10b      	bne.n	800b690 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b67c:	f383 8811 	msr	BASEPRI, r3
 800b680:	f3bf 8f6f 	isb	sy
 800b684:	f3bf 8f4f 	dsb	sy
 800b688:	60bb      	str	r3, [r7, #8]
}
 800b68a:	bf00      	nop
 800b68c:	bf00      	nop
 800b68e:	e7fd      	b.n	800b68c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b694:	1e5a      	subs	r2, r3, #1
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b69a:	693b      	ldr	r3, [r7, #16]
 800b69c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d02c      	beq.n	800b700 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d128      	bne.n	800b700 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	3304      	adds	r3, #4
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	f7fe fbcc 	bl	8009e50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d0:	4b0f      	ldr	r3, [pc, #60]	@ (800b710 <xTaskPriorityDisinherit+0xd8>)
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d903      	bls.n	800b6e0 <xTaskPriorityDisinherit+0xa8>
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6dc:	4a0c      	ldr	r2, [pc, #48]	@ (800b710 <xTaskPriorityDisinherit+0xd8>)
 800b6de:	6013      	str	r3, [r2, #0]
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e4:	4613      	mov	r3, r2
 800b6e6:	009b      	lsls	r3, r3, #2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	009b      	lsls	r3, r3, #2
 800b6ec:	4a09      	ldr	r2, [pc, #36]	@ (800b714 <xTaskPriorityDisinherit+0xdc>)
 800b6ee:	441a      	add	r2, r3
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	4610      	mov	r0, r2
 800b6f8:	f7fe fb4d 	bl	8009d96 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b700:	697b      	ldr	r3, [r7, #20]
	}
 800b702:	4618      	mov	r0, r3
 800b704:	3718      	adds	r7, #24
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	20001894 	.word	0x20001894
 800b710:	20001d70 	.word	0x20001d70
 800b714:	20001898 	.word	0x20001898

0800b718 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b722:	4b21      	ldr	r3, [pc, #132]	@ (800b7a8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b728:	4b20      	ldr	r3, [pc, #128]	@ (800b7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	3304      	adds	r3, #4
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fb8e 	bl	8009e50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b73a:	d10a      	bne.n	800b752 <prvAddCurrentTaskToDelayedList+0x3a>
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d007      	beq.n	800b752 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b742:	4b1a      	ldr	r3, [pc, #104]	@ (800b7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	3304      	adds	r3, #4
 800b748:	4619      	mov	r1, r3
 800b74a:	4819      	ldr	r0, [pc, #100]	@ (800b7b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b74c:	f7fe fb23 	bl	8009d96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b750:	e026      	b.n	800b7a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b752:	68fa      	ldr	r2, [r7, #12]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	4413      	add	r3, r2
 800b758:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b75a:	4b14      	ldr	r3, [pc, #80]	@ (800b7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	68ba      	ldr	r2, [r7, #8]
 800b760:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	429a      	cmp	r2, r3
 800b768:	d209      	bcs.n	800b77e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b76a:	4b12      	ldr	r3, [pc, #72]	@ (800b7b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	4b0f      	ldr	r3, [pc, #60]	@ (800b7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	3304      	adds	r3, #4
 800b774:	4619      	mov	r1, r3
 800b776:	4610      	mov	r0, r2
 800b778:	f7fe fb31 	bl	8009dde <vListInsert>
}
 800b77c:	e010      	b.n	800b7a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b77e:	4b0e      	ldr	r3, [pc, #56]	@ (800b7b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	4b0a      	ldr	r3, [pc, #40]	@ (800b7ac <prvAddCurrentTaskToDelayedList+0x94>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	3304      	adds	r3, #4
 800b788:	4619      	mov	r1, r3
 800b78a:	4610      	mov	r0, r2
 800b78c:	f7fe fb27 	bl	8009dde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b790:	4b0a      	ldr	r3, [pc, #40]	@ (800b7bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68ba      	ldr	r2, [r7, #8]
 800b796:	429a      	cmp	r2, r3
 800b798:	d202      	bcs.n	800b7a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b79a:	4a08      	ldr	r2, [pc, #32]	@ (800b7bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	6013      	str	r3, [r2, #0]
}
 800b7a0:	bf00      	nop
 800b7a2:	3710      	adds	r7, #16
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	20001d6c 	.word	0x20001d6c
 800b7ac:	20001894 	.word	0x20001894
 800b7b0:	20001d54 	.word	0x20001d54
 800b7b4:	20001d24 	.word	0x20001d24
 800b7b8:	20001d20 	.word	0x20001d20
 800b7bc:	20001d88 	.word	0x20001d88

0800b7c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b08a      	sub	sp, #40	@ 0x28
 800b7c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7ca:	f000 fb13 	bl	800bdf4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800b844 <xTimerCreateTimerTask+0x84>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d021      	beq.n	800b81a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7de:	1d3a      	adds	r2, r7, #4
 800b7e0:	f107 0108 	add.w	r1, r7, #8
 800b7e4:	f107 030c 	add.w	r3, r7, #12
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fa8d 	bl	8009d08 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	9202      	str	r2, [sp, #8]
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	2302      	movs	r3, #2
 800b7fa:	9300      	str	r3, [sp, #0]
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	460a      	mov	r2, r1
 800b800:	4911      	ldr	r1, [pc, #68]	@ (800b848 <xTimerCreateTimerTask+0x88>)
 800b802:	4812      	ldr	r0, [pc, #72]	@ (800b84c <xTimerCreateTimerTask+0x8c>)
 800b804:	f7ff f8d0 	bl	800a9a8 <xTaskCreateStatic>
 800b808:	4603      	mov	r3, r0
 800b80a:	4a11      	ldr	r2, [pc, #68]	@ (800b850 <xTimerCreateTimerTask+0x90>)
 800b80c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b80e:	4b10      	ldr	r3, [pc, #64]	@ (800b850 <xTimerCreateTimerTask+0x90>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d001      	beq.n	800b81a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b816:	2301      	movs	r3, #1
 800b818:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10b      	bne.n	800b838 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800b820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b824:	f383 8811 	msr	BASEPRI, r3
 800b828:	f3bf 8f6f 	isb	sy
 800b82c:	f3bf 8f4f 	dsb	sy
 800b830:	613b      	str	r3, [r7, #16]
}
 800b832:	bf00      	nop
 800b834:	bf00      	nop
 800b836:	e7fd      	b.n	800b834 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b838:	697b      	ldr	r3, [r7, #20]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20001dc4 	.word	0x20001dc4
 800b848:	0800d72c 	.word	0x0800d72c
 800b84c:	0800b98d 	.word	0x0800b98d
 800b850:	20001dc8 	.word	0x20001dc8

0800b854 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b08a      	sub	sp, #40	@ 0x28
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b862:	2300      	movs	r3, #0
 800b864:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d10b      	bne.n	800b884 <xTimerGenericCommand+0x30>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	623b      	str	r3, [r7, #32]
}
 800b87e:	bf00      	nop
 800b880:	bf00      	nop
 800b882:	e7fd      	b.n	800b880 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b884:	4b19      	ldr	r3, [pc, #100]	@ (800b8ec <xTimerGenericCommand+0x98>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d02a      	beq.n	800b8e2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b05      	cmp	r3, #5
 800b89c:	dc18      	bgt.n	800b8d0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b89e:	f7ff fead 	bl	800b5fc <xTaskGetSchedulerState>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	2b02      	cmp	r3, #2
 800b8a6:	d109      	bne.n	800b8bc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8a8:	4b10      	ldr	r3, [pc, #64]	@ (800b8ec <xTimerGenericCommand+0x98>)
 800b8aa:	6818      	ldr	r0, [r3, #0]
 800b8ac:	f107 0110 	add.w	r1, r7, #16
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8b4:	f7fe fc88 	bl	800a1c8 <xQueueGenericSend>
 800b8b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800b8ba:	e012      	b.n	800b8e2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8bc:	4b0b      	ldr	r3, [pc, #44]	@ (800b8ec <xTimerGenericCommand+0x98>)
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	f107 0110 	add.w	r1, r7, #16
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f7fe fc7e 	bl	800a1c8 <xQueueGenericSend>
 800b8cc:	6278      	str	r0, [r7, #36]	@ 0x24
 800b8ce:	e008      	b.n	800b8e2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8d0:	4b06      	ldr	r3, [pc, #24]	@ (800b8ec <xTimerGenericCommand+0x98>)
 800b8d2:	6818      	ldr	r0, [r3, #0]
 800b8d4:	f107 0110 	add.w	r1, r7, #16
 800b8d8:	2300      	movs	r3, #0
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	f7fe fd76 	bl	800a3cc <xQueueGenericSendFromISR>
 800b8e0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3728      	adds	r7, #40	@ 0x28
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}
 800b8ec:	20001dc4 	.word	0x20001dc4

0800b8f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b088      	sub	sp, #32
 800b8f4:	af02      	add	r7, sp, #8
 800b8f6:	6078      	str	r0, [r7, #4]
 800b8f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8fa:	4b23      	ldr	r3, [pc, #140]	@ (800b988 <prvProcessExpiredTimer+0x98>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	3304      	adds	r3, #4
 800b908:	4618      	mov	r0, r3
 800b90a:	f7fe faa1 	bl	8009e50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b914:	f003 0304 	and.w	r3, r3, #4
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d023      	beq.n	800b964 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	699a      	ldr	r2, [r3, #24]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	18d1      	adds	r1, r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	683a      	ldr	r2, [r7, #0]
 800b928:	6978      	ldr	r0, [r7, #20]
 800b92a:	f000 f8d5 	bl	800bad8 <prvInsertTimerInActiveList>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d020      	beq.n	800b976 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b934:	2300      	movs	r3, #0
 800b936:	9300      	str	r3, [sp, #0]
 800b938:	2300      	movs	r3, #0
 800b93a:	687a      	ldr	r2, [r7, #4]
 800b93c:	2100      	movs	r1, #0
 800b93e:	6978      	ldr	r0, [r7, #20]
 800b940:	f7ff ff88 	bl	800b854 <xTimerGenericCommand>
 800b944:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b946:	693b      	ldr	r3, [r7, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d114      	bne.n	800b976 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800b94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b950:	f383 8811 	msr	BASEPRI, r3
 800b954:	f3bf 8f6f 	isb	sy
 800b958:	f3bf 8f4f 	dsb	sy
 800b95c:	60fb      	str	r3, [r7, #12]
}
 800b95e:	bf00      	nop
 800b960:	bf00      	nop
 800b962:	e7fd      	b.n	800b960 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b96a:	f023 0301 	bic.w	r3, r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	6a1b      	ldr	r3, [r3, #32]
 800b97a:	6978      	ldr	r0, [r7, #20]
 800b97c:	4798      	blx	r3
}
 800b97e:	bf00      	nop
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20001dbc 	.word	0x20001dbc

0800b98c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b994:	f107 0308 	add.w	r3, r7, #8
 800b998:	4618      	mov	r0, r3
 800b99a:	f000 f859 	bl	800ba50 <prvGetNextExpireTime>
 800b99e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	4619      	mov	r1, r3
 800b9a4:	68f8      	ldr	r0, [r7, #12]
 800b9a6:	f000 f805 	bl	800b9b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9aa:	f000 f8d7 	bl	800bb5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9ae:	bf00      	nop
 800b9b0:	e7f0      	b.n	800b994 <prvTimerTask+0x8>
	...

0800b9b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b084      	sub	sp, #16
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9be:	f7ff fa37 	bl	800ae30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9c2:	f107 0308 	add.w	r3, r7, #8
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 f866 	bl	800ba98 <prvSampleTimeNow>
 800b9cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d130      	bne.n	800ba36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10a      	bne.n	800b9f0 <prvProcessTimerOrBlockTask+0x3c>
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	d806      	bhi.n	800b9f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9e2:	f7ff fa33 	bl	800ae4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9e6:	68f9      	ldr	r1, [r7, #12]
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f7ff ff81 	bl	800b8f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9ee:	e024      	b.n	800ba3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d008      	beq.n	800ba08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b9f6:	4b13      	ldr	r3, [pc, #76]	@ (800ba44 <prvProcessTimerOrBlockTask+0x90>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d101      	bne.n	800ba04 <prvProcessTimerOrBlockTask+0x50>
 800ba00:	2301      	movs	r3, #1
 800ba02:	e000      	b.n	800ba06 <prvProcessTimerOrBlockTask+0x52>
 800ba04:	2300      	movs	r3, #0
 800ba06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba08:	4b0f      	ldr	r3, [pc, #60]	@ (800ba48 <prvProcessTimerOrBlockTask+0x94>)
 800ba0a:	6818      	ldr	r0, [r3, #0]
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	4619      	mov	r1, r3
 800ba16:	f7fe ff93 	bl	800a940 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba1a:	f7ff fa17 	bl	800ae4c <xTaskResumeAll>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10a      	bne.n	800ba3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba24:	4b09      	ldr	r3, [pc, #36]	@ (800ba4c <prvProcessTimerOrBlockTask+0x98>)
 800ba26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba2a:	601a      	str	r2, [r3, #0]
 800ba2c:	f3bf 8f4f 	dsb	sy
 800ba30:	f3bf 8f6f 	isb	sy
}
 800ba34:	e001      	b.n	800ba3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba36:	f7ff fa09 	bl	800ae4c <xTaskResumeAll>
}
 800ba3a:	bf00      	nop
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}
 800ba42:	bf00      	nop
 800ba44:	20001dc0 	.word	0x20001dc0
 800ba48:	20001dc4 	.word	0x20001dc4
 800ba4c:	e000ed04 	.word	0xe000ed04

0800ba50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba50:	b480      	push	{r7}
 800ba52:	b085      	sub	sp, #20
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba58:	4b0e      	ldr	r3, [pc, #56]	@ (800ba94 <prvGetNextExpireTime+0x44>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d101      	bne.n	800ba66 <prvGetNextExpireTime+0x16>
 800ba62:	2201      	movs	r2, #1
 800ba64:	e000      	b.n	800ba68 <prvGetNextExpireTime+0x18>
 800ba66:	2200      	movs	r2, #0
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d105      	bne.n	800ba80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba74:	4b07      	ldr	r3, [pc, #28]	@ (800ba94 <prvGetNextExpireTime+0x44>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	60fb      	str	r3, [r7, #12]
 800ba7e:	e001      	b.n	800ba84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba80:	2300      	movs	r3, #0
 800ba82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba84:	68fb      	ldr	r3, [r7, #12]
}
 800ba86:	4618      	mov	r0, r3
 800ba88:	3714      	adds	r7, #20
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	20001dbc 	.word	0x20001dbc

0800ba98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800baa0:	f7ff fa72 	bl	800af88 <xTaskGetTickCount>
 800baa4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800baa6:	4b0b      	ldr	r3, [pc, #44]	@ (800bad4 <prvSampleTimeNow+0x3c>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	429a      	cmp	r2, r3
 800baae:	d205      	bcs.n	800babc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bab0:	f000 f93a 	bl	800bd28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
 800baba:	e002      	b.n	800bac2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bac2:	4a04      	ldr	r2, [pc, #16]	@ (800bad4 <prvSampleTimeNow+0x3c>)
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bac8:	68fb      	ldr	r3, [r7, #12]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	20001dcc 	.word	0x20001dcc

0800bad8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bad8:	b580      	push	{r7, lr}
 800bada:	b086      	sub	sp, #24
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bae6:	2300      	movs	r3, #0
 800bae8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	68ba      	ldr	r2, [r7, #8]
 800baee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d812      	bhi.n	800bb24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	1ad2      	subs	r2, r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	699b      	ldr	r3, [r3, #24]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d302      	bcc.n	800bb12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	617b      	str	r3, [r7, #20]
 800bb10:	e01b      	b.n	800bb4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb12:	4b10      	ldr	r3, [pc, #64]	@ (800bb54 <prvInsertTimerInActiveList+0x7c>)
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	3304      	adds	r3, #4
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	f7fe f95e 	bl	8009dde <vListInsert>
 800bb22:	e012      	b.n	800bb4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d206      	bcs.n	800bb3a <prvInsertTimerInActiveList+0x62>
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d302      	bcc.n	800bb3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb34:	2301      	movs	r3, #1
 800bb36:	617b      	str	r3, [r7, #20]
 800bb38:	e007      	b.n	800bb4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb3a:	4b07      	ldr	r3, [pc, #28]	@ (800bb58 <prvInsertTimerInActiveList+0x80>)
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	3304      	adds	r3, #4
 800bb42:	4619      	mov	r1, r3
 800bb44:	4610      	mov	r0, r2
 800bb46:	f7fe f94a 	bl	8009dde <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb4a:	697b      	ldr	r3, [r7, #20]
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20001dc0 	.word	0x20001dc0
 800bb58:	20001dbc 	.word	0x20001dbc

0800bb5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08e      	sub	sp, #56	@ 0x38
 800bb60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb62:	e0ce      	b.n	800bd02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	da19      	bge.n	800bb9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb6a:	1d3b      	adds	r3, r7, #4
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d10b      	bne.n	800bb8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7a:	f383 8811 	msr	BASEPRI, r3
 800bb7e:	f3bf 8f6f 	isb	sy
 800bb82:	f3bf 8f4f 	dsb	sy
 800bb86:	61fb      	str	r3, [r7, #28]
}
 800bb88:	bf00      	nop
 800bb8a:	bf00      	nop
 800bb8c:	e7fd      	b.n	800bb8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb94:	6850      	ldr	r0, [r2, #4]
 800bb96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb98:	6892      	ldr	r2, [r2, #8]
 800bb9a:	4611      	mov	r1, r2
 800bb9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f2c0 80ae 	blt.w	800bd02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d004      	beq.n	800bbbc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	f7fe f94a 	bl	8009e50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbbc:	463b      	mov	r3, r7
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	f7ff ff6a 	bl	800ba98 <prvSampleTimeNow>
 800bbc4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b09      	cmp	r3, #9
 800bbca:	f200 8097 	bhi.w	800bcfc <prvProcessReceivedCommands+0x1a0>
 800bbce:	a201      	add	r2, pc, #4	@ (adr r2, 800bbd4 <prvProcessReceivedCommands+0x78>)
 800bbd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd4:	0800bbfd 	.word	0x0800bbfd
 800bbd8:	0800bbfd 	.word	0x0800bbfd
 800bbdc:	0800bbfd 	.word	0x0800bbfd
 800bbe0:	0800bc73 	.word	0x0800bc73
 800bbe4:	0800bc87 	.word	0x0800bc87
 800bbe8:	0800bcd3 	.word	0x0800bcd3
 800bbec:	0800bbfd 	.word	0x0800bbfd
 800bbf0:	0800bbfd 	.word	0x0800bbfd
 800bbf4:	0800bc73 	.word	0x0800bc73
 800bbf8:	0800bc87 	.word	0x0800bc87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bbfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc02:	f043 0301 	orr.w	r3, r3, #1
 800bc06:	b2da      	uxtb	r2, r3
 800bc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	18d1      	adds	r1, r2, r3
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc1c:	f7ff ff5c 	bl	800bad8 <prvInsertTimerInActiveList>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d06c      	beq.n	800bd00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc28:	6a1b      	ldr	r3, [r3, #32]
 800bc2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc34:	f003 0304 	and.w	r3, r3, #4
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d061      	beq.n	800bd00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc3c:	68ba      	ldr	r2, [r7, #8]
 800bc3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	441a      	add	r2, r3
 800bc44:	2300      	movs	r3, #0
 800bc46:	9300      	str	r3, [sp, #0]
 800bc48:	2300      	movs	r3, #0
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bc4e:	f7ff fe01 	bl	800b854 <xTimerGenericCommand>
 800bc52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc54:	6a3b      	ldr	r3, [r7, #32]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d152      	bne.n	800bd00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800bc5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc5e:	f383 8811 	msr	BASEPRI, r3
 800bc62:	f3bf 8f6f 	isb	sy
 800bc66:	f3bf 8f4f 	dsb	sy
 800bc6a:	61bb      	str	r3, [r7, #24]
}
 800bc6c:	bf00      	nop
 800bc6e:	bf00      	nop
 800bc70:	e7fd      	b.n	800bc6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc78:	f023 0301 	bic.w	r3, r3, #1
 800bc7c:	b2da      	uxtb	r2, r3
 800bc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bc84:	e03d      	b.n	800bd02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bc8c:	f043 0301 	orr.w	r3, r3, #1
 800bc90:	b2da      	uxtb	r2, r3
 800bc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bc9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca0:	699b      	ldr	r3, [r3, #24]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d10b      	bne.n	800bcbe <prvProcessReceivedCommands+0x162>
	__asm volatile
 800bca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcaa:	f383 8811 	msr	BASEPRI, r3
 800bcae:	f3bf 8f6f 	isb	sy
 800bcb2:	f3bf 8f4f 	dsb	sy
 800bcb6:	617b      	str	r3, [r7, #20]
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	e7fd      	b.n	800bcba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bcbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcc0:	699a      	ldr	r2, [r3, #24]
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc4:	18d1      	adds	r1, r2, r3
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bcca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bccc:	f7ff ff04 	bl	800bad8 <prvInsertTimerInActiveList>
					break;
 800bcd0:	e017      	b.n	800bd02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcd8:	f003 0302 	and.w	r3, r3, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d103      	bne.n	800bce8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800bce0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bce2:	f000 fbe9 	bl	800c4b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bce6:	e00c      	b.n	800bd02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bcee:	f023 0301 	bic.w	r3, r3, #1
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcf6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800bcfa:	e002      	b.n	800bd02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800bcfc:	bf00      	nop
 800bcfe:	e000      	b.n	800bd02 <prvProcessReceivedCommands+0x1a6>
					break;
 800bd00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bd02:	4b08      	ldr	r3, [pc, #32]	@ (800bd24 <prvProcessReceivedCommands+0x1c8>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	1d39      	adds	r1, r7, #4
 800bd08:	2200      	movs	r2, #0
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fe fbfc 	bl	800a508 <xQueueReceive>
 800bd10:	4603      	mov	r3, r0
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f47f af26 	bne.w	800bb64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bd18:	bf00      	nop
 800bd1a:	bf00      	nop
 800bd1c:	3730      	adds	r7, #48	@ 0x30
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20001dc4 	.word	0x20001dc4

0800bd28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b088      	sub	sp, #32
 800bd2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd2e:	e049      	b.n	800bdc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd30:	4b2e      	ldr	r3, [pc, #184]	@ (800bdec <prvSwitchTimerLists+0xc4>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd3a:	4b2c      	ldr	r3, [pc, #176]	@ (800bdec <prvSwitchTimerLists+0xc4>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	68db      	ldr	r3, [r3, #12]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	3304      	adds	r3, #4
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f7fe f881 	bl	8009e50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6a1b      	ldr	r3, [r3, #32]
 800bd52:	68f8      	ldr	r0, [r7, #12]
 800bd54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd5c:	f003 0304 	and.w	r3, r3, #4
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d02f      	beq.n	800bdc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	693a      	ldr	r2, [r7, #16]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd6e:	68ba      	ldr	r2, [r7, #8]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d90e      	bls.n	800bd94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	68ba      	ldr	r2, [r7, #8]
 800bd7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd82:	4b1a      	ldr	r3, [pc, #104]	@ (800bdec <prvSwitchTimerLists+0xc4>)
 800bd84:	681a      	ldr	r2, [r3, #0]
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	3304      	adds	r3, #4
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4610      	mov	r0, r2
 800bd8e:	f7fe f826 	bl	8009dde <vListInsert>
 800bd92:	e017      	b.n	800bdc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd94:	2300      	movs	r3, #0
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	2300      	movs	r3, #0
 800bd9a:	693a      	ldr	r2, [r7, #16]
 800bd9c:	2100      	movs	r1, #0
 800bd9e:	68f8      	ldr	r0, [r7, #12]
 800bda0:	f7ff fd58 	bl	800b854 <xTimerGenericCommand>
 800bda4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10b      	bne.n	800bdc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	603b      	str	r3, [r7, #0]
}
 800bdbe:	bf00      	nop
 800bdc0:	bf00      	nop
 800bdc2:	e7fd      	b.n	800bdc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdc4:	4b09      	ldr	r3, [pc, #36]	@ (800bdec <prvSwitchTimerLists+0xc4>)
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d1b0      	bne.n	800bd30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdce:	4b07      	ldr	r3, [pc, #28]	@ (800bdec <prvSwitchTimerLists+0xc4>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdd4:	4b06      	ldr	r3, [pc, #24]	@ (800bdf0 <prvSwitchTimerLists+0xc8>)
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	4a04      	ldr	r2, [pc, #16]	@ (800bdec <prvSwitchTimerLists+0xc4>)
 800bdda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bddc:	4a04      	ldr	r2, [pc, #16]	@ (800bdf0 <prvSwitchTimerLists+0xc8>)
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	6013      	str	r3, [r2, #0]
}
 800bde2:	bf00      	nop
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}
 800bdea:	bf00      	nop
 800bdec:	20001dbc 	.word	0x20001dbc
 800bdf0:	20001dc0 	.word	0x20001dc0

0800bdf4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdfa:	f000 f96d 	bl	800c0d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bdfe:	4b15      	ldr	r3, [pc, #84]	@ (800be54 <prvCheckForValidListAndQueue+0x60>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d120      	bne.n	800be48 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800be06:	4814      	ldr	r0, [pc, #80]	@ (800be58 <prvCheckForValidListAndQueue+0x64>)
 800be08:	f7fd ff98 	bl	8009d3c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be0c:	4813      	ldr	r0, [pc, #76]	@ (800be5c <prvCheckForValidListAndQueue+0x68>)
 800be0e:	f7fd ff95 	bl	8009d3c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be12:	4b13      	ldr	r3, [pc, #76]	@ (800be60 <prvCheckForValidListAndQueue+0x6c>)
 800be14:	4a10      	ldr	r2, [pc, #64]	@ (800be58 <prvCheckForValidListAndQueue+0x64>)
 800be16:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be18:	4b12      	ldr	r3, [pc, #72]	@ (800be64 <prvCheckForValidListAndQueue+0x70>)
 800be1a:	4a10      	ldr	r2, [pc, #64]	@ (800be5c <prvCheckForValidListAndQueue+0x68>)
 800be1c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be1e:	2300      	movs	r3, #0
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	4b11      	ldr	r3, [pc, #68]	@ (800be68 <prvCheckForValidListAndQueue+0x74>)
 800be24:	4a11      	ldr	r2, [pc, #68]	@ (800be6c <prvCheckForValidListAndQueue+0x78>)
 800be26:	2110      	movs	r1, #16
 800be28:	200a      	movs	r0, #10
 800be2a:	f7fe f8a5 	bl	8009f78 <xQueueGenericCreateStatic>
 800be2e:	4603      	mov	r3, r0
 800be30:	4a08      	ldr	r2, [pc, #32]	@ (800be54 <prvCheckForValidListAndQueue+0x60>)
 800be32:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be34:	4b07      	ldr	r3, [pc, #28]	@ (800be54 <prvCheckForValidListAndQueue+0x60>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d005      	beq.n	800be48 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be3c:	4b05      	ldr	r3, [pc, #20]	@ (800be54 <prvCheckForValidListAndQueue+0x60>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	490b      	ldr	r1, [pc, #44]	@ (800be70 <prvCheckForValidListAndQueue+0x7c>)
 800be42:	4618      	mov	r0, r3
 800be44:	f7fe fd52 	bl	800a8ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be48:	f000 f978 	bl	800c13c <vPortExitCritical>
}
 800be4c:	bf00      	nop
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}
 800be52:	bf00      	nop
 800be54:	20001dc4 	.word	0x20001dc4
 800be58:	20001d94 	.word	0x20001d94
 800be5c:	20001da8 	.word	0x20001da8
 800be60:	20001dbc 	.word	0x20001dbc
 800be64:	20001dc0 	.word	0x20001dc0
 800be68:	20001e70 	.word	0x20001e70
 800be6c:	20001dd0 	.word	0x20001dd0
 800be70:	0800d734 	.word	0x0800d734

0800be74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be74:	b480      	push	{r7}
 800be76:	b085      	sub	sp, #20
 800be78:	af00      	add	r7, sp, #0
 800be7a:	60f8      	str	r0, [r7, #12]
 800be7c:	60b9      	str	r1, [r7, #8]
 800be7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	3b04      	subs	r3, #4
 800be84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	3b04      	subs	r3, #4
 800be92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	f023 0201 	bic.w	r2, r3, #1
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3b04      	subs	r3, #4
 800bea2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bea4:	4a0c      	ldr	r2, [pc, #48]	@ (800bed8 <pxPortInitialiseStack+0x64>)
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3b14      	subs	r3, #20
 800beae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	3b04      	subs	r3, #4
 800beba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	f06f 0202 	mvn.w	r2, #2
 800bec2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	3b20      	subs	r3, #32
 800bec8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800beca:	68fb      	ldr	r3, [r7, #12]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr
 800bed8:	0800bedd 	.word	0x0800bedd

0800bedc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bee2:	2300      	movs	r3, #0
 800bee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bee6:	4b13      	ldr	r3, [pc, #76]	@ (800bf34 <prvTaskExitError+0x58>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800beee:	d00b      	beq.n	800bf08 <prvTaskExitError+0x2c>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	60fb      	str	r3, [r7, #12]
}
 800bf02:	bf00      	nop
 800bf04:	bf00      	nop
 800bf06:	e7fd      	b.n	800bf04 <prvTaskExitError+0x28>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	60bb      	str	r3, [r7, #8]
}
 800bf1a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf1c:	bf00      	nop
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d0fc      	beq.n	800bf1e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf24:	bf00      	nop
 800bf26:	bf00      	nop
 800bf28:	3714      	adds	r7, #20
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr
 800bf32:	bf00      	nop
 800bf34:	20000030 	.word	0x20000030
	...

0800bf40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf40:	4b07      	ldr	r3, [pc, #28]	@ (800bf60 <pxCurrentTCBConst2>)
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	6808      	ldr	r0, [r1, #0]
 800bf46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	f380 8809 	msr	PSP, r0
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f04f 0000 	mov.w	r0, #0
 800bf56:	f380 8811 	msr	BASEPRI, r0
 800bf5a:	4770      	bx	lr
 800bf5c:	f3af 8000 	nop.w

0800bf60 <pxCurrentTCBConst2>:
 800bf60:	20001894 	.word	0x20001894
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop

0800bf68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf68:	4808      	ldr	r0, [pc, #32]	@ (800bf8c <prvPortStartFirstTask+0x24>)
 800bf6a:	6800      	ldr	r0, [r0, #0]
 800bf6c:	6800      	ldr	r0, [r0, #0]
 800bf6e:	f380 8808 	msr	MSP, r0
 800bf72:	f04f 0000 	mov.w	r0, #0
 800bf76:	f380 8814 	msr	CONTROL, r0
 800bf7a:	b662      	cpsie	i
 800bf7c:	b661      	cpsie	f
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	df00      	svc	0
 800bf88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf8a:	bf00      	nop
 800bf8c:	e000ed08 	.word	0xe000ed08

0800bf90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf96:	4b47      	ldr	r3, [pc, #284]	@ (800c0b4 <xPortStartScheduler+0x124>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a47      	ldr	r2, [pc, #284]	@ (800c0b8 <xPortStartScheduler+0x128>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d10b      	bne.n	800bfb8 <xPortStartScheduler+0x28>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	613b      	str	r3, [r7, #16]
}
 800bfb2:	bf00      	nop
 800bfb4:	bf00      	nop
 800bfb6:	e7fd      	b.n	800bfb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bfb8:	4b3e      	ldr	r3, [pc, #248]	@ (800c0b4 <xPortStartScheduler+0x124>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a3f      	ldr	r2, [pc, #252]	@ (800c0bc <xPortStartScheduler+0x12c>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d10b      	bne.n	800bfda <xPortStartScheduler+0x4a>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	60fb      	str	r3, [r7, #12]
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop
 800bfd8:	e7fd      	b.n	800bfd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfda:	4b39      	ldr	r3, [pc, #228]	@ (800c0c0 <xPortStartScheduler+0x130>)
 800bfdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	22ff      	movs	r2, #255	@ 0xff
 800bfea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bff4:	78fb      	ldrb	r3, [r7, #3]
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	4b31      	ldr	r3, [pc, #196]	@ (800c0c4 <xPortStartScheduler+0x134>)
 800c000:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c002:	4b31      	ldr	r3, [pc, #196]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c004:	2207      	movs	r2, #7
 800c006:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c008:	e009      	b.n	800c01e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c00a:	4b2f      	ldr	r3, [pc, #188]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3b01      	subs	r3, #1
 800c010:	4a2d      	ldr	r2, [pc, #180]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c012:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c014:	78fb      	ldrb	r3, [r7, #3]
 800c016:	b2db      	uxtb	r3, r3
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	b2db      	uxtb	r3, r3
 800c022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c026:	2b80      	cmp	r3, #128	@ 0x80
 800c028:	d0ef      	beq.n	800c00a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c02a:	4b27      	ldr	r3, [pc, #156]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f1c3 0307 	rsb	r3, r3, #7
 800c032:	2b04      	cmp	r3, #4
 800c034:	d00b      	beq.n	800c04e <xPortStartScheduler+0xbe>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	60bb      	str	r3, [r7, #8]
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	e7fd      	b.n	800c04a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c04e:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	021b      	lsls	r3, r3, #8
 800c054:	4a1c      	ldr	r2, [pc, #112]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c058:	4b1b      	ldr	r3, [pc, #108]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c060:	4a19      	ldr	r2, [pc, #100]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	b2da      	uxtb	r2, r3
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c06c:	4b17      	ldr	r3, [pc, #92]	@ (800c0cc <xPortStartScheduler+0x13c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a16      	ldr	r2, [pc, #88]	@ (800c0cc <xPortStartScheduler+0x13c>)
 800c072:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c078:	4b14      	ldr	r3, [pc, #80]	@ (800c0cc <xPortStartScheduler+0x13c>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a13      	ldr	r2, [pc, #76]	@ (800c0cc <xPortStartScheduler+0x13c>)
 800c07e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c084:	f000 f8da 	bl	800c23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c088:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <xPortStartScheduler+0x140>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c08e:	f000 f8f9 	bl	800c284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c092:	4b10      	ldr	r3, [pc, #64]	@ (800c0d4 <xPortStartScheduler+0x144>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a0f      	ldr	r2, [pc, #60]	@ (800c0d4 <xPortStartScheduler+0x144>)
 800c098:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c09c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c09e:	f7ff ff63 	bl	800bf68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0a2:	f7ff f83b 	bl	800b11c <vTaskSwitchContext>
	prvTaskExitError();
 800c0a6:	f7ff ff19 	bl	800bedc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	e000ed00 	.word	0xe000ed00
 800c0b8:	410fc271 	.word	0x410fc271
 800c0bc:	410fc270 	.word	0x410fc270
 800c0c0:	e000e400 	.word	0xe000e400
 800c0c4:	20001ec0 	.word	0x20001ec0
 800c0c8:	20001ec4 	.word	0x20001ec4
 800c0cc:	e000ed20 	.word	0xe000ed20
 800c0d0:	20000030 	.word	0x20000030
 800c0d4:	e000ef34 	.word	0xe000ef34

0800c0d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	607b      	str	r3, [r7, #4]
}
 800c0f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0f2:	4b10      	ldr	r3, [pc, #64]	@ (800c134 <vPortEnterCritical+0x5c>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	4a0e      	ldr	r2, [pc, #56]	@ (800c134 <vPortEnterCritical+0x5c>)
 800c0fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c134 <vPortEnterCritical+0x5c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d110      	bne.n	800c126 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c104:	4b0c      	ldr	r3, [pc, #48]	@ (800c138 <vPortEnterCritical+0x60>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00b      	beq.n	800c126 <vPortEnterCritical+0x4e>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	603b      	str	r3, [r7, #0]
}
 800c120:	bf00      	nop
 800c122:	bf00      	nop
 800c124:	e7fd      	b.n	800c122 <vPortEnterCritical+0x4a>
	}
}
 800c126:	bf00      	nop
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	20000030 	.word	0x20000030
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c142:	4b12      	ldr	r3, [pc, #72]	@ (800c18c <vPortExitCritical+0x50>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10b      	bne.n	800c162 <vPortExitCritical+0x26>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	607b      	str	r3, [r7, #4]
}
 800c15c:	bf00      	nop
 800c15e:	bf00      	nop
 800c160:	e7fd      	b.n	800c15e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c162:	4b0a      	ldr	r3, [pc, #40]	@ (800c18c <vPortExitCritical+0x50>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3b01      	subs	r3, #1
 800c168:	4a08      	ldr	r2, [pc, #32]	@ (800c18c <vPortExitCritical+0x50>)
 800c16a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c16c:	4b07      	ldr	r3, [pc, #28]	@ (800c18c <vPortExitCritical+0x50>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d105      	bne.n	800c180 <vPortExitCritical+0x44>
 800c174:	2300      	movs	r3, #0
 800c176:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	f383 8811 	msr	BASEPRI, r3
}
 800c17e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	20000030 	.word	0x20000030

0800c190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c190:	f3ef 8009 	mrs	r0, PSP
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	4b15      	ldr	r3, [pc, #84]	@ (800c1f0 <pxCurrentTCBConst>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	f01e 0f10 	tst.w	lr, #16
 800c1a0:	bf08      	it	eq
 800c1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1aa:	6010      	str	r0, [r2, #0]
 800c1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c1b4:	f380 8811 	msr	BASEPRI, r0
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f7fe ffac 	bl	800b11c <vTaskSwitchContext>
 800c1c4:	f04f 0000 	mov.w	r0, #0
 800c1c8:	f380 8811 	msr	BASEPRI, r0
 800c1cc:	bc09      	pop	{r0, r3}
 800c1ce:	6819      	ldr	r1, [r3, #0]
 800c1d0:	6808      	ldr	r0, [r1, #0]
 800c1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d6:	f01e 0f10 	tst.w	lr, #16
 800c1da:	bf08      	it	eq
 800c1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1e0:	f380 8809 	msr	PSP, r0
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	f3af 8000 	nop.w

0800c1f0 <pxCurrentTCBConst>:
 800c1f0:	20001894 	.word	0x20001894
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop

0800c1f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	607b      	str	r3, [r7, #4]
}
 800c210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c212:	f7fe fec9 	bl	800afa8 <xTaskIncrementTick>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c21c:	4b06      	ldr	r3, [pc, #24]	@ (800c238 <xPortSysTickHandler+0x40>)
 800c21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	2300      	movs	r3, #0
 800c226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	f383 8811 	msr	BASEPRI, r3
}
 800c22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	e000ed04 	.word	0xe000ed04

0800c23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c23c:	b480      	push	{r7}
 800c23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c240:	4b0b      	ldr	r3, [pc, #44]	@ (800c270 <vPortSetupTimerInterrupt+0x34>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c246:	4b0b      	ldr	r3, [pc, #44]	@ (800c274 <vPortSetupTimerInterrupt+0x38>)
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <vPortSetupTimerInterrupt+0x3c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a0a      	ldr	r2, [pc, #40]	@ (800c27c <vPortSetupTimerInterrupt+0x40>)
 800c252:	fba2 2303 	umull	r2, r3, r2, r3
 800c256:	099b      	lsrs	r3, r3, #6
 800c258:	4a09      	ldr	r2, [pc, #36]	@ (800c280 <vPortSetupTimerInterrupt+0x44>)
 800c25a:	3b01      	subs	r3, #1
 800c25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c25e:	4b04      	ldr	r3, [pc, #16]	@ (800c270 <vPortSetupTimerInterrupt+0x34>)
 800c260:	2207      	movs	r2, #7
 800c262:	601a      	str	r2, [r3, #0]
}
 800c264:	bf00      	nop
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	e000e010 	.word	0xe000e010
 800c274:	e000e018 	.word	0xe000e018
 800c278:	20000010 	.word	0x20000010
 800c27c:	10624dd3 	.word	0x10624dd3
 800c280:	e000e014 	.word	0xe000e014

0800c284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c284:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c294 <vPortEnableVFP+0x10>
 800c288:	6801      	ldr	r1, [r0, #0]
 800c28a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c28e:	6001      	str	r1, [r0, #0]
 800c290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c292:	bf00      	nop
 800c294:	e000ed88 	.word	0xe000ed88

0800c298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c29e:	f3ef 8305 	mrs	r3, IPSR
 800c2a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b0f      	cmp	r3, #15
 800c2a8:	d915      	bls.n	800c2d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2aa:	4a18      	ldr	r2, [pc, #96]	@ (800c30c <vPortValidateInterruptPriority+0x74>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2b4:	4b16      	ldr	r3, [pc, #88]	@ (800c310 <vPortValidateInterruptPriority+0x78>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	7afa      	ldrb	r2, [r7, #11]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d20b      	bcs.n	800c2d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	607b      	str	r3, [r7, #4]
}
 800c2d0:	bf00      	nop
 800c2d2:	bf00      	nop
 800c2d4:	e7fd      	b.n	800c2d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c314 <vPortValidateInterruptPriority+0x7c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c2de:	4b0e      	ldr	r3, [pc, #56]	@ (800c318 <vPortValidateInterruptPriority+0x80>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d90b      	bls.n	800c2fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	603b      	str	r3, [r7, #0]
}
 800c2f8:	bf00      	nop
 800c2fa:	bf00      	nop
 800c2fc:	e7fd      	b.n	800c2fa <vPortValidateInterruptPriority+0x62>
	}
 800c2fe:	bf00      	nop
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	e000e3f0 	.word	0xe000e3f0
 800c310:	20001ec0 	.word	0x20001ec0
 800c314:	e000ed0c 	.word	0xe000ed0c
 800c318:	20001ec4 	.word	0x20001ec4

0800c31c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b08a      	sub	sp, #40	@ 0x28
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c324:	2300      	movs	r3, #0
 800c326:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c328:	f7fe fd82 	bl	800ae30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c32c:	4b5c      	ldr	r3, [pc, #368]	@ (800c4a0 <pvPortMalloc+0x184>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d101      	bne.n	800c338 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c334:	f000 f924 	bl	800c580 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c338:	4b5a      	ldr	r3, [pc, #360]	@ (800c4a4 <pvPortMalloc+0x188>)
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	4013      	ands	r3, r2
 800c340:	2b00      	cmp	r3, #0
 800c342:	f040 8095 	bne.w	800c470 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d01e      	beq.n	800c38a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c34c:	2208      	movs	r2, #8
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	4413      	add	r3, r2
 800c352:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d015      	beq.n	800c38a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f023 0307 	bic.w	r3, r3, #7
 800c364:	3308      	adds	r3, #8
 800c366:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f003 0307 	and.w	r3, r3, #7
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00b      	beq.n	800c38a <pvPortMalloc+0x6e>
	__asm volatile
 800c372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c376:	f383 8811 	msr	BASEPRI, r3
 800c37a:	f3bf 8f6f 	isb	sy
 800c37e:	f3bf 8f4f 	dsb	sy
 800c382:	617b      	str	r3, [r7, #20]
}
 800c384:	bf00      	nop
 800c386:	bf00      	nop
 800c388:	e7fd      	b.n	800c386 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d06f      	beq.n	800c470 <pvPortMalloc+0x154>
 800c390:	4b45      	ldr	r3, [pc, #276]	@ (800c4a8 <pvPortMalloc+0x18c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	429a      	cmp	r2, r3
 800c398:	d86a      	bhi.n	800c470 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c39a:	4b44      	ldr	r3, [pc, #272]	@ (800c4ac <pvPortMalloc+0x190>)
 800c39c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c39e:	4b43      	ldr	r3, [pc, #268]	@ (800c4ac <pvPortMalloc+0x190>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3a4:	e004      	b.n	800c3b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3b2:	685b      	ldr	r3, [r3, #4]
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	429a      	cmp	r2, r3
 800c3b8:	d903      	bls.n	800c3c2 <pvPortMalloc+0xa6>
 800c3ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1f1      	bne.n	800c3a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3c2:	4b37      	ldr	r3, [pc, #220]	@ (800c4a0 <pvPortMalloc+0x184>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3c8:	429a      	cmp	r2, r3
 800c3ca:	d051      	beq.n	800c470 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3cc:	6a3b      	ldr	r3, [r7, #32]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	2208      	movs	r2, #8
 800c3d2:	4413      	add	r3, r2
 800c3d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d8:	681a      	ldr	r2, [r3, #0]
 800c3da:	6a3b      	ldr	r3, [r7, #32]
 800c3dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3e0:	685a      	ldr	r2, [r3, #4]
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	1ad2      	subs	r2, r2, r3
 800c3e6:	2308      	movs	r3, #8
 800c3e8:	005b      	lsls	r3, r3, #1
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d920      	bls.n	800c430 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	f003 0307 	and.w	r3, r3, #7
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <pvPortMalloc+0xfc>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	613b      	str	r3, [r7, #16]
}
 800c412:	bf00      	nop
 800c414:	bf00      	nop
 800c416:	e7fd      	b.n	800c414 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	685a      	ldr	r2, [r3, #4]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	1ad2      	subs	r2, r2, r3
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c42a:	69b8      	ldr	r0, [r7, #24]
 800c42c:	f000 f90a 	bl	800c644 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c430:	4b1d      	ldr	r3, [pc, #116]	@ (800c4a8 <pvPortMalloc+0x18c>)
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	1ad3      	subs	r3, r2, r3
 800c43a:	4a1b      	ldr	r2, [pc, #108]	@ (800c4a8 <pvPortMalloc+0x18c>)
 800c43c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c43e:	4b1a      	ldr	r3, [pc, #104]	@ (800c4a8 <pvPortMalloc+0x18c>)
 800c440:	681a      	ldr	r2, [r3, #0]
 800c442:	4b1b      	ldr	r3, [pc, #108]	@ (800c4b0 <pvPortMalloc+0x194>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	429a      	cmp	r2, r3
 800c448:	d203      	bcs.n	800c452 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c44a:	4b17      	ldr	r3, [pc, #92]	@ (800c4a8 <pvPortMalloc+0x18c>)
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	4a18      	ldr	r2, [pc, #96]	@ (800c4b0 <pvPortMalloc+0x194>)
 800c450:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c454:	685a      	ldr	r2, [r3, #4]
 800c456:	4b13      	ldr	r3, [pc, #76]	@ (800c4a4 <pvPortMalloc+0x188>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	431a      	orrs	r2, r3
 800c45c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c462:	2200      	movs	r2, #0
 800c464:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c466:	4b13      	ldr	r3, [pc, #76]	@ (800c4b4 <pvPortMalloc+0x198>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3301      	adds	r3, #1
 800c46c:	4a11      	ldr	r2, [pc, #68]	@ (800c4b4 <pvPortMalloc+0x198>)
 800c46e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c470:	f7fe fcec 	bl	800ae4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c474:	69fb      	ldr	r3, [r7, #28]
 800c476:	f003 0307 	and.w	r3, r3, #7
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <pvPortMalloc+0x17a>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	60fb      	str	r3, [r7, #12]
}
 800c490:	bf00      	nop
 800c492:	bf00      	nop
 800c494:	e7fd      	b.n	800c492 <pvPortMalloc+0x176>
	return pvReturn;
 800c496:	69fb      	ldr	r3, [r7, #28]
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3728      	adds	r7, #40	@ 0x28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}
 800c4a0:	20002a88 	.word	0x20002a88
 800c4a4:	20002a9c 	.word	0x20002a9c
 800c4a8:	20002a8c 	.word	0x20002a8c
 800c4ac:	20002a80 	.word	0x20002a80
 800c4b0:	20002a90 	.word	0x20002a90
 800c4b4:	20002a94 	.word	0x20002a94

0800c4b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b086      	sub	sp, #24
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d04f      	beq.n	800c56a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4ca:	2308      	movs	r3, #8
 800c4cc:	425b      	negs	r3, r3
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	685a      	ldr	r2, [r3, #4]
 800c4dc:	4b25      	ldr	r3, [pc, #148]	@ (800c574 <vPortFree+0xbc>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4013      	ands	r3, r2
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d10b      	bne.n	800c4fe <vPortFree+0x46>
	__asm volatile
 800c4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4ea:	f383 8811 	msr	BASEPRI, r3
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f3bf 8f4f 	dsb	sy
 800c4f6:	60fb      	str	r3, [r7, #12]
}
 800c4f8:	bf00      	nop
 800c4fa:	bf00      	nop
 800c4fc:	e7fd      	b.n	800c4fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4fe:	693b      	ldr	r3, [r7, #16]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d00b      	beq.n	800c51e <vPortFree+0x66>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	60bb      	str	r3, [r7, #8]
}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	e7fd      	b.n	800c51a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c51e:	693b      	ldr	r3, [r7, #16]
 800c520:	685a      	ldr	r2, [r3, #4]
 800c522:	4b14      	ldr	r3, [pc, #80]	@ (800c574 <vPortFree+0xbc>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	4013      	ands	r3, r2
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d01e      	beq.n	800c56a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d11a      	bne.n	800c56a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	685a      	ldr	r2, [r3, #4]
 800c538:	4b0e      	ldr	r3, [pc, #56]	@ (800c574 <vPortFree+0xbc>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	43db      	mvns	r3, r3
 800c53e:	401a      	ands	r2, r3
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c544:	f7fe fc74 	bl	800ae30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	685a      	ldr	r2, [r3, #4]
 800c54c:	4b0a      	ldr	r3, [pc, #40]	@ (800c578 <vPortFree+0xc0>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4413      	add	r3, r2
 800c552:	4a09      	ldr	r2, [pc, #36]	@ (800c578 <vPortFree+0xc0>)
 800c554:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c556:	6938      	ldr	r0, [r7, #16]
 800c558:	f000 f874 	bl	800c644 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c55c:	4b07      	ldr	r3, [pc, #28]	@ (800c57c <vPortFree+0xc4>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	3301      	adds	r3, #1
 800c562:	4a06      	ldr	r2, [pc, #24]	@ (800c57c <vPortFree+0xc4>)
 800c564:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c566:	f7fe fc71 	bl	800ae4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c56a:	bf00      	nop
 800c56c:	3718      	adds	r7, #24
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	20002a9c 	.word	0x20002a9c
 800c578:	20002a8c 	.word	0x20002a8c
 800c57c:	20002a98 	.word	0x20002a98

0800c580 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c580:	b480      	push	{r7}
 800c582:	b085      	sub	sp, #20
 800c584:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c586:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800c58a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c58c:	4b27      	ldr	r3, [pc, #156]	@ (800c62c <prvHeapInit+0xac>)
 800c58e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f003 0307 	and.w	r3, r3, #7
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00c      	beq.n	800c5b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	3307      	adds	r3, #7
 800c59e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f023 0307 	bic.w	r3, r3, #7
 800c5a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	1ad3      	subs	r3, r2, r3
 800c5ae:	4a1f      	ldr	r2, [pc, #124]	@ (800c62c <prvHeapInit+0xac>)
 800c5b0:	4413      	add	r3, r2
 800c5b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c5b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c630 <prvHeapInit+0xb0>)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5be:	4b1c      	ldr	r3, [pc, #112]	@ (800c630 <prvHeapInit+0xb0>)
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	68ba      	ldr	r2, [r7, #8]
 800c5c8:	4413      	add	r3, r2
 800c5ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5cc:	2208      	movs	r2, #8
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	1a9b      	subs	r3, r3, r2
 800c5d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f023 0307 	bic.w	r3, r3, #7
 800c5da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	4a15      	ldr	r2, [pc, #84]	@ (800c634 <prvHeapInit+0xb4>)
 800c5e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5e2:	4b14      	ldr	r3, [pc, #80]	@ (800c634 <prvHeapInit+0xb4>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5ea:	4b12      	ldr	r3, [pc, #72]	@ (800c634 <prvHeapInit+0xb4>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	1ad2      	subs	r2, r2, r3
 800c5fc:	683b      	ldr	r3, [r7, #0]
 800c5fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c600:	4b0c      	ldr	r3, [pc, #48]	@ (800c634 <prvHeapInit+0xb4>)
 800c602:	681a      	ldr	r2, [r3, #0]
 800c604:	683b      	ldr	r3, [r7, #0]
 800c606:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	4a0a      	ldr	r2, [pc, #40]	@ (800c638 <prvHeapInit+0xb8>)
 800c60e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	4a09      	ldr	r2, [pc, #36]	@ (800c63c <prvHeapInit+0xbc>)
 800c616:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c618:	4b09      	ldr	r3, [pc, #36]	@ (800c640 <prvHeapInit+0xc0>)
 800c61a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c61e:	601a      	str	r2, [r3, #0]
}
 800c620:	bf00      	nop
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr
 800c62c:	20001ec8 	.word	0x20001ec8
 800c630:	20002a80 	.word	0x20002a80
 800c634:	20002a88 	.word	0x20002a88
 800c638:	20002a90 	.word	0x20002a90
 800c63c:	20002a8c 	.word	0x20002a8c
 800c640:	20002a9c 	.word	0x20002a9c

0800c644 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c64c:	4b28      	ldr	r3, [pc, #160]	@ (800c6f0 <prvInsertBlockIntoFreeList+0xac>)
 800c64e:	60fb      	str	r3, [r7, #12]
 800c650:	e002      	b.n	800c658 <prvInsertBlockIntoFreeList+0x14>
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	60fb      	str	r3, [r7, #12]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	687a      	ldr	r2, [r7, #4]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d8f7      	bhi.n	800c652 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	685b      	ldr	r3, [r3, #4]
 800c66a:	68ba      	ldr	r2, [r7, #8]
 800c66c:	4413      	add	r3, r2
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	429a      	cmp	r2, r3
 800c672:	d108      	bne.n	800c686 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	685a      	ldr	r2, [r3, #4]
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	685b      	ldr	r3, [r3, #4]
 800c67c:	441a      	add	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	441a      	add	r2, r3
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	429a      	cmp	r2, r3
 800c698:	d118      	bne.n	800c6cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681a      	ldr	r2, [r3, #0]
 800c69e:	4b15      	ldr	r3, [pc, #84]	@ (800c6f4 <prvInsertBlockIntoFreeList+0xb0>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d00d      	beq.n	800c6c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685a      	ldr	r2, [r3, #4]
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	441a      	add	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	601a      	str	r2, [r3, #0]
 800c6c0:	e008      	b.n	800c6d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c6f4 <prvInsertBlockIntoFreeList+0xb0>)
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	601a      	str	r2, [r3, #0]
 800c6ca:	e003      	b.n	800c6d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681a      	ldr	r2, [r3, #0]
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6d4:	68fa      	ldr	r2, [r7, #12]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d002      	beq.n	800c6e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6e2:	bf00      	nop
 800c6e4:	3714      	adds	r7, #20
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ec:	4770      	bx	lr
 800c6ee:	bf00      	nop
 800c6f0:	20002a80 	.word	0x20002a80
 800c6f4:	20002a88 	.word	0x20002a88

0800c6f8 <srand>:
 800c6f8:	b538      	push	{r3, r4, r5, lr}
 800c6fa:	4b10      	ldr	r3, [pc, #64]	@ (800c73c <srand+0x44>)
 800c6fc:	681d      	ldr	r5, [r3, #0]
 800c6fe:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c700:	4604      	mov	r4, r0
 800c702:	b9b3      	cbnz	r3, 800c732 <srand+0x3a>
 800c704:	2018      	movs	r0, #24
 800c706:	f000 f949 	bl	800c99c <malloc>
 800c70a:	4602      	mov	r2, r0
 800c70c:	6328      	str	r0, [r5, #48]	@ 0x30
 800c70e:	b920      	cbnz	r0, 800c71a <srand+0x22>
 800c710:	4b0b      	ldr	r3, [pc, #44]	@ (800c740 <srand+0x48>)
 800c712:	480c      	ldr	r0, [pc, #48]	@ (800c744 <srand+0x4c>)
 800c714:	2146      	movs	r1, #70	@ 0x46
 800c716:	f000 f923 	bl	800c960 <__assert_func>
 800c71a:	490b      	ldr	r1, [pc, #44]	@ (800c748 <srand+0x50>)
 800c71c:	4b0b      	ldr	r3, [pc, #44]	@ (800c74c <srand+0x54>)
 800c71e:	e9c0 1300 	strd	r1, r3, [r0]
 800c722:	4b0b      	ldr	r3, [pc, #44]	@ (800c750 <srand+0x58>)
 800c724:	6083      	str	r3, [r0, #8]
 800c726:	230b      	movs	r3, #11
 800c728:	8183      	strh	r3, [r0, #12]
 800c72a:	2100      	movs	r1, #0
 800c72c:	2001      	movs	r0, #1
 800c72e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c732:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 800c734:	2200      	movs	r2, #0
 800c736:	611c      	str	r4, [r3, #16]
 800c738:	615a      	str	r2, [r3, #20]
 800c73a:	bd38      	pop	{r3, r4, r5, pc}
 800c73c:	20000040 	.word	0x20000040
 800c740:	0800d7f0 	.word	0x0800d7f0
 800c744:	0800d807 	.word	0x0800d807
 800c748:	abcd330e 	.word	0xabcd330e
 800c74c:	e66d1234 	.word	0xe66d1234
 800c750:	0005deec 	.word	0x0005deec

0800c754 <std>:
 800c754:	2300      	movs	r3, #0
 800c756:	b510      	push	{r4, lr}
 800c758:	4604      	mov	r4, r0
 800c75a:	e9c0 3300 	strd	r3, r3, [r0]
 800c75e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c762:	6083      	str	r3, [r0, #8]
 800c764:	8181      	strh	r1, [r0, #12]
 800c766:	6643      	str	r3, [r0, #100]	@ 0x64
 800c768:	81c2      	strh	r2, [r0, #14]
 800c76a:	6183      	str	r3, [r0, #24]
 800c76c:	4619      	mov	r1, r3
 800c76e:	2208      	movs	r2, #8
 800c770:	305c      	adds	r0, #92	@ 0x5c
 800c772:	f000 f8b1 	bl	800c8d8 <memset>
 800c776:	4b0d      	ldr	r3, [pc, #52]	@ (800c7ac <std+0x58>)
 800c778:	6263      	str	r3, [r4, #36]	@ 0x24
 800c77a:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b0 <std+0x5c>)
 800c77c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c77e:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b4 <std+0x60>)
 800c780:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c782:	4b0d      	ldr	r3, [pc, #52]	@ (800c7b8 <std+0x64>)
 800c784:	6323      	str	r3, [r4, #48]	@ 0x30
 800c786:	4b0d      	ldr	r3, [pc, #52]	@ (800c7bc <std+0x68>)
 800c788:	6224      	str	r4, [r4, #32]
 800c78a:	429c      	cmp	r4, r3
 800c78c:	d006      	beq.n	800c79c <std+0x48>
 800c78e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c792:	4294      	cmp	r4, r2
 800c794:	d002      	beq.n	800c79c <std+0x48>
 800c796:	33d0      	adds	r3, #208	@ 0xd0
 800c798:	429c      	cmp	r4, r3
 800c79a:	d105      	bne.n	800c7a8 <std+0x54>
 800c79c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7a4:	f000 b8ca 	b.w	800c93c <__retarget_lock_init_recursive>
 800c7a8:	bd10      	pop	{r4, pc}
 800c7aa:	bf00      	nop
 800c7ac:	0800cc61 	.word	0x0800cc61
 800c7b0:	0800cc83 	.word	0x0800cc83
 800c7b4:	0800ccbb 	.word	0x0800ccbb
 800c7b8:	0800ccdf 	.word	0x0800ccdf
 800c7bc:	20002aa0 	.word	0x20002aa0

0800c7c0 <stdio_exit_handler>:
 800c7c0:	4a02      	ldr	r2, [pc, #8]	@ (800c7cc <stdio_exit_handler+0xc>)
 800c7c2:	4903      	ldr	r1, [pc, #12]	@ (800c7d0 <stdio_exit_handler+0x10>)
 800c7c4:	4803      	ldr	r0, [pc, #12]	@ (800c7d4 <stdio_exit_handler+0x14>)
 800c7c6:	f000 b869 	b.w	800c89c <_fwalk_sglue>
 800c7ca:	bf00      	nop
 800c7cc:	20000034 	.word	0x20000034
 800c7d0:	0800cbf9 	.word	0x0800cbf9
 800c7d4:	20000044 	.word	0x20000044

0800c7d8 <cleanup_stdio>:
 800c7d8:	6841      	ldr	r1, [r0, #4]
 800c7da:	4b0c      	ldr	r3, [pc, #48]	@ (800c80c <cleanup_stdio+0x34>)
 800c7dc:	4299      	cmp	r1, r3
 800c7de:	b510      	push	{r4, lr}
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	d001      	beq.n	800c7e8 <cleanup_stdio+0x10>
 800c7e4:	f000 fa08 	bl	800cbf8 <_fflush_r>
 800c7e8:	68a1      	ldr	r1, [r4, #8]
 800c7ea:	4b09      	ldr	r3, [pc, #36]	@ (800c810 <cleanup_stdio+0x38>)
 800c7ec:	4299      	cmp	r1, r3
 800c7ee:	d002      	beq.n	800c7f6 <cleanup_stdio+0x1e>
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fa01 	bl	800cbf8 <_fflush_r>
 800c7f6:	68e1      	ldr	r1, [r4, #12]
 800c7f8:	4b06      	ldr	r3, [pc, #24]	@ (800c814 <cleanup_stdio+0x3c>)
 800c7fa:	4299      	cmp	r1, r3
 800c7fc:	d004      	beq.n	800c808 <cleanup_stdio+0x30>
 800c7fe:	4620      	mov	r0, r4
 800c800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c804:	f000 b9f8 	b.w	800cbf8 <_fflush_r>
 800c808:	bd10      	pop	{r4, pc}
 800c80a:	bf00      	nop
 800c80c:	20002aa0 	.word	0x20002aa0
 800c810:	20002b08 	.word	0x20002b08
 800c814:	20002b70 	.word	0x20002b70

0800c818 <global_stdio_init.part.0>:
 800c818:	b510      	push	{r4, lr}
 800c81a:	4b0b      	ldr	r3, [pc, #44]	@ (800c848 <global_stdio_init.part.0+0x30>)
 800c81c:	4c0b      	ldr	r4, [pc, #44]	@ (800c84c <global_stdio_init.part.0+0x34>)
 800c81e:	4a0c      	ldr	r2, [pc, #48]	@ (800c850 <global_stdio_init.part.0+0x38>)
 800c820:	601a      	str	r2, [r3, #0]
 800c822:	4620      	mov	r0, r4
 800c824:	2200      	movs	r2, #0
 800c826:	2104      	movs	r1, #4
 800c828:	f7ff ff94 	bl	800c754 <std>
 800c82c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c830:	2201      	movs	r2, #1
 800c832:	2109      	movs	r1, #9
 800c834:	f7ff ff8e 	bl	800c754 <std>
 800c838:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c83c:	2202      	movs	r2, #2
 800c83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c842:	2112      	movs	r1, #18
 800c844:	f7ff bf86 	b.w	800c754 <std>
 800c848:	20002bd8 	.word	0x20002bd8
 800c84c:	20002aa0 	.word	0x20002aa0
 800c850:	0800c7c1 	.word	0x0800c7c1

0800c854 <__sfp_lock_acquire>:
 800c854:	4801      	ldr	r0, [pc, #4]	@ (800c85c <__sfp_lock_acquire+0x8>)
 800c856:	f000 b872 	b.w	800c93e <__retarget_lock_acquire_recursive>
 800c85a:	bf00      	nop
 800c85c:	20002bdd 	.word	0x20002bdd

0800c860 <__sfp_lock_release>:
 800c860:	4801      	ldr	r0, [pc, #4]	@ (800c868 <__sfp_lock_release+0x8>)
 800c862:	f000 b86d 	b.w	800c940 <__retarget_lock_release_recursive>
 800c866:	bf00      	nop
 800c868:	20002bdd 	.word	0x20002bdd

0800c86c <__sinit>:
 800c86c:	b510      	push	{r4, lr}
 800c86e:	4604      	mov	r4, r0
 800c870:	f7ff fff0 	bl	800c854 <__sfp_lock_acquire>
 800c874:	6a23      	ldr	r3, [r4, #32]
 800c876:	b11b      	cbz	r3, 800c880 <__sinit+0x14>
 800c878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c87c:	f7ff bff0 	b.w	800c860 <__sfp_lock_release>
 800c880:	4b04      	ldr	r3, [pc, #16]	@ (800c894 <__sinit+0x28>)
 800c882:	6223      	str	r3, [r4, #32]
 800c884:	4b04      	ldr	r3, [pc, #16]	@ (800c898 <__sinit+0x2c>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d1f5      	bne.n	800c878 <__sinit+0xc>
 800c88c:	f7ff ffc4 	bl	800c818 <global_stdio_init.part.0>
 800c890:	e7f2      	b.n	800c878 <__sinit+0xc>
 800c892:	bf00      	nop
 800c894:	0800c7d9 	.word	0x0800c7d9
 800c898:	20002bd8 	.word	0x20002bd8

0800c89c <_fwalk_sglue>:
 800c89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8a0:	4607      	mov	r7, r0
 800c8a2:	4688      	mov	r8, r1
 800c8a4:	4614      	mov	r4, r2
 800c8a6:	2600      	movs	r6, #0
 800c8a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c8ac:	f1b9 0901 	subs.w	r9, r9, #1
 800c8b0:	d505      	bpl.n	800c8be <_fwalk_sglue+0x22>
 800c8b2:	6824      	ldr	r4, [r4, #0]
 800c8b4:	2c00      	cmp	r4, #0
 800c8b6:	d1f7      	bne.n	800c8a8 <_fwalk_sglue+0xc>
 800c8b8:	4630      	mov	r0, r6
 800c8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8be:	89ab      	ldrh	r3, [r5, #12]
 800c8c0:	2b01      	cmp	r3, #1
 800c8c2:	d907      	bls.n	800c8d4 <_fwalk_sglue+0x38>
 800c8c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	d003      	beq.n	800c8d4 <_fwalk_sglue+0x38>
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	4638      	mov	r0, r7
 800c8d0:	47c0      	blx	r8
 800c8d2:	4306      	orrs	r6, r0
 800c8d4:	3568      	adds	r5, #104	@ 0x68
 800c8d6:	e7e9      	b.n	800c8ac <_fwalk_sglue+0x10>

0800c8d8 <memset>:
 800c8d8:	4402      	add	r2, r0
 800c8da:	4603      	mov	r3, r0
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d100      	bne.n	800c8e2 <memset+0xa>
 800c8e0:	4770      	bx	lr
 800c8e2:	f803 1b01 	strb.w	r1, [r3], #1
 800c8e6:	e7f9      	b.n	800c8dc <memset+0x4>

0800c8e8 <__errno>:
 800c8e8:	4b01      	ldr	r3, [pc, #4]	@ (800c8f0 <__errno+0x8>)
 800c8ea:	6818      	ldr	r0, [r3, #0]
 800c8ec:	4770      	bx	lr
 800c8ee:	bf00      	nop
 800c8f0:	20000040 	.word	0x20000040

0800c8f4 <__libc_init_array>:
 800c8f4:	b570      	push	{r4, r5, r6, lr}
 800c8f6:	4d0d      	ldr	r5, [pc, #52]	@ (800c92c <__libc_init_array+0x38>)
 800c8f8:	4c0d      	ldr	r4, [pc, #52]	@ (800c930 <__libc_init_array+0x3c>)
 800c8fa:	1b64      	subs	r4, r4, r5
 800c8fc:	10a4      	asrs	r4, r4, #2
 800c8fe:	2600      	movs	r6, #0
 800c900:	42a6      	cmp	r6, r4
 800c902:	d109      	bne.n	800c918 <__libc_init_array+0x24>
 800c904:	4d0b      	ldr	r5, [pc, #44]	@ (800c934 <__libc_init_array+0x40>)
 800c906:	4c0c      	ldr	r4, [pc, #48]	@ (800c938 <__libc_init_array+0x44>)
 800c908:	f000 fed4 	bl	800d6b4 <_init>
 800c90c:	1b64      	subs	r4, r4, r5
 800c90e:	10a4      	asrs	r4, r4, #2
 800c910:	2600      	movs	r6, #0
 800c912:	42a6      	cmp	r6, r4
 800c914:	d105      	bne.n	800c922 <__libc_init_array+0x2e>
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	f855 3b04 	ldr.w	r3, [r5], #4
 800c91c:	4798      	blx	r3
 800c91e:	3601      	adds	r6, #1
 800c920:	e7ee      	b.n	800c900 <__libc_init_array+0xc>
 800c922:	f855 3b04 	ldr.w	r3, [r5], #4
 800c926:	4798      	blx	r3
 800c928:	3601      	adds	r6, #1
 800c92a:	e7f2      	b.n	800c912 <__libc_init_array+0x1e>
 800c92c:	0800d8d8 	.word	0x0800d8d8
 800c930:	0800d8d8 	.word	0x0800d8d8
 800c934:	0800d8d8 	.word	0x0800d8d8
 800c938:	0800d8dc 	.word	0x0800d8dc

0800c93c <__retarget_lock_init_recursive>:
 800c93c:	4770      	bx	lr

0800c93e <__retarget_lock_acquire_recursive>:
 800c93e:	4770      	bx	lr

0800c940 <__retarget_lock_release_recursive>:
 800c940:	4770      	bx	lr

0800c942 <memcpy>:
 800c942:	440a      	add	r2, r1
 800c944:	4291      	cmp	r1, r2
 800c946:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c94a:	d100      	bne.n	800c94e <memcpy+0xc>
 800c94c:	4770      	bx	lr
 800c94e:	b510      	push	{r4, lr}
 800c950:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c954:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c958:	4291      	cmp	r1, r2
 800c95a:	d1f9      	bne.n	800c950 <memcpy+0xe>
 800c95c:	bd10      	pop	{r4, pc}
	...

0800c960 <__assert_func>:
 800c960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c962:	4614      	mov	r4, r2
 800c964:	461a      	mov	r2, r3
 800c966:	4b09      	ldr	r3, [pc, #36]	@ (800c98c <__assert_func+0x2c>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4605      	mov	r5, r0
 800c96c:	68d8      	ldr	r0, [r3, #12]
 800c96e:	b954      	cbnz	r4, 800c986 <__assert_func+0x26>
 800c970:	4b07      	ldr	r3, [pc, #28]	@ (800c990 <__assert_func+0x30>)
 800c972:	461c      	mov	r4, r3
 800c974:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c978:	9100      	str	r1, [sp, #0]
 800c97a:	462b      	mov	r3, r5
 800c97c:	4905      	ldr	r1, [pc, #20]	@ (800c994 <__assert_func+0x34>)
 800c97e:	f000 f9b3 	bl	800cce8 <fiprintf>
 800c982:	f000 fa19 	bl	800cdb8 <abort>
 800c986:	4b04      	ldr	r3, [pc, #16]	@ (800c998 <__assert_func+0x38>)
 800c988:	e7f4      	b.n	800c974 <__assert_func+0x14>
 800c98a:	bf00      	nop
 800c98c:	20000040 	.word	0x20000040
 800c990:	0800d89a 	.word	0x0800d89a
 800c994:	0800d86c 	.word	0x0800d86c
 800c998:	0800d85f 	.word	0x0800d85f

0800c99c <malloc>:
 800c99c:	4b02      	ldr	r3, [pc, #8]	@ (800c9a8 <malloc+0xc>)
 800c99e:	4601      	mov	r1, r0
 800c9a0:	6818      	ldr	r0, [r3, #0]
 800c9a2:	f000 b825 	b.w	800c9f0 <_malloc_r>
 800c9a6:	bf00      	nop
 800c9a8:	20000040 	.word	0x20000040

0800c9ac <sbrk_aligned>:
 800c9ac:	b570      	push	{r4, r5, r6, lr}
 800c9ae:	4e0f      	ldr	r6, [pc, #60]	@ (800c9ec <sbrk_aligned+0x40>)
 800c9b0:	460c      	mov	r4, r1
 800c9b2:	6831      	ldr	r1, [r6, #0]
 800c9b4:	4605      	mov	r5, r0
 800c9b6:	b911      	cbnz	r1, 800c9be <sbrk_aligned+0x12>
 800c9b8:	f000 f9dc 	bl	800cd74 <_sbrk_r>
 800c9bc:	6030      	str	r0, [r6, #0]
 800c9be:	4621      	mov	r1, r4
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	f000 f9d7 	bl	800cd74 <_sbrk_r>
 800c9c6:	1c43      	adds	r3, r0, #1
 800c9c8:	d103      	bne.n	800c9d2 <sbrk_aligned+0x26>
 800c9ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c9ce:	4620      	mov	r0, r4
 800c9d0:	bd70      	pop	{r4, r5, r6, pc}
 800c9d2:	1cc4      	adds	r4, r0, #3
 800c9d4:	f024 0403 	bic.w	r4, r4, #3
 800c9d8:	42a0      	cmp	r0, r4
 800c9da:	d0f8      	beq.n	800c9ce <sbrk_aligned+0x22>
 800c9dc:	1a21      	subs	r1, r4, r0
 800c9de:	4628      	mov	r0, r5
 800c9e0:	f000 f9c8 	bl	800cd74 <_sbrk_r>
 800c9e4:	3001      	adds	r0, #1
 800c9e6:	d1f2      	bne.n	800c9ce <sbrk_aligned+0x22>
 800c9e8:	e7ef      	b.n	800c9ca <sbrk_aligned+0x1e>
 800c9ea:	bf00      	nop
 800c9ec:	20002be0 	.word	0x20002be0

0800c9f0 <_malloc_r>:
 800c9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9f4:	1ccd      	adds	r5, r1, #3
 800c9f6:	f025 0503 	bic.w	r5, r5, #3
 800c9fa:	3508      	adds	r5, #8
 800c9fc:	2d0c      	cmp	r5, #12
 800c9fe:	bf38      	it	cc
 800ca00:	250c      	movcc	r5, #12
 800ca02:	2d00      	cmp	r5, #0
 800ca04:	4606      	mov	r6, r0
 800ca06:	db01      	blt.n	800ca0c <_malloc_r+0x1c>
 800ca08:	42a9      	cmp	r1, r5
 800ca0a:	d904      	bls.n	800ca16 <_malloc_r+0x26>
 800ca0c:	230c      	movs	r3, #12
 800ca0e:	6033      	str	r3, [r6, #0]
 800ca10:	2000      	movs	r0, #0
 800ca12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800caec <_malloc_r+0xfc>
 800ca1a:	f000 f915 	bl	800cc48 <__malloc_lock>
 800ca1e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca22:	461c      	mov	r4, r3
 800ca24:	bb44      	cbnz	r4, 800ca78 <_malloc_r+0x88>
 800ca26:	4629      	mov	r1, r5
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7ff ffbf 	bl	800c9ac <sbrk_aligned>
 800ca2e:	1c43      	adds	r3, r0, #1
 800ca30:	4604      	mov	r4, r0
 800ca32:	d158      	bne.n	800cae6 <_malloc_r+0xf6>
 800ca34:	f8d8 4000 	ldr.w	r4, [r8]
 800ca38:	4627      	mov	r7, r4
 800ca3a:	2f00      	cmp	r7, #0
 800ca3c:	d143      	bne.n	800cac6 <_malloc_r+0xd6>
 800ca3e:	2c00      	cmp	r4, #0
 800ca40:	d04b      	beq.n	800cada <_malloc_r+0xea>
 800ca42:	6823      	ldr	r3, [r4, #0]
 800ca44:	4639      	mov	r1, r7
 800ca46:	4630      	mov	r0, r6
 800ca48:	eb04 0903 	add.w	r9, r4, r3
 800ca4c:	f000 f992 	bl	800cd74 <_sbrk_r>
 800ca50:	4581      	cmp	r9, r0
 800ca52:	d142      	bne.n	800cada <_malloc_r+0xea>
 800ca54:	6821      	ldr	r1, [r4, #0]
 800ca56:	1a6d      	subs	r5, r5, r1
 800ca58:	4629      	mov	r1, r5
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7ff ffa6 	bl	800c9ac <sbrk_aligned>
 800ca60:	3001      	adds	r0, #1
 800ca62:	d03a      	beq.n	800cada <_malloc_r+0xea>
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	442b      	add	r3, r5
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	f8d8 3000 	ldr.w	r3, [r8]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	bb62      	cbnz	r2, 800cacc <_malloc_r+0xdc>
 800ca72:	f8c8 7000 	str.w	r7, [r8]
 800ca76:	e00f      	b.n	800ca98 <_malloc_r+0xa8>
 800ca78:	6822      	ldr	r2, [r4, #0]
 800ca7a:	1b52      	subs	r2, r2, r5
 800ca7c:	d420      	bmi.n	800cac0 <_malloc_r+0xd0>
 800ca7e:	2a0b      	cmp	r2, #11
 800ca80:	d917      	bls.n	800cab2 <_malloc_r+0xc2>
 800ca82:	1961      	adds	r1, r4, r5
 800ca84:	42a3      	cmp	r3, r4
 800ca86:	6025      	str	r5, [r4, #0]
 800ca88:	bf18      	it	ne
 800ca8a:	6059      	strne	r1, [r3, #4]
 800ca8c:	6863      	ldr	r3, [r4, #4]
 800ca8e:	bf08      	it	eq
 800ca90:	f8c8 1000 	streq.w	r1, [r8]
 800ca94:	5162      	str	r2, [r4, r5]
 800ca96:	604b      	str	r3, [r1, #4]
 800ca98:	4630      	mov	r0, r6
 800ca9a:	f000 f8db 	bl	800cc54 <__malloc_unlock>
 800ca9e:	f104 000b 	add.w	r0, r4, #11
 800caa2:	1d23      	adds	r3, r4, #4
 800caa4:	f020 0007 	bic.w	r0, r0, #7
 800caa8:	1ac2      	subs	r2, r0, r3
 800caaa:	bf1c      	itt	ne
 800caac:	1a1b      	subne	r3, r3, r0
 800caae:	50a3      	strne	r3, [r4, r2]
 800cab0:	e7af      	b.n	800ca12 <_malloc_r+0x22>
 800cab2:	6862      	ldr	r2, [r4, #4]
 800cab4:	42a3      	cmp	r3, r4
 800cab6:	bf0c      	ite	eq
 800cab8:	f8c8 2000 	streq.w	r2, [r8]
 800cabc:	605a      	strne	r2, [r3, #4]
 800cabe:	e7eb      	b.n	800ca98 <_malloc_r+0xa8>
 800cac0:	4623      	mov	r3, r4
 800cac2:	6864      	ldr	r4, [r4, #4]
 800cac4:	e7ae      	b.n	800ca24 <_malloc_r+0x34>
 800cac6:	463c      	mov	r4, r7
 800cac8:	687f      	ldr	r7, [r7, #4]
 800caca:	e7b6      	b.n	800ca3a <_malloc_r+0x4a>
 800cacc:	461a      	mov	r2, r3
 800cace:	685b      	ldr	r3, [r3, #4]
 800cad0:	42a3      	cmp	r3, r4
 800cad2:	d1fb      	bne.n	800cacc <_malloc_r+0xdc>
 800cad4:	2300      	movs	r3, #0
 800cad6:	6053      	str	r3, [r2, #4]
 800cad8:	e7de      	b.n	800ca98 <_malloc_r+0xa8>
 800cada:	230c      	movs	r3, #12
 800cadc:	6033      	str	r3, [r6, #0]
 800cade:	4630      	mov	r0, r6
 800cae0:	f000 f8b8 	bl	800cc54 <__malloc_unlock>
 800cae4:	e794      	b.n	800ca10 <_malloc_r+0x20>
 800cae6:	6005      	str	r5, [r0, #0]
 800cae8:	e7d6      	b.n	800ca98 <_malloc_r+0xa8>
 800caea:	bf00      	nop
 800caec:	20002be4 	.word	0x20002be4

0800caf0 <__sflush_r>:
 800caf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf8:	0716      	lsls	r6, r2, #28
 800cafa:	4605      	mov	r5, r0
 800cafc:	460c      	mov	r4, r1
 800cafe:	d454      	bmi.n	800cbaa <__sflush_r+0xba>
 800cb00:	684b      	ldr	r3, [r1, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dc02      	bgt.n	800cb0c <__sflush_r+0x1c>
 800cb06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	dd48      	ble.n	800cb9e <__sflush_r+0xae>
 800cb0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb0e:	2e00      	cmp	r6, #0
 800cb10:	d045      	beq.n	800cb9e <__sflush_r+0xae>
 800cb12:	2300      	movs	r3, #0
 800cb14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cb18:	682f      	ldr	r7, [r5, #0]
 800cb1a:	6a21      	ldr	r1, [r4, #32]
 800cb1c:	602b      	str	r3, [r5, #0]
 800cb1e:	d030      	beq.n	800cb82 <__sflush_r+0x92>
 800cb20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cb22:	89a3      	ldrh	r3, [r4, #12]
 800cb24:	0759      	lsls	r1, r3, #29
 800cb26:	d505      	bpl.n	800cb34 <__sflush_r+0x44>
 800cb28:	6863      	ldr	r3, [r4, #4]
 800cb2a:	1ad2      	subs	r2, r2, r3
 800cb2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb2e:	b10b      	cbz	r3, 800cb34 <__sflush_r+0x44>
 800cb30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cb32:	1ad2      	subs	r2, r2, r3
 800cb34:	2300      	movs	r3, #0
 800cb36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cb38:	6a21      	ldr	r1, [r4, #32]
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	47b0      	blx	r6
 800cb3e:	1c43      	adds	r3, r0, #1
 800cb40:	89a3      	ldrh	r3, [r4, #12]
 800cb42:	d106      	bne.n	800cb52 <__sflush_r+0x62>
 800cb44:	6829      	ldr	r1, [r5, #0]
 800cb46:	291d      	cmp	r1, #29
 800cb48:	d82b      	bhi.n	800cba2 <__sflush_r+0xb2>
 800cb4a:	4a2a      	ldr	r2, [pc, #168]	@ (800cbf4 <__sflush_r+0x104>)
 800cb4c:	410a      	asrs	r2, r1
 800cb4e:	07d6      	lsls	r6, r2, #31
 800cb50:	d427      	bmi.n	800cba2 <__sflush_r+0xb2>
 800cb52:	2200      	movs	r2, #0
 800cb54:	6062      	str	r2, [r4, #4]
 800cb56:	04d9      	lsls	r1, r3, #19
 800cb58:	6922      	ldr	r2, [r4, #16]
 800cb5a:	6022      	str	r2, [r4, #0]
 800cb5c:	d504      	bpl.n	800cb68 <__sflush_r+0x78>
 800cb5e:	1c42      	adds	r2, r0, #1
 800cb60:	d101      	bne.n	800cb66 <__sflush_r+0x76>
 800cb62:	682b      	ldr	r3, [r5, #0]
 800cb64:	b903      	cbnz	r3, 800cb68 <__sflush_r+0x78>
 800cb66:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb6a:	602f      	str	r7, [r5, #0]
 800cb6c:	b1b9      	cbz	r1, 800cb9e <__sflush_r+0xae>
 800cb6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb72:	4299      	cmp	r1, r3
 800cb74:	d002      	beq.n	800cb7c <__sflush_r+0x8c>
 800cb76:	4628      	mov	r0, r5
 800cb78:	f000 f926 	bl	800cdc8 <_free_r>
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb80:	e00d      	b.n	800cb9e <__sflush_r+0xae>
 800cb82:	2301      	movs	r3, #1
 800cb84:	4628      	mov	r0, r5
 800cb86:	47b0      	blx	r6
 800cb88:	4602      	mov	r2, r0
 800cb8a:	1c50      	adds	r0, r2, #1
 800cb8c:	d1c9      	bne.n	800cb22 <__sflush_r+0x32>
 800cb8e:	682b      	ldr	r3, [r5, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d0c6      	beq.n	800cb22 <__sflush_r+0x32>
 800cb94:	2b1d      	cmp	r3, #29
 800cb96:	d001      	beq.n	800cb9c <__sflush_r+0xac>
 800cb98:	2b16      	cmp	r3, #22
 800cb9a:	d11e      	bne.n	800cbda <__sflush_r+0xea>
 800cb9c:	602f      	str	r7, [r5, #0]
 800cb9e:	2000      	movs	r0, #0
 800cba0:	e022      	b.n	800cbe8 <__sflush_r+0xf8>
 800cba2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cba6:	b21b      	sxth	r3, r3
 800cba8:	e01b      	b.n	800cbe2 <__sflush_r+0xf2>
 800cbaa:	690f      	ldr	r7, [r1, #16]
 800cbac:	2f00      	cmp	r7, #0
 800cbae:	d0f6      	beq.n	800cb9e <__sflush_r+0xae>
 800cbb0:	0793      	lsls	r3, r2, #30
 800cbb2:	680e      	ldr	r6, [r1, #0]
 800cbb4:	bf08      	it	eq
 800cbb6:	694b      	ldreq	r3, [r1, #20]
 800cbb8:	600f      	str	r7, [r1, #0]
 800cbba:	bf18      	it	ne
 800cbbc:	2300      	movne	r3, #0
 800cbbe:	eba6 0807 	sub.w	r8, r6, r7
 800cbc2:	608b      	str	r3, [r1, #8]
 800cbc4:	f1b8 0f00 	cmp.w	r8, #0
 800cbc8:	dde9      	ble.n	800cb9e <__sflush_r+0xae>
 800cbca:	6a21      	ldr	r1, [r4, #32]
 800cbcc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cbce:	4643      	mov	r3, r8
 800cbd0:	463a      	mov	r2, r7
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	47b0      	blx	r6
 800cbd6:	2800      	cmp	r0, #0
 800cbd8:	dc08      	bgt.n	800cbec <__sflush_r+0xfc>
 800cbda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cbe2:	81a3      	strh	r3, [r4, #12]
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbec:	4407      	add	r7, r0
 800cbee:	eba8 0800 	sub.w	r8, r8, r0
 800cbf2:	e7e7      	b.n	800cbc4 <__sflush_r+0xd4>
 800cbf4:	dfbffffe 	.word	0xdfbffffe

0800cbf8 <_fflush_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	690b      	ldr	r3, [r1, #16]
 800cbfc:	4605      	mov	r5, r0
 800cbfe:	460c      	mov	r4, r1
 800cc00:	b913      	cbnz	r3, 800cc08 <_fflush_r+0x10>
 800cc02:	2500      	movs	r5, #0
 800cc04:	4628      	mov	r0, r5
 800cc06:	bd38      	pop	{r3, r4, r5, pc}
 800cc08:	b118      	cbz	r0, 800cc12 <_fflush_r+0x1a>
 800cc0a:	6a03      	ldr	r3, [r0, #32]
 800cc0c:	b90b      	cbnz	r3, 800cc12 <_fflush_r+0x1a>
 800cc0e:	f7ff fe2d 	bl	800c86c <__sinit>
 800cc12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d0f3      	beq.n	800cc02 <_fflush_r+0xa>
 800cc1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cc1c:	07d0      	lsls	r0, r2, #31
 800cc1e:	d404      	bmi.n	800cc2a <_fflush_r+0x32>
 800cc20:	0599      	lsls	r1, r3, #22
 800cc22:	d402      	bmi.n	800cc2a <_fflush_r+0x32>
 800cc24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc26:	f7ff fe8a 	bl	800c93e <__retarget_lock_acquire_recursive>
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	4621      	mov	r1, r4
 800cc2e:	f7ff ff5f 	bl	800caf0 <__sflush_r>
 800cc32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cc34:	07da      	lsls	r2, r3, #31
 800cc36:	4605      	mov	r5, r0
 800cc38:	d4e4      	bmi.n	800cc04 <_fflush_r+0xc>
 800cc3a:	89a3      	ldrh	r3, [r4, #12]
 800cc3c:	059b      	lsls	r3, r3, #22
 800cc3e:	d4e1      	bmi.n	800cc04 <_fflush_r+0xc>
 800cc40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cc42:	f7ff fe7d 	bl	800c940 <__retarget_lock_release_recursive>
 800cc46:	e7dd      	b.n	800cc04 <_fflush_r+0xc>

0800cc48 <__malloc_lock>:
 800cc48:	4801      	ldr	r0, [pc, #4]	@ (800cc50 <__malloc_lock+0x8>)
 800cc4a:	f7ff be78 	b.w	800c93e <__retarget_lock_acquire_recursive>
 800cc4e:	bf00      	nop
 800cc50:	20002bdc 	.word	0x20002bdc

0800cc54 <__malloc_unlock>:
 800cc54:	4801      	ldr	r0, [pc, #4]	@ (800cc5c <__malloc_unlock+0x8>)
 800cc56:	f7ff be73 	b.w	800c940 <__retarget_lock_release_recursive>
 800cc5a:	bf00      	nop
 800cc5c:	20002bdc 	.word	0x20002bdc

0800cc60 <__sread>:
 800cc60:	b510      	push	{r4, lr}
 800cc62:	460c      	mov	r4, r1
 800cc64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc68:	f000 f872 	bl	800cd50 <_read_r>
 800cc6c:	2800      	cmp	r0, #0
 800cc6e:	bfab      	itete	ge
 800cc70:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cc72:	89a3      	ldrhlt	r3, [r4, #12]
 800cc74:	181b      	addge	r3, r3, r0
 800cc76:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cc7a:	bfac      	ite	ge
 800cc7c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cc7e:	81a3      	strhlt	r3, [r4, #12]
 800cc80:	bd10      	pop	{r4, pc}

0800cc82 <__swrite>:
 800cc82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc86:	461f      	mov	r7, r3
 800cc88:	898b      	ldrh	r3, [r1, #12]
 800cc8a:	05db      	lsls	r3, r3, #23
 800cc8c:	4605      	mov	r5, r0
 800cc8e:	460c      	mov	r4, r1
 800cc90:	4616      	mov	r6, r2
 800cc92:	d505      	bpl.n	800cca0 <__swrite+0x1e>
 800cc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc98:	2302      	movs	r3, #2
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	f000 f846 	bl	800cd2c <_lseek_r>
 800cca0:	89a3      	ldrh	r3, [r4, #12]
 800cca2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cca6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ccaa:	81a3      	strh	r3, [r4, #12]
 800ccac:	4632      	mov	r2, r6
 800ccae:	463b      	mov	r3, r7
 800ccb0:	4628      	mov	r0, r5
 800ccb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccb6:	f000 b86d 	b.w	800cd94 <_write_r>

0800ccba <__sseek>:
 800ccba:	b510      	push	{r4, lr}
 800ccbc:	460c      	mov	r4, r1
 800ccbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccc2:	f000 f833 	bl	800cd2c <_lseek_r>
 800ccc6:	1c43      	adds	r3, r0, #1
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	bf15      	itete	ne
 800cccc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ccce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ccd2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ccd6:	81a3      	strheq	r3, [r4, #12]
 800ccd8:	bf18      	it	ne
 800ccda:	81a3      	strhne	r3, [r4, #12]
 800ccdc:	bd10      	pop	{r4, pc}

0800ccde <__sclose>:
 800ccde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce2:	f000 b813 	b.w	800cd0c <_close_r>
	...

0800cce8 <fiprintf>:
 800cce8:	b40e      	push	{r1, r2, r3}
 800ccea:	b503      	push	{r0, r1, lr}
 800ccec:	4601      	mov	r1, r0
 800ccee:	ab03      	add	r3, sp, #12
 800ccf0:	4805      	ldr	r0, [pc, #20]	@ (800cd08 <fiprintf+0x20>)
 800ccf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccf6:	6800      	ldr	r0, [r0, #0]
 800ccf8:	9301      	str	r3, [sp, #4]
 800ccfa:	f000 f8d9 	bl	800ceb0 <_vfiprintf_r>
 800ccfe:	b002      	add	sp, #8
 800cd00:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd04:	b003      	add	sp, #12
 800cd06:	4770      	bx	lr
 800cd08:	20000040 	.word	0x20000040

0800cd0c <_close_r>:
 800cd0c:	b538      	push	{r3, r4, r5, lr}
 800cd0e:	4d06      	ldr	r5, [pc, #24]	@ (800cd28 <_close_r+0x1c>)
 800cd10:	2300      	movs	r3, #0
 800cd12:	4604      	mov	r4, r0
 800cd14:	4608      	mov	r0, r1
 800cd16:	602b      	str	r3, [r5, #0]
 800cd18:	f7f5 f914 	bl	8001f44 <_close>
 800cd1c:	1c43      	adds	r3, r0, #1
 800cd1e:	d102      	bne.n	800cd26 <_close_r+0x1a>
 800cd20:	682b      	ldr	r3, [r5, #0]
 800cd22:	b103      	cbz	r3, 800cd26 <_close_r+0x1a>
 800cd24:	6023      	str	r3, [r4, #0]
 800cd26:	bd38      	pop	{r3, r4, r5, pc}
 800cd28:	20002be8 	.word	0x20002be8

0800cd2c <_lseek_r>:
 800cd2c:	b538      	push	{r3, r4, r5, lr}
 800cd2e:	4d07      	ldr	r5, [pc, #28]	@ (800cd4c <_lseek_r+0x20>)
 800cd30:	4604      	mov	r4, r0
 800cd32:	4608      	mov	r0, r1
 800cd34:	4611      	mov	r1, r2
 800cd36:	2200      	movs	r2, #0
 800cd38:	602a      	str	r2, [r5, #0]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	f7f5 f929 	bl	8001f92 <_lseek>
 800cd40:	1c43      	adds	r3, r0, #1
 800cd42:	d102      	bne.n	800cd4a <_lseek_r+0x1e>
 800cd44:	682b      	ldr	r3, [r5, #0]
 800cd46:	b103      	cbz	r3, 800cd4a <_lseek_r+0x1e>
 800cd48:	6023      	str	r3, [r4, #0]
 800cd4a:	bd38      	pop	{r3, r4, r5, pc}
 800cd4c:	20002be8 	.word	0x20002be8

0800cd50 <_read_r>:
 800cd50:	b538      	push	{r3, r4, r5, lr}
 800cd52:	4d07      	ldr	r5, [pc, #28]	@ (800cd70 <_read_r+0x20>)
 800cd54:	4604      	mov	r4, r0
 800cd56:	4608      	mov	r0, r1
 800cd58:	4611      	mov	r1, r2
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	602a      	str	r2, [r5, #0]
 800cd5e:	461a      	mov	r2, r3
 800cd60:	f7f5 f8b7 	bl	8001ed2 <_read>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	d102      	bne.n	800cd6e <_read_r+0x1e>
 800cd68:	682b      	ldr	r3, [r5, #0]
 800cd6a:	b103      	cbz	r3, 800cd6e <_read_r+0x1e>
 800cd6c:	6023      	str	r3, [r4, #0]
 800cd6e:	bd38      	pop	{r3, r4, r5, pc}
 800cd70:	20002be8 	.word	0x20002be8

0800cd74 <_sbrk_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d06      	ldr	r5, [pc, #24]	@ (800cd90 <_sbrk_r+0x1c>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	602b      	str	r3, [r5, #0]
 800cd80:	f7f5 f914 	bl	8001fac <_sbrk>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	d102      	bne.n	800cd8e <_sbrk_r+0x1a>
 800cd88:	682b      	ldr	r3, [r5, #0]
 800cd8a:	b103      	cbz	r3, 800cd8e <_sbrk_r+0x1a>
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
 800cd90:	20002be8 	.word	0x20002be8

0800cd94 <_write_r>:
 800cd94:	b538      	push	{r3, r4, r5, lr}
 800cd96:	4d07      	ldr	r5, [pc, #28]	@ (800cdb4 <_write_r+0x20>)
 800cd98:	4604      	mov	r4, r0
 800cd9a:	4608      	mov	r0, r1
 800cd9c:	4611      	mov	r1, r2
 800cd9e:	2200      	movs	r2, #0
 800cda0:	602a      	str	r2, [r5, #0]
 800cda2:	461a      	mov	r2, r3
 800cda4:	f7f5 f8b2 	bl	8001f0c <_write>
 800cda8:	1c43      	adds	r3, r0, #1
 800cdaa:	d102      	bne.n	800cdb2 <_write_r+0x1e>
 800cdac:	682b      	ldr	r3, [r5, #0]
 800cdae:	b103      	cbz	r3, 800cdb2 <_write_r+0x1e>
 800cdb0:	6023      	str	r3, [r4, #0]
 800cdb2:	bd38      	pop	{r3, r4, r5, pc}
 800cdb4:	20002be8 	.word	0x20002be8

0800cdb8 <abort>:
 800cdb8:	b508      	push	{r3, lr}
 800cdba:	2006      	movs	r0, #6
 800cdbc:	f000 fc5e 	bl	800d67c <raise>
 800cdc0:	2001      	movs	r0, #1
 800cdc2:	f7f5 f87b 	bl	8001ebc <_exit>
	...

0800cdc8 <_free_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4605      	mov	r5, r0
 800cdcc:	2900      	cmp	r1, #0
 800cdce:	d041      	beq.n	800ce54 <_free_r+0x8c>
 800cdd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdd4:	1f0c      	subs	r4, r1, #4
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	bfb8      	it	lt
 800cdda:	18e4      	addlt	r4, r4, r3
 800cddc:	f7ff ff34 	bl	800cc48 <__malloc_lock>
 800cde0:	4a1d      	ldr	r2, [pc, #116]	@ (800ce58 <_free_r+0x90>)
 800cde2:	6813      	ldr	r3, [r2, #0]
 800cde4:	b933      	cbnz	r3, 800cdf4 <_free_r+0x2c>
 800cde6:	6063      	str	r3, [r4, #4]
 800cde8:	6014      	str	r4, [r2, #0]
 800cdea:	4628      	mov	r0, r5
 800cdec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cdf0:	f7ff bf30 	b.w	800cc54 <__malloc_unlock>
 800cdf4:	42a3      	cmp	r3, r4
 800cdf6:	d908      	bls.n	800ce0a <_free_r+0x42>
 800cdf8:	6820      	ldr	r0, [r4, #0]
 800cdfa:	1821      	adds	r1, r4, r0
 800cdfc:	428b      	cmp	r3, r1
 800cdfe:	bf01      	itttt	eq
 800ce00:	6819      	ldreq	r1, [r3, #0]
 800ce02:	685b      	ldreq	r3, [r3, #4]
 800ce04:	1809      	addeq	r1, r1, r0
 800ce06:	6021      	streq	r1, [r4, #0]
 800ce08:	e7ed      	b.n	800cde6 <_free_r+0x1e>
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	b10b      	cbz	r3, 800ce14 <_free_r+0x4c>
 800ce10:	42a3      	cmp	r3, r4
 800ce12:	d9fa      	bls.n	800ce0a <_free_r+0x42>
 800ce14:	6811      	ldr	r1, [r2, #0]
 800ce16:	1850      	adds	r0, r2, r1
 800ce18:	42a0      	cmp	r0, r4
 800ce1a:	d10b      	bne.n	800ce34 <_free_r+0x6c>
 800ce1c:	6820      	ldr	r0, [r4, #0]
 800ce1e:	4401      	add	r1, r0
 800ce20:	1850      	adds	r0, r2, r1
 800ce22:	4283      	cmp	r3, r0
 800ce24:	6011      	str	r1, [r2, #0]
 800ce26:	d1e0      	bne.n	800cdea <_free_r+0x22>
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	6053      	str	r3, [r2, #4]
 800ce2e:	4408      	add	r0, r1
 800ce30:	6010      	str	r0, [r2, #0]
 800ce32:	e7da      	b.n	800cdea <_free_r+0x22>
 800ce34:	d902      	bls.n	800ce3c <_free_r+0x74>
 800ce36:	230c      	movs	r3, #12
 800ce38:	602b      	str	r3, [r5, #0]
 800ce3a:	e7d6      	b.n	800cdea <_free_r+0x22>
 800ce3c:	6820      	ldr	r0, [r4, #0]
 800ce3e:	1821      	adds	r1, r4, r0
 800ce40:	428b      	cmp	r3, r1
 800ce42:	bf04      	itt	eq
 800ce44:	6819      	ldreq	r1, [r3, #0]
 800ce46:	685b      	ldreq	r3, [r3, #4]
 800ce48:	6063      	str	r3, [r4, #4]
 800ce4a:	bf04      	itt	eq
 800ce4c:	1809      	addeq	r1, r1, r0
 800ce4e:	6021      	streq	r1, [r4, #0]
 800ce50:	6054      	str	r4, [r2, #4]
 800ce52:	e7ca      	b.n	800cdea <_free_r+0x22>
 800ce54:	bd38      	pop	{r3, r4, r5, pc}
 800ce56:	bf00      	nop
 800ce58:	20002be4 	.word	0x20002be4

0800ce5c <__sfputc_r>:
 800ce5c:	6893      	ldr	r3, [r2, #8]
 800ce5e:	3b01      	subs	r3, #1
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	b410      	push	{r4}
 800ce64:	6093      	str	r3, [r2, #8]
 800ce66:	da08      	bge.n	800ce7a <__sfputc_r+0x1e>
 800ce68:	6994      	ldr	r4, [r2, #24]
 800ce6a:	42a3      	cmp	r3, r4
 800ce6c:	db01      	blt.n	800ce72 <__sfputc_r+0x16>
 800ce6e:	290a      	cmp	r1, #10
 800ce70:	d103      	bne.n	800ce7a <__sfputc_r+0x1e>
 800ce72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce76:	f000 bac1 	b.w	800d3fc <__swbuf_r>
 800ce7a:	6813      	ldr	r3, [r2, #0]
 800ce7c:	1c58      	adds	r0, r3, #1
 800ce7e:	6010      	str	r0, [r2, #0]
 800ce80:	7019      	strb	r1, [r3, #0]
 800ce82:	4608      	mov	r0, r1
 800ce84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce88:	4770      	bx	lr

0800ce8a <__sfputs_r>:
 800ce8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	460f      	mov	r7, r1
 800ce90:	4614      	mov	r4, r2
 800ce92:	18d5      	adds	r5, r2, r3
 800ce94:	42ac      	cmp	r4, r5
 800ce96:	d101      	bne.n	800ce9c <__sfputs_r+0x12>
 800ce98:	2000      	movs	r0, #0
 800ce9a:	e007      	b.n	800ceac <__sfputs_r+0x22>
 800ce9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cea0:	463a      	mov	r2, r7
 800cea2:	4630      	mov	r0, r6
 800cea4:	f7ff ffda 	bl	800ce5c <__sfputc_r>
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	d1f3      	bne.n	800ce94 <__sfputs_r+0xa>
 800ceac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ceb0 <_vfiprintf_r>:
 800ceb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb4:	460d      	mov	r5, r1
 800ceb6:	b09d      	sub	sp, #116	@ 0x74
 800ceb8:	4614      	mov	r4, r2
 800ceba:	4698      	mov	r8, r3
 800cebc:	4606      	mov	r6, r0
 800cebe:	b118      	cbz	r0, 800cec8 <_vfiprintf_r+0x18>
 800cec0:	6a03      	ldr	r3, [r0, #32]
 800cec2:	b90b      	cbnz	r3, 800cec8 <_vfiprintf_r+0x18>
 800cec4:	f7ff fcd2 	bl	800c86c <__sinit>
 800cec8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceca:	07d9      	lsls	r1, r3, #31
 800cecc:	d405      	bmi.n	800ceda <_vfiprintf_r+0x2a>
 800cece:	89ab      	ldrh	r3, [r5, #12]
 800ced0:	059a      	lsls	r2, r3, #22
 800ced2:	d402      	bmi.n	800ceda <_vfiprintf_r+0x2a>
 800ced4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ced6:	f7ff fd32 	bl	800c93e <__retarget_lock_acquire_recursive>
 800ceda:	89ab      	ldrh	r3, [r5, #12]
 800cedc:	071b      	lsls	r3, r3, #28
 800cede:	d501      	bpl.n	800cee4 <_vfiprintf_r+0x34>
 800cee0:	692b      	ldr	r3, [r5, #16]
 800cee2:	b99b      	cbnz	r3, 800cf0c <_vfiprintf_r+0x5c>
 800cee4:	4629      	mov	r1, r5
 800cee6:	4630      	mov	r0, r6
 800cee8:	f000 fac6 	bl	800d478 <__swsetup_r>
 800ceec:	b170      	cbz	r0, 800cf0c <_vfiprintf_r+0x5c>
 800ceee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cef0:	07dc      	lsls	r4, r3, #31
 800cef2:	d504      	bpl.n	800cefe <_vfiprintf_r+0x4e>
 800cef4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cef8:	b01d      	add	sp, #116	@ 0x74
 800cefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cefe:	89ab      	ldrh	r3, [r5, #12]
 800cf00:	0598      	lsls	r0, r3, #22
 800cf02:	d4f7      	bmi.n	800cef4 <_vfiprintf_r+0x44>
 800cf04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf06:	f7ff fd1b 	bl	800c940 <__retarget_lock_release_recursive>
 800cf0a:	e7f3      	b.n	800cef4 <_vfiprintf_r+0x44>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf10:	2320      	movs	r3, #32
 800cf12:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf16:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf1a:	2330      	movs	r3, #48	@ 0x30
 800cf1c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d0cc <_vfiprintf_r+0x21c>
 800cf20:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf24:	f04f 0901 	mov.w	r9, #1
 800cf28:	4623      	mov	r3, r4
 800cf2a:	469a      	mov	sl, r3
 800cf2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf30:	b10a      	cbz	r2, 800cf36 <_vfiprintf_r+0x86>
 800cf32:	2a25      	cmp	r2, #37	@ 0x25
 800cf34:	d1f9      	bne.n	800cf2a <_vfiprintf_r+0x7a>
 800cf36:	ebba 0b04 	subs.w	fp, sl, r4
 800cf3a:	d00b      	beq.n	800cf54 <_vfiprintf_r+0xa4>
 800cf3c:	465b      	mov	r3, fp
 800cf3e:	4622      	mov	r2, r4
 800cf40:	4629      	mov	r1, r5
 800cf42:	4630      	mov	r0, r6
 800cf44:	f7ff ffa1 	bl	800ce8a <__sfputs_r>
 800cf48:	3001      	adds	r0, #1
 800cf4a:	f000 80a7 	beq.w	800d09c <_vfiprintf_r+0x1ec>
 800cf4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf50:	445a      	add	r2, fp
 800cf52:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf54:	f89a 3000 	ldrb.w	r3, [sl]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	f000 809f 	beq.w	800d09c <_vfiprintf_r+0x1ec>
 800cf5e:	2300      	movs	r3, #0
 800cf60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf68:	f10a 0a01 	add.w	sl, sl, #1
 800cf6c:	9304      	str	r3, [sp, #16]
 800cf6e:	9307      	str	r3, [sp, #28]
 800cf70:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf74:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf76:	4654      	mov	r4, sl
 800cf78:	2205      	movs	r2, #5
 800cf7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf7e:	4853      	ldr	r0, [pc, #332]	@ (800d0cc <_vfiprintf_r+0x21c>)
 800cf80:	f7f3 f92e 	bl	80001e0 <memchr>
 800cf84:	9a04      	ldr	r2, [sp, #16]
 800cf86:	b9d8      	cbnz	r0, 800cfc0 <_vfiprintf_r+0x110>
 800cf88:	06d1      	lsls	r1, r2, #27
 800cf8a:	bf44      	itt	mi
 800cf8c:	2320      	movmi	r3, #32
 800cf8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf92:	0713      	lsls	r3, r2, #28
 800cf94:	bf44      	itt	mi
 800cf96:	232b      	movmi	r3, #43	@ 0x2b
 800cf98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf9c:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfa2:	d015      	beq.n	800cfd0 <_vfiprintf_r+0x120>
 800cfa4:	9a07      	ldr	r2, [sp, #28]
 800cfa6:	4654      	mov	r4, sl
 800cfa8:	2000      	movs	r0, #0
 800cfaa:	f04f 0c0a 	mov.w	ip, #10
 800cfae:	4621      	mov	r1, r4
 800cfb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfb4:	3b30      	subs	r3, #48	@ 0x30
 800cfb6:	2b09      	cmp	r3, #9
 800cfb8:	d94b      	bls.n	800d052 <_vfiprintf_r+0x1a2>
 800cfba:	b1b0      	cbz	r0, 800cfea <_vfiprintf_r+0x13a>
 800cfbc:	9207      	str	r2, [sp, #28]
 800cfbe:	e014      	b.n	800cfea <_vfiprintf_r+0x13a>
 800cfc0:	eba0 0308 	sub.w	r3, r0, r8
 800cfc4:	fa09 f303 	lsl.w	r3, r9, r3
 800cfc8:	4313      	orrs	r3, r2
 800cfca:	9304      	str	r3, [sp, #16]
 800cfcc:	46a2      	mov	sl, r4
 800cfce:	e7d2      	b.n	800cf76 <_vfiprintf_r+0xc6>
 800cfd0:	9b03      	ldr	r3, [sp, #12]
 800cfd2:	1d19      	adds	r1, r3, #4
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	9103      	str	r1, [sp, #12]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	bfbb      	ittet	lt
 800cfdc:	425b      	neglt	r3, r3
 800cfde:	f042 0202 	orrlt.w	r2, r2, #2
 800cfe2:	9307      	strge	r3, [sp, #28]
 800cfe4:	9307      	strlt	r3, [sp, #28]
 800cfe6:	bfb8      	it	lt
 800cfe8:	9204      	strlt	r2, [sp, #16]
 800cfea:	7823      	ldrb	r3, [r4, #0]
 800cfec:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfee:	d10a      	bne.n	800d006 <_vfiprintf_r+0x156>
 800cff0:	7863      	ldrb	r3, [r4, #1]
 800cff2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cff4:	d132      	bne.n	800d05c <_vfiprintf_r+0x1ac>
 800cff6:	9b03      	ldr	r3, [sp, #12]
 800cff8:	1d1a      	adds	r2, r3, #4
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	9203      	str	r2, [sp, #12]
 800cffe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d002:	3402      	adds	r4, #2
 800d004:	9305      	str	r3, [sp, #20]
 800d006:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d0dc <_vfiprintf_r+0x22c>
 800d00a:	7821      	ldrb	r1, [r4, #0]
 800d00c:	2203      	movs	r2, #3
 800d00e:	4650      	mov	r0, sl
 800d010:	f7f3 f8e6 	bl	80001e0 <memchr>
 800d014:	b138      	cbz	r0, 800d026 <_vfiprintf_r+0x176>
 800d016:	9b04      	ldr	r3, [sp, #16]
 800d018:	eba0 000a 	sub.w	r0, r0, sl
 800d01c:	2240      	movs	r2, #64	@ 0x40
 800d01e:	4082      	lsls	r2, r0
 800d020:	4313      	orrs	r3, r2
 800d022:	3401      	adds	r4, #1
 800d024:	9304      	str	r3, [sp, #16]
 800d026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d02a:	4829      	ldr	r0, [pc, #164]	@ (800d0d0 <_vfiprintf_r+0x220>)
 800d02c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d030:	2206      	movs	r2, #6
 800d032:	f7f3 f8d5 	bl	80001e0 <memchr>
 800d036:	2800      	cmp	r0, #0
 800d038:	d03f      	beq.n	800d0ba <_vfiprintf_r+0x20a>
 800d03a:	4b26      	ldr	r3, [pc, #152]	@ (800d0d4 <_vfiprintf_r+0x224>)
 800d03c:	bb1b      	cbnz	r3, 800d086 <_vfiprintf_r+0x1d6>
 800d03e:	9b03      	ldr	r3, [sp, #12]
 800d040:	3307      	adds	r3, #7
 800d042:	f023 0307 	bic.w	r3, r3, #7
 800d046:	3308      	adds	r3, #8
 800d048:	9303      	str	r3, [sp, #12]
 800d04a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d04c:	443b      	add	r3, r7
 800d04e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d050:	e76a      	b.n	800cf28 <_vfiprintf_r+0x78>
 800d052:	fb0c 3202 	mla	r2, ip, r2, r3
 800d056:	460c      	mov	r4, r1
 800d058:	2001      	movs	r0, #1
 800d05a:	e7a8      	b.n	800cfae <_vfiprintf_r+0xfe>
 800d05c:	2300      	movs	r3, #0
 800d05e:	3401      	adds	r4, #1
 800d060:	9305      	str	r3, [sp, #20]
 800d062:	4619      	mov	r1, r3
 800d064:	f04f 0c0a 	mov.w	ip, #10
 800d068:	4620      	mov	r0, r4
 800d06a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d06e:	3a30      	subs	r2, #48	@ 0x30
 800d070:	2a09      	cmp	r2, #9
 800d072:	d903      	bls.n	800d07c <_vfiprintf_r+0x1cc>
 800d074:	2b00      	cmp	r3, #0
 800d076:	d0c6      	beq.n	800d006 <_vfiprintf_r+0x156>
 800d078:	9105      	str	r1, [sp, #20]
 800d07a:	e7c4      	b.n	800d006 <_vfiprintf_r+0x156>
 800d07c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d080:	4604      	mov	r4, r0
 800d082:	2301      	movs	r3, #1
 800d084:	e7f0      	b.n	800d068 <_vfiprintf_r+0x1b8>
 800d086:	ab03      	add	r3, sp, #12
 800d088:	9300      	str	r3, [sp, #0]
 800d08a:	462a      	mov	r2, r5
 800d08c:	4b12      	ldr	r3, [pc, #72]	@ (800d0d8 <_vfiprintf_r+0x228>)
 800d08e:	a904      	add	r1, sp, #16
 800d090:	4630      	mov	r0, r6
 800d092:	f3af 8000 	nop.w
 800d096:	4607      	mov	r7, r0
 800d098:	1c78      	adds	r0, r7, #1
 800d09a:	d1d6      	bne.n	800d04a <_vfiprintf_r+0x19a>
 800d09c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d09e:	07d9      	lsls	r1, r3, #31
 800d0a0:	d405      	bmi.n	800d0ae <_vfiprintf_r+0x1fe>
 800d0a2:	89ab      	ldrh	r3, [r5, #12]
 800d0a4:	059a      	lsls	r2, r3, #22
 800d0a6:	d402      	bmi.n	800d0ae <_vfiprintf_r+0x1fe>
 800d0a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d0aa:	f7ff fc49 	bl	800c940 <__retarget_lock_release_recursive>
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	065b      	lsls	r3, r3, #25
 800d0b2:	f53f af1f 	bmi.w	800cef4 <_vfiprintf_r+0x44>
 800d0b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0b8:	e71e      	b.n	800cef8 <_vfiprintf_r+0x48>
 800d0ba:	ab03      	add	r3, sp, #12
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	462a      	mov	r2, r5
 800d0c0:	4b05      	ldr	r3, [pc, #20]	@ (800d0d8 <_vfiprintf_r+0x228>)
 800d0c2:	a904      	add	r1, sp, #16
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	f000 f879 	bl	800d1bc <_printf_i>
 800d0ca:	e7e4      	b.n	800d096 <_vfiprintf_r+0x1e6>
 800d0cc:	0800d89b 	.word	0x0800d89b
 800d0d0:	0800d8a5 	.word	0x0800d8a5
 800d0d4:	00000000 	.word	0x00000000
 800d0d8:	0800ce8b 	.word	0x0800ce8b
 800d0dc:	0800d8a1 	.word	0x0800d8a1

0800d0e0 <_printf_common>:
 800d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	4616      	mov	r6, r2
 800d0e6:	4698      	mov	r8, r3
 800d0e8:	688a      	ldr	r2, [r1, #8]
 800d0ea:	690b      	ldr	r3, [r1, #16]
 800d0ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	bfb8      	it	lt
 800d0f4:	4613      	movlt	r3, r2
 800d0f6:	6033      	str	r3, [r6, #0]
 800d0f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	460c      	mov	r4, r1
 800d100:	b10a      	cbz	r2, 800d106 <_printf_common+0x26>
 800d102:	3301      	adds	r3, #1
 800d104:	6033      	str	r3, [r6, #0]
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	0699      	lsls	r1, r3, #26
 800d10a:	bf42      	ittt	mi
 800d10c:	6833      	ldrmi	r3, [r6, #0]
 800d10e:	3302      	addmi	r3, #2
 800d110:	6033      	strmi	r3, [r6, #0]
 800d112:	6825      	ldr	r5, [r4, #0]
 800d114:	f015 0506 	ands.w	r5, r5, #6
 800d118:	d106      	bne.n	800d128 <_printf_common+0x48>
 800d11a:	f104 0a19 	add.w	sl, r4, #25
 800d11e:	68e3      	ldr	r3, [r4, #12]
 800d120:	6832      	ldr	r2, [r6, #0]
 800d122:	1a9b      	subs	r3, r3, r2
 800d124:	42ab      	cmp	r3, r5
 800d126:	dc26      	bgt.n	800d176 <_printf_common+0x96>
 800d128:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d12c:	6822      	ldr	r2, [r4, #0]
 800d12e:	3b00      	subs	r3, #0
 800d130:	bf18      	it	ne
 800d132:	2301      	movne	r3, #1
 800d134:	0692      	lsls	r2, r2, #26
 800d136:	d42b      	bmi.n	800d190 <_printf_common+0xb0>
 800d138:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d13c:	4641      	mov	r1, r8
 800d13e:	4638      	mov	r0, r7
 800d140:	47c8      	blx	r9
 800d142:	3001      	adds	r0, #1
 800d144:	d01e      	beq.n	800d184 <_printf_common+0xa4>
 800d146:	6823      	ldr	r3, [r4, #0]
 800d148:	6922      	ldr	r2, [r4, #16]
 800d14a:	f003 0306 	and.w	r3, r3, #6
 800d14e:	2b04      	cmp	r3, #4
 800d150:	bf02      	ittt	eq
 800d152:	68e5      	ldreq	r5, [r4, #12]
 800d154:	6833      	ldreq	r3, [r6, #0]
 800d156:	1aed      	subeq	r5, r5, r3
 800d158:	68a3      	ldr	r3, [r4, #8]
 800d15a:	bf0c      	ite	eq
 800d15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d160:	2500      	movne	r5, #0
 800d162:	4293      	cmp	r3, r2
 800d164:	bfc4      	itt	gt
 800d166:	1a9b      	subgt	r3, r3, r2
 800d168:	18ed      	addgt	r5, r5, r3
 800d16a:	2600      	movs	r6, #0
 800d16c:	341a      	adds	r4, #26
 800d16e:	42b5      	cmp	r5, r6
 800d170:	d11a      	bne.n	800d1a8 <_printf_common+0xc8>
 800d172:	2000      	movs	r0, #0
 800d174:	e008      	b.n	800d188 <_printf_common+0xa8>
 800d176:	2301      	movs	r3, #1
 800d178:	4652      	mov	r2, sl
 800d17a:	4641      	mov	r1, r8
 800d17c:	4638      	mov	r0, r7
 800d17e:	47c8      	blx	r9
 800d180:	3001      	adds	r0, #1
 800d182:	d103      	bne.n	800d18c <_printf_common+0xac>
 800d184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18c:	3501      	adds	r5, #1
 800d18e:	e7c6      	b.n	800d11e <_printf_common+0x3e>
 800d190:	18e1      	adds	r1, r4, r3
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	2030      	movs	r0, #48	@ 0x30
 800d196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d19a:	4422      	add	r2, r4
 800d19c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d1a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d1a4:	3302      	adds	r3, #2
 800d1a6:	e7c7      	b.n	800d138 <_printf_common+0x58>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	4622      	mov	r2, r4
 800d1ac:	4641      	mov	r1, r8
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	47c8      	blx	r9
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	d0e6      	beq.n	800d184 <_printf_common+0xa4>
 800d1b6:	3601      	adds	r6, #1
 800d1b8:	e7d9      	b.n	800d16e <_printf_common+0x8e>
	...

0800d1bc <_printf_i>:
 800d1bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	7e0f      	ldrb	r7, [r1, #24]
 800d1c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d1c4:	2f78      	cmp	r7, #120	@ 0x78
 800d1c6:	4691      	mov	r9, r2
 800d1c8:	4680      	mov	r8, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	469a      	mov	sl, r3
 800d1ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d1d2:	d807      	bhi.n	800d1e4 <_printf_i+0x28>
 800d1d4:	2f62      	cmp	r7, #98	@ 0x62
 800d1d6:	d80a      	bhi.n	800d1ee <_printf_i+0x32>
 800d1d8:	2f00      	cmp	r7, #0
 800d1da:	f000 80d2 	beq.w	800d382 <_printf_i+0x1c6>
 800d1de:	2f58      	cmp	r7, #88	@ 0x58
 800d1e0:	f000 80b9 	beq.w	800d356 <_printf_i+0x19a>
 800d1e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d1e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d1ec:	e03a      	b.n	800d264 <_printf_i+0xa8>
 800d1ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d1f2:	2b15      	cmp	r3, #21
 800d1f4:	d8f6      	bhi.n	800d1e4 <_printf_i+0x28>
 800d1f6:	a101      	add	r1, pc, #4	@ (adr r1, 800d1fc <_printf_i+0x40>)
 800d1f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1fc:	0800d255 	.word	0x0800d255
 800d200:	0800d269 	.word	0x0800d269
 800d204:	0800d1e5 	.word	0x0800d1e5
 800d208:	0800d1e5 	.word	0x0800d1e5
 800d20c:	0800d1e5 	.word	0x0800d1e5
 800d210:	0800d1e5 	.word	0x0800d1e5
 800d214:	0800d269 	.word	0x0800d269
 800d218:	0800d1e5 	.word	0x0800d1e5
 800d21c:	0800d1e5 	.word	0x0800d1e5
 800d220:	0800d1e5 	.word	0x0800d1e5
 800d224:	0800d1e5 	.word	0x0800d1e5
 800d228:	0800d369 	.word	0x0800d369
 800d22c:	0800d293 	.word	0x0800d293
 800d230:	0800d323 	.word	0x0800d323
 800d234:	0800d1e5 	.word	0x0800d1e5
 800d238:	0800d1e5 	.word	0x0800d1e5
 800d23c:	0800d38b 	.word	0x0800d38b
 800d240:	0800d1e5 	.word	0x0800d1e5
 800d244:	0800d293 	.word	0x0800d293
 800d248:	0800d1e5 	.word	0x0800d1e5
 800d24c:	0800d1e5 	.word	0x0800d1e5
 800d250:	0800d32b 	.word	0x0800d32b
 800d254:	6833      	ldr	r3, [r6, #0]
 800d256:	1d1a      	adds	r2, r3, #4
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6032      	str	r2, [r6, #0]
 800d25c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d264:	2301      	movs	r3, #1
 800d266:	e09d      	b.n	800d3a4 <_printf_i+0x1e8>
 800d268:	6833      	ldr	r3, [r6, #0]
 800d26a:	6820      	ldr	r0, [r4, #0]
 800d26c:	1d19      	adds	r1, r3, #4
 800d26e:	6031      	str	r1, [r6, #0]
 800d270:	0606      	lsls	r6, r0, #24
 800d272:	d501      	bpl.n	800d278 <_printf_i+0xbc>
 800d274:	681d      	ldr	r5, [r3, #0]
 800d276:	e003      	b.n	800d280 <_printf_i+0xc4>
 800d278:	0645      	lsls	r5, r0, #25
 800d27a:	d5fb      	bpl.n	800d274 <_printf_i+0xb8>
 800d27c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d280:	2d00      	cmp	r5, #0
 800d282:	da03      	bge.n	800d28c <_printf_i+0xd0>
 800d284:	232d      	movs	r3, #45	@ 0x2d
 800d286:	426d      	negs	r5, r5
 800d288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d28c:	4859      	ldr	r0, [pc, #356]	@ (800d3f4 <_printf_i+0x238>)
 800d28e:	230a      	movs	r3, #10
 800d290:	e011      	b.n	800d2b6 <_printf_i+0xfa>
 800d292:	6821      	ldr	r1, [r4, #0]
 800d294:	6833      	ldr	r3, [r6, #0]
 800d296:	0608      	lsls	r0, r1, #24
 800d298:	f853 5b04 	ldr.w	r5, [r3], #4
 800d29c:	d402      	bmi.n	800d2a4 <_printf_i+0xe8>
 800d29e:	0649      	lsls	r1, r1, #25
 800d2a0:	bf48      	it	mi
 800d2a2:	b2ad      	uxthmi	r5, r5
 800d2a4:	2f6f      	cmp	r7, #111	@ 0x6f
 800d2a6:	4853      	ldr	r0, [pc, #332]	@ (800d3f4 <_printf_i+0x238>)
 800d2a8:	6033      	str	r3, [r6, #0]
 800d2aa:	bf14      	ite	ne
 800d2ac:	230a      	movne	r3, #10
 800d2ae:	2308      	moveq	r3, #8
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d2b6:	6866      	ldr	r6, [r4, #4]
 800d2b8:	60a6      	str	r6, [r4, #8]
 800d2ba:	2e00      	cmp	r6, #0
 800d2bc:	bfa2      	ittt	ge
 800d2be:	6821      	ldrge	r1, [r4, #0]
 800d2c0:	f021 0104 	bicge.w	r1, r1, #4
 800d2c4:	6021      	strge	r1, [r4, #0]
 800d2c6:	b90d      	cbnz	r5, 800d2cc <_printf_i+0x110>
 800d2c8:	2e00      	cmp	r6, #0
 800d2ca:	d04b      	beq.n	800d364 <_printf_i+0x1a8>
 800d2cc:	4616      	mov	r6, r2
 800d2ce:	fbb5 f1f3 	udiv	r1, r5, r3
 800d2d2:	fb03 5711 	mls	r7, r3, r1, r5
 800d2d6:	5dc7      	ldrb	r7, [r0, r7]
 800d2d8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d2dc:	462f      	mov	r7, r5
 800d2de:	42bb      	cmp	r3, r7
 800d2e0:	460d      	mov	r5, r1
 800d2e2:	d9f4      	bls.n	800d2ce <_printf_i+0x112>
 800d2e4:	2b08      	cmp	r3, #8
 800d2e6:	d10b      	bne.n	800d300 <_printf_i+0x144>
 800d2e8:	6823      	ldr	r3, [r4, #0]
 800d2ea:	07df      	lsls	r7, r3, #31
 800d2ec:	d508      	bpl.n	800d300 <_printf_i+0x144>
 800d2ee:	6923      	ldr	r3, [r4, #16]
 800d2f0:	6861      	ldr	r1, [r4, #4]
 800d2f2:	4299      	cmp	r1, r3
 800d2f4:	bfde      	ittt	le
 800d2f6:	2330      	movle	r3, #48	@ 0x30
 800d2f8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d2fc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d300:	1b92      	subs	r2, r2, r6
 800d302:	6122      	str	r2, [r4, #16]
 800d304:	f8cd a000 	str.w	sl, [sp]
 800d308:	464b      	mov	r3, r9
 800d30a:	aa03      	add	r2, sp, #12
 800d30c:	4621      	mov	r1, r4
 800d30e:	4640      	mov	r0, r8
 800d310:	f7ff fee6 	bl	800d0e0 <_printf_common>
 800d314:	3001      	adds	r0, #1
 800d316:	d14a      	bne.n	800d3ae <_printf_i+0x1f2>
 800d318:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d31c:	b004      	add	sp, #16
 800d31e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d322:	6823      	ldr	r3, [r4, #0]
 800d324:	f043 0320 	orr.w	r3, r3, #32
 800d328:	6023      	str	r3, [r4, #0]
 800d32a:	4833      	ldr	r0, [pc, #204]	@ (800d3f8 <_printf_i+0x23c>)
 800d32c:	2778      	movs	r7, #120	@ 0x78
 800d32e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	6831      	ldr	r1, [r6, #0]
 800d336:	061f      	lsls	r7, r3, #24
 800d338:	f851 5b04 	ldr.w	r5, [r1], #4
 800d33c:	d402      	bmi.n	800d344 <_printf_i+0x188>
 800d33e:	065f      	lsls	r7, r3, #25
 800d340:	bf48      	it	mi
 800d342:	b2ad      	uxthmi	r5, r5
 800d344:	6031      	str	r1, [r6, #0]
 800d346:	07d9      	lsls	r1, r3, #31
 800d348:	bf44      	itt	mi
 800d34a:	f043 0320 	orrmi.w	r3, r3, #32
 800d34e:	6023      	strmi	r3, [r4, #0]
 800d350:	b11d      	cbz	r5, 800d35a <_printf_i+0x19e>
 800d352:	2310      	movs	r3, #16
 800d354:	e7ac      	b.n	800d2b0 <_printf_i+0xf4>
 800d356:	4827      	ldr	r0, [pc, #156]	@ (800d3f4 <_printf_i+0x238>)
 800d358:	e7e9      	b.n	800d32e <_printf_i+0x172>
 800d35a:	6823      	ldr	r3, [r4, #0]
 800d35c:	f023 0320 	bic.w	r3, r3, #32
 800d360:	6023      	str	r3, [r4, #0]
 800d362:	e7f6      	b.n	800d352 <_printf_i+0x196>
 800d364:	4616      	mov	r6, r2
 800d366:	e7bd      	b.n	800d2e4 <_printf_i+0x128>
 800d368:	6833      	ldr	r3, [r6, #0]
 800d36a:	6825      	ldr	r5, [r4, #0]
 800d36c:	6961      	ldr	r1, [r4, #20]
 800d36e:	1d18      	adds	r0, r3, #4
 800d370:	6030      	str	r0, [r6, #0]
 800d372:	062e      	lsls	r6, r5, #24
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	d501      	bpl.n	800d37c <_printf_i+0x1c0>
 800d378:	6019      	str	r1, [r3, #0]
 800d37a:	e002      	b.n	800d382 <_printf_i+0x1c6>
 800d37c:	0668      	lsls	r0, r5, #25
 800d37e:	d5fb      	bpl.n	800d378 <_printf_i+0x1bc>
 800d380:	8019      	strh	r1, [r3, #0]
 800d382:	2300      	movs	r3, #0
 800d384:	6123      	str	r3, [r4, #16]
 800d386:	4616      	mov	r6, r2
 800d388:	e7bc      	b.n	800d304 <_printf_i+0x148>
 800d38a:	6833      	ldr	r3, [r6, #0]
 800d38c:	1d1a      	adds	r2, r3, #4
 800d38e:	6032      	str	r2, [r6, #0]
 800d390:	681e      	ldr	r6, [r3, #0]
 800d392:	6862      	ldr	r2, [r4, #4]
 800d394:	2100      	movs	r1, #0
 800d396:	4630      	mov	r0, r6
 800d398:	f7f2 ff22 	bl	80001e0 <memchr>
 800d39c:	b108      	cbz	r0, 800d3a2 <_printf_i+0x1e6>
 800d39e:	1b80      	subs	r0, r0, r6
 800d3a0:	6060      	str	r0, [r4, #4]
 800d3a2:	6863      	ldr	r3, [r4, #4]
 800d3a4:	6123      	str	r3, [r4, #16]
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d3ac:	e7aa      	b.n	800d304 <_printf_i+0x148>
 800d3ae:	6923      	ldr	r3, [r4, #16]
 800d3b0:	4632      	mov	r2, r6
 800d3b2:	4649      	mov	r1, r9
 800d3b4:	4640      	mov	r0, r8
 800d3b6:	47d0      	blx	sl
 800d3b8:	3001      	adds	r0, #1
 800d3ba:	d0ad      	beq.n	800d318 <_printf_i+0x15c>
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	079b      	lsls	r3, r3, #30
 800d3c0:	d413      	bmi.n	800d3ea <_printf_i+0x22e>
 800d3c2:	68e0      	ldr	r0, [r4, #12]
 800d3c4:	9b03      	ldr	r3, [sp, #12]
 800d3c6:	4298      	cmp	r0, r3
 800d3c8:	bfb8      	it	lt
 800d3ca:	4618      	movlt	r0, r3
 800d3cc:	e7a6      	b.n	800d31c <_printf_i+0x160>
 800d3ce:	2301      	movs	r3, #1
 800d3d0:	4632      	mov	r2, r6
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	4640      	mov	r0, r8
 800d3d6:	47d0      	blx	sl
 800d3d8:	3001      	adds	r0, #1
 800d3da:	d09d      	beq.n	800d318 <_printf_i+0x15c>
 800d3dc:	3501      	adds	r5, #1
 800d3de:	68e3      	ldr	r3, [r4, #12]
 800d3e0:	9903      	ldr	r1, [sp, #12]
 800d3e2:	1a5b      	subs	r3, r3, r1
 800d3e4:	42ab      	cmp	r3, r5
 800d3e6:	dcf2      	bgt.n	800d3ce <_printf_i+0x212>
 800d3e8:	e7eb      	b.n	800d3c2 <_printf_i+0x206>
 800d3ea:	2500      	movs	r5, #0
 800d3ec:	f104 0619 	add.w	r6, r4, #25
 800d3f0:	e7f5      	b.n	800d3de <_printf_i+0x222>
 800d3f2:	bf00      	nop
 800d3f4:	0800d8ac 	.word	0x0800d8ac
 800d3f8:	0800d8bd 	.word	0x0800d8bd

0800d3fc <__swbuf_r>:
 800d3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3fe:	460e      	mov	r6, r1
 800d400:	4614      	mov	r4, r2
 800d402:	4605      	mov	r5, r0
 800d404:	b118      	cbz	r0, 800d40e <__swbuf_r+0x12>
 800d406:	6a03      	ldr	r3, [r0, #32]
 800d408:	b90b      	cbnz	r3, 800d40e <__swbuf_r+0x12>
 800d40a:	f7ff fa2f 	bl	800c86c <__sinit>
 800d40e:	69a3      	ldr	r3, [r4, #24]
 800d410:	60a3      	str	r3, [r4, #8]
 800d412:	89a3      	ldrh	r3, [r4, #12]
 800d414:	071a      	lsls	r2, r3, #28
 800d416:	d501      	bpl.n	800d41c <__swbuf_r+0x20>
 800d418:	6923      	ldr	r3, [r4, #16]
 800d41a:	b943      	cbnz	r3, 800d42e <__swbuf_r+0x32>
 800d41c:	4621      	mov	r1, r4
 800d41e:	4628      	mov	r0, r5
 800d420:	f000 f82a 	bl	800d478 <__swsetup_r>
 800d424:	b118      	cbz	r0, 800d42e <__swbuf_r+0x32>
 800d426:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d42a:	4638      	mov	r0, r7
 800d42c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d42e:	6823      	ldr	r3, [r4, #0]
 800d430:	6922      	ldr	r2, [r4, #16]
 800d432:	1a98      	subs	r0, r3, r2
 800d434:	6963      	ldr	r3, [r4, #20]
 800d436:	b2f6      	uxtb	r6, r6
 800d438:	4283      	cmp	r3, r0
 800d43a:	4637      	mov	r7, r6
 800d43c:	dc05      	bgt.n	800d44a <__swbuf_r+0x4e>
 800d43e:	4621      	mov	r1, r4
 800d440:	4628      	mov	r0, r5
 800d442:	f7ff fbd9 	bl	800cbf8 <_fflush_r>
 800d446:	2800      	cmp	r0, #0
 800d448:	d1ed      	bne.n	800d426 <__swbuf_r+0x2a>
 800d44a:	68a3      	ldr	r3, [r4, #8]
 800d44c:	3b01      	subs	r3, #1
 800d44e:	60a3      	str	r3, [r4, #8]
 800d450:	6823      	ldr	r3, [r4, #0]
 800d452:	1c5a      	adds	r2, r3, #1
 800d454:	6022      	str	r2, [r4, #0]
 800d456:	701e      	strb	r6, [r3, #0]
 800d458:	6962      	ldr	r2, [r4, #20]
 800d45a:	1c43      	adds	r3, r0, #1
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d004      	beq.n	800d46a <__swbuf_r+0x6e>
 800d460:	89a3      	ldrh	r3, [r4, #12]
 800d462:	07db      	lsls	r3, r3, #31
 800d464:	d5e1      	bpl.n	800d42a <__swbuf_r+0x2e>
 800d466:	2e0a      	cmp	r6, #10
 800d468:	d1df      	bne.n	800d42a <__swbuf_r+0x2e>
 800d46a:	4621      	mov	r1, r4
 800d46c:	4628      	mov	r0, r5
 800d46e:	f7ff fbc3 	bl	800cbf8 <_fflush_r>
 800d472:	2800      	cmp	r0, #0
 800d474:	d0d9      	beq.n	800d42a <__swbuf_r+0x2e>
 800d476:	e7d6      	b.n	800d426 <__swbuf_r+0x2a>

0800d478 <__swsetup_r>:
 800d478:	b538      	push	{r3, r4, r5, lr}
 800d47a:	4b29      	ldr	r3, [pc, #164]	@ (800d520 <__swsetup_r+0xa8>)
 800d47c:	4605      	mov	r5, r0
 800d47e:	6818      	ldr	r0, [r3, #0]
 800d480:	460c      	mov	r4, r1
 800d482:	b118      	cbz	r0, 800d48c <__swsetup_r+0x14>
 800d484:	6a03      	ldr	r3, [r0, #32]
 800d486:	b90b      	cbnz	r3, 800d48c <__swsetup_r+0x14>
 800d488:	f7ff f9f0 	bl	800c86c <__sinit>
 800d48c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d490:	0719      	lsls	r1, r3, #28
 800d492:	d422      	bmi.n	800d4da <__swsetup_r+0x62>
 800d494:	06da      	lsls	r2, r3, #27
 800d496:	d407      	bmi.n	800d4a8 <__swsetup_r+0x30>
 800d498:	2209      	movs	r2, #9
 800d49a:	602a      	str	r2, [r5, #0]
 800d49c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d4a0:	81a3      	strh	r3, [r4, #12]
 800d4a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4a6:	e033      	b.n	800d510 <__swsetup_r+0x98>
 800d4a8:	0758      	lsls	r0, r3, #29
 800d4aa:	d512      	bpl.n	800d4d2 <__swsetup_r+0x5a>
 800d4ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d4ae:	b141      	cbz	r1, 800d4c2 <__swsetup_r+0x4a>
 800d4b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d4b4:	4299      	cmp	r1, r3
 800d4b6:	d002      	beq.n	800d4be <__swsetup_r+0x46>
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	f7ff fc85 	bl	800cdc8 <_free_r>
 800d4be:	2300      	movs	r3, #0
 800d4c0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4c2:	89a3      	ldrh	r3, [r4, #12]
 800d4c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d4c8:	81a3      	strh	r3, [r4, #12]
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	6063      	str	r3, [r4, #4]
 800d4ce:	6923      	ldr	r3, [r4, #16]
 800d4d0:	6023      	str	r3, [r4, #0]
 800d4d2:	89a3      	ldrh	r3, [r4, #12]
 800d4d4:	f043 0308 	orr.w	r3, r3, #8
 800d4d8:	81a3      	strh	r3, [r4, #12]
 800d4da:	6923      	ldr	r3, [r4, #16]
 800d4dc:	b94b      	cbnz	r3, 800d4f2 <__swsetup_r+0x7a>
 800d4de:	89a3      	ldrh	r3, [r4, #12]
 800d4e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d4e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d4e8:	d003      	beq.n	800d4f2 <__swsetup_r+0x7a>
 800d4ea:	4621      	mov	r1, r4
 800d4ec:	4628      	mov	r0, r5
 800d4ee:	f000 f83f 	bl	800d570 <__smakebuf_r>
 800d4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4f6:	f013 0201 	ands.w	r2, r3, #1
 800d4fa:	d00a      	beq.n	800d512 <__swsetup_r+0x9a>
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	60a2      	str	r2, [r4, #8]
 800d500:	6962      	ldr	r2, [r4, #20]
 800d502:	4252      	negs	r2, r2
 800d504:	61a2      	str	r2, [r4, #24]
 800d506:	6922      	ldr	r2, [r4, #16]
 800d508:	b942      	cbnz	r2, 800d51c <__swsetup_r+0xa4>
 800d50a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d50e:	d1c5      	bne.n	800d49c <__swsetup_r+0x24>
 800d510:	bd38      	pop	{r3, r4, r5, pc}
 800d512:	0799      	lsls	r1, r3, #30
 800d514:	bf58      	it	pl
 800d516:	6962      	ldrpl	r2, [r4, #20]
 800d518:	60a2      	str	r2, [r4, #8]
 800d51a:	e7f4      	b.n	800d506 <__swsetup_r+0x8e>
 800d51c:	2000      	movs	r0, #0
 800d51e:	e7f7      	b.n	800d510 <__swsetup_r+0x98>
 800d520:	20000040 	.word	0x20000040

0800d524 <__swhatbuf_r>:
 800d524:	b570      	push	{r4, r5, r6, lr}
 800d526:	460c      	mov	r4, r1
 800d528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d52c:	2900      	cmp	r1, #0
 800d52e:	b096      	sub	sp, #88	@ 0x58
 800d530:	4615      	mov	r5, r2
 800d532:	461e      	mov	r6, r3
 800d534:	da0d      	bge.n	800d552 <__swhatbuf_r+0x2e>
 800d536:	89a3      	ldrh	r3, [r4, #12]
 800d538:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d53c:	f04f 0100 	mov.w	r1, #0
 800d540:	bf14      	ite	ne
 800d542:	2340      	movne	r3, #64	@ 0x40
 800d544:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d548:	2000      	movs	r0, #0
 800d54a:	6031      	str	r1, [r6, #0]
 800d54c:	602b      	str	r3, [r5, #0]
 800d54e:	b016      	add	sp, #88	@ 0x58
 800d550:	bd70      	pop	{r4, r5, r6, pc}
 800d552:	466a      	mov	r2, sp
 800d554:	f000 f848 	bl	800d5e8 <_fstat_r>
 800d558:	2800      	cmp	r0, #0
 800d55a:	dbec      	blt.n	800d536 <__swhatbuf_r+0x12>
 800d55c:	9901      	ldr	r1, [sp, #4]
 800d55e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d562:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d566:	4259      	negs	r1, r3
 800d568:	4159      	adcs	r1, r3
 800d56a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d56e:	e7eb      	b.n	800d548 <__swhatbuf_r+0x24>

0800d570 <__smakebuf_r>:
 800d570:	898b      	ldrh	r3, [r1, #12]
 800d572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d574:	079d      	lsls	r5, r3, #30
 800d576:	4606      	mov	r6, r0
 800d578:	460c      	mov	r4, r1
 800d57a:	d507      	bpl.n	800d58c <__smakebuf_r+0x1c>
 800d57c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d580:	6023      	str	r3, [r4, #0]
 800d582:	6123      	str	r3, [r4, #16]
 800d584:	2301      	movs	r3, #1
 800d586:	6163      	str	r3, [r4, #20]
 800d588:	b003      	add	sp, #12
 800d58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d58c:	ab01      	add	r3, sp, #4
 800d58e:	466a      	mov	r2, sp
 800d590:	f7ff ffc8 	bl	800d524 <__swhatbuf_r>
 800d594:	9f00      	ldr	r7, [sp, #0]
 800d596:	4605      	mov	r5, r0
 800d598:	4639      	mov	r1, r7
 800d59a:	4630      	mov	r0, r6
 800d59c:	f7ff fa28 	bl	800c9f0 <_malloc_r>
 800d5a0:	b948      	cbnz	r0, 800d5b6 <__smakebuf_r+0x46>
 800d5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5a6:	059a      	lsls	r2, r3, #22
 800d5a8:	d4ee      	bmi.n	800d588 <__smakebuf_r+0x18>
 800d5aa:	f023 0303 	bic.w	r3, r3, #3
 800d5ae:	f043 0302 	orr.w	r3, r3, #2
 800d5b2:	81a3      	strh	r3, [r4, #12]
 800d5b4:	e7e2      	b.n	800d57c <__smakebuf_r+0xc>
 800d5b6:	89a3      	ldrh	r3, [r4, #12]
 800d5b8:	6020      	str	r0, [r4, #0]
 800d5ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5be:	81a3      	strh	r3, [r4, #12]
 800d5c0:	9b01      	ldr	r3, [sp, #4]
 800d5c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d5c6:	b15b      	cbz	r3, 800d5e0 <__smakebuf_r+0x70>
 800d5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5cc:	4630      	mov	r0, r6
 800d5ce:	f000 f81d 	bl	800d60c <_isatty_r>
 800d5d2:	b128      	cbz	r0, 800d5e0 <__smakebuf_r+0x70>
 800d5d4:	89a3      	ldrh	r3, [r4, #12]
 800d5d6:	f023 0303 	bic.w	r3, r3, #3
 800d5da:	f043 0301 	orr.w	r3, r3, #1
 800d5de:	81a3      	strh	r3, [r4, #12]
 800d5e0:	89a3      	ldrh	r3, [r4, #12]
 800d5e2:	431d      	orrs	r5, r3
 800d5e4:	81a5      	strh	r5, [r4, #12]
 800d5e6:	e7cf      	b.n	800d588 <__smakebuf_r+0x18>

0800d5e8 <_fstat_r>:
 800d5e8:	b538      	push	{r3, r4, r5, lr}
 800d5ea:	4d07      	ldr	r5, [pc, #28]	@ (800d608 <_fstat_r+0x20>)
 800d5ec:	2300      	movs	r3, #0
 800d5ee:	4604      	mov	r4, r0
 800d5f0:	4608      	mov	r0, r1
 800d5f2:	4611      	mov	r1, r2
 800d5f4:	602b      	str	r3, [r5, #0]
 800d5f6:	f7f4 fcb1 	bl	8001f5c <_fstat>
 800d5fa:	1c43      	adds	r3, r0, #1
 800d5fc:	d102      	bne.n	800d604 <_fstat_r+0x1c>
 800d5fe:	682b      	ldr	r3, [r5, #0]
 800d600:	b103      	cbz	r3, 800d604 <_fstat_r+0x1c>
 800d602:	6023      	str	r3, [r4, #0]
 800d604:	bd38      	pop	{r3, r4, r5, pc}
 800d606:	bf00      	nop
 800d608:	20002be8 	.word	0x20002be8

0800d60c <_isatty_r>:
 800d60c:	b538      	push	{r3, r4, r5, lr}
 800d60e:	4d06      	ldr	r5, [pc, #24]	@ (800d628 <_isatty_r+0x1c>)
 800d610:	2300      	movs	r3, #0
 800d612:	4604      	mov	r4, r0
 800d614:	4608      	mov	r0, r1
 800d616:	602b      	str	r3, [r5, #0]
 800d618:	f7f4 fcb0 	bl	8001f7c <_isatty>
 800d61c:	1c43      	adds	r3, r0, #1
 800d61e:	d102      	bne.n	800d626 <_isatty_r+0x1a>
 800d620:	682b      	ldr	r3, [r5, #0]
 800d622:	b103      	cbz	r3, 800d626 <_isatty_r+0x1a>
 800d624:	6023      	str	r3, [r4, #0]
 800d626:	bd38      	pop	{r3, r4, r5, pc}
 800d628:	20002be8 	.word	0x20002be8

0800d62c <_raise_r>:
 800d62c:	291f      	cmp	r1, #31
 800d62e:	b538      	push	{r3, r4, r5, lr}
 800d630:	4605      	mov	r5, r0
 800d632:	460c      	mov	r4, r1
 800d634:	d904      	bls.n	800d640 <_raise_r+0x14>
 800d636:	2316      	movs	r3, #22
 800d638:	6003      	str	r3, [r0, #0]
 800d63a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d63e:	bd38      	pop	{r3, r4, r5, pc}
 800d640:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d642:	b112      	cbz	r2, 800d64a <_raise_r+0x1e>
 800d644:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d648:	b94b      	cbnz	r3, 800d65e <_raise_r+0x32>
 800d64a:	4628      	mov	r0, r5
 800d64c:	f000 f830 	bl	800d6b0 <_getpid_r>
 800d650:	4622      	mov	r2, r4
 800d652:	4601      	mov	r1, r0
 800d654:	4628      	mov	r0, r5
 800d656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d65a:	f000 b817 	b.w	800d68c <_kill_r>
 800d65e:	2b01      	cmp	r3, #1
 800d660:	d00a      	beq.n	800d678 <_raise_r+0x4c>
 800d662:	1c59      	adds	r1, r3, #1
 800d664:	d103      	bne.n	800d66e <_raise_r+0x42>
 800d666:	2316      	movs	r3, #22
 800d668:	6003      	str	r3, [r0, #0]
 800d66a:	2001      	movs	r0, #1
 800d66c:	e7e7      	b.n	800d63e <_raise_r+0x12>
 800d66e:	2100      	movs	r1, #0
 800d670:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d674:	4620      	mov	r0, r4
 800d676:	4798      	blx	r3
 800d678:	2000      	movs	r0, #0
 800d67a:	e7e0      	b.n	800d63e <_raise_r+0x12>

0800d67c <raise>:
 800d67c:	4b02      	ldr	r3, [pc, #8]	@ (800d688 <raise+0xc>)
 800d67e:	4601      	mov	r1, r0
 800d680:	6818      	ldr	r0, [r3, #0]
 800d682:	f7ff bfd3 	b.w	800d62c <_raise_r>
 800d686:	bf00      	nop
 800d688:	20000040 	.word	0x20000040

0800d68c <_kill_r>:
 800d68c:	b538      	push	{r3, r4, r5, lr}
 800d68e:	4d07      	ldr	r5, [pc, #28]	@ (800d6ac <_kill_r+0x20>)
 800d690:	2300      	movs	r3, #0
 800d692:	4604      	mov	r4, r0
 800d694:	4608      	mov	r0, r1
 800d696:	4611      	mov	r1, r2
 800d698:	602b      	str	r3, [r5, #0]
 800d69a:	f7f4 fbff 	bl	8001e9c <_kill>
 800d69e:	1c43      	adds	r3, r0, #1
 800d6a0:	d102      	bne.n	800d6a8 <_kill_r+0x1c>
 800d6a2:	682b      	ldr	r3, [r5, #0]
 800d6a4:	b103      	cbz	r3, 800d6a8 <_kill_r+0x1c>
 800d6a6:	6023      	str	r3, [r4, #0]
 800d6a8:	bd38      	pop	{r3, r4, r5, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20002be8 	.word	0x20002be8

0800d6b0 <_getpid_r>:
 800d6b0:	f7f4 bbec 	b.w	8001e8c <_getpid>

0800d6b4 <_init>:
 800d6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b6:	bf00      	nop
 800d6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6ba:	bc08      	pop	{r3}
 800d6bc:	469e      	mov	lr, r3
 800d6be:	4770      	bx	lr

0800d6c0 <_fini>:
 800d6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6c2:	bf00      	nop
 800d6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c6:	bc08      	pop	{r3}
 800d6c8:	469e      	mov	lr, r3
 800d6ca:	4770      	bx	lr
